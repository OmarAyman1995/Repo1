
ACCU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c94  08002c94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c94  08002c94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c94  08002c94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002ca8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ca8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e935  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb9  00000000  00000000  0002e96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00030828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000315f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c3d  00000000  00000000  00032310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb6a  00000000  00000000  00049f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e151  00000000  00000000  00058ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000e6c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c50 	.word	0x08002c50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c50 	.word	0x08002c50

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb99 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f80f 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f96f 	bl	800043c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f85b 	bl	8000218 <MX_ADC1_Init>
  MX_CAN_Init();
 8000162:	f000 f897 	bl	8000294 <MX_CAN_Init>
  MX_TIM4_Init();
 8000166:	f000 f8cb 	bl	8000300 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f93d 	bl	80003e8 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_GetValue(&adcvar);
 800016e:	463b      	mov	r3, r7
 8000170:	4618      	mov	r0, r3
 8000172:	f000 fcc3 	bl	8000afc <HAL_ADC_GetValue>
 8000176:	e7fa      	b.n	800016e <main+0x22>

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 fd5a 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a8:	2302      	movs	r3, #2
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b0:	2310      	movs	r3, #16
 80001b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 f987 	bl	80014d0 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001c8:	f000 f9ca 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d0:	2300      	movs	r3, #0
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fbf4 	bl	80019d4 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80001f2:	f000 f9b5 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80001f6:	2302      	movs	r3, #2
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fd75 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800020c:	f000 f9a8 	bl	8000560 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3750      	adds	r7, #80	; 0x50
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_ADC1_Init+0x74>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <MX_ADC1_Init+0x78>)
 800022c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_ADC1_Init+0x74>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_ADC1_Init+0x74>)
 8000236:	2200      	movs	r2, #0
 8000238:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_ADC1_Init+0x74>)
 8000242:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_ADC1_Init+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_ADC1_Init+0x74>)
 8000250:	2201      	movs	r2, #1
 8000252:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <MX_ADC1_Init+0x74>)
 8000256:	f000 fb79 	bl	800094c <HAL_ADC_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000260:	f000 f97e 	bl	8000560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000268:	2301      	movs	r3, #1
 800026a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4619      	mov	r1, r3
 8000274:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_ADC1_Init+0x74>)
 8000276:	f000 fc4d 	bl	8000b14 <HAL_ADC_ConfigChannel>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000280:	f000 f96e 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	40012400 	.word	0x40012400

08000294 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_CAN_Init+0x64>)
 800029a:	4a18      	ldr	r2, [pc, #96]	; (80002fc <MX_CAN_Init+0x68>)
 800029c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_CAN_Init+0x64>)
 80002a0:	2210      	movs	r2, #16
 80002a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_CAN_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <MX_CAN_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_CAN_Init+0x64>)
 80002b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80002b6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_CAN_Init+0x64>)
 80002ba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <MX_CAN_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_CAN_Init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_CAN_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_CAN_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_CAN_Init+0x64>)
 80002e6:	f000 fd4e 	bl	8000d86 <HAL_CAN_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002f0:	f000 f936 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000058 	.word	0x20000058
 80002fc:	40006400 	.word	0x40006400

08000300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08e      	sub	sp, #56	; 0x38
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000314:	f107 0320 	add.w	r3, r7, #32
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	615a      	str	r2, [r3, #20]
 800032e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000330:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000332:	4a2c      	ldr	r2, [pc, #176]	; (80003e4 <MX_TIM4_Init+0xe4>)
 8000334:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 8000336:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000338:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800033c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000346:	2201      	movs	r2, #1
 8000348:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_TIM4_Init+0xe0>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000356:	4822      	ldr	r0, [pc, #136]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000358:	f001 fd80 	bl	8001e5c <HAL_TIM_Base_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000362:	f000 f8fd 	bl	8000560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800036c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000370:	4619      	mov	r1, r3
 8000372:	481b      	ldr	r0, [pc, #108]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000374:	f001 ff7e 	bl	8002274 <HAL_TIM_ConfigClockSource>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800037e:	f000 f8ef 	bl	8000560 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000382:	4817      	ldr	r0, [pc, #92]	; (80003e0 <MX_TIM4_Init+0xe0>)
 8000384:	f001 fdb9 	bl	8001efa <HAL_TIM_OC_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800038e:	f000 f8e7 	bl	8000560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800039a:	f107 0320 	add.w	r3, r7, #32
 800039e:	4619      	mov	r1, r3
 80003a0:	480f      	ldr	r0, [pc, #60]	; (80003e0 <MX_TIM4_Init+0xe0>)
 80003a2:	f002 fadb 	bl	800295c <HAL_TIMEx_MasterConfigSynchronization>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80003ac:	f000 f8d8 	bl	8000560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <MX_TIM4_Init+0xe0>)
 80003c8:	f001 fef8 	bl	80021bc <HAL_TIM_OC_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80003d2:	f000 f8c5 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	3738      	adds	r7, #56	; 0x38
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000080 	.word	0x20000080
 80003e4:	40000800 	.word	0x40000800

080003e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <MX_USART1_UART_Init+0x50>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000420:	f002 fb0c 	bl	8002a3c <HAL_UART_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042a:	f000 f899 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000c8 	.word	0x200000c8
 8000438:	40013800 	.word	0x40013800

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000450:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <MX_GPIO_Init+0x114>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a3e      	ldr	r2, [pc, #248]	; (8000550 <MX_GPIO_Init+0x114>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b3c      	ldr	r3, [pc, #240]	; (8000550 <MX_GPIO_Init+0x114>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0310 	and.w	r3, r3, #16
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b39      	ldr	r3, [pc, #228]	; (8000550 <MX_GPIO_Init+0x114>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a38      	ldr	r2, [pc, #224]	; (8000550 <MX_GPIO_Init+0x114>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b36      	ldr	r3, [pc, #216]	; (8000550 <MX_GPIO_Init+0x114>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000480:	4b33      	ldr	r3, [pc, #204]	; (8000550 <MX_GPIO_Init+0x114>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a32      	ldr	r2, [pc, #200]	; (8000550 <MX_GPIO_Init+0x114>)
 8000486:	f043 0308 	orr.w	r3, r3, #8
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b30      	ldr	r3, [pc, #192]	; (8000550 <MX_GPIO_Init+0x114>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0308 	and.w	r3, r3, #8
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Yellow_Pin|Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800049e:	482d      	ldr	r0, [pc, #180]	; (8000554 <MX_GPIO_Init+0x118>)
 80004a0:	f000 fffe 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_2_LED_Pin|Red_1_LED_Pin|Relay_2_Pin|LCDA8_Pin
 80004a4:	2200      	movs	r2, #0
 80004a6:	f640 110e 	movw	r1, #2318	; 0x90e
 80004aa:	482b      	ldr	r0, [pc, #172]	; (8000558 <MX_GPIO_Init+0x11c>)
 80004ac:	f000 fff8 	bl	80014a0 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_Pin|LCDB13_Pin|LCDB14_Pin|LCDB15_Pin
 80004b0:	2200      	movs	r2, #0
 80004b2:	f24f 0130 	movw	r1, #61488	; 0xf030
 80004b6:	4829      	ldr	r0, [pc, #164]	; (800055c <MX_GPIO_Init+0x120>)
 80004b8:	f000 fff2 	bl	80014a0 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|Relay_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Yellow_Pin Blue_LED_Pin Green_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_Pin|Blue_LED_Pin|Green_LED_Pin;
 80004bc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	481f      	ldr	r0, [pc, #124]	; (8000554 <MX_GPIO_Init+0x118>)
 80004d6:	f000 fe5f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_2_LED_Pin Red_1_LED_Pin Relay_2_Pin LCDA8_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = Red_2_LED_Pin|Red_1_LED_Pin|Relay_2_Pin|LCDA8_Pin
 80004da:	f640 130e 	movw	r3, #2318	; 0x90e
 80004de:	613b      	str	r3, [r7, #16]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4819      	ldr	r0, [pc, #100]	; (8000558 <MX_GPIO_Init+0x11c>)
 80004f4:	f000 fe50 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row_1_Pin Row_2_Pin Row_3_Pin Row_4_Pin */
  GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin;
 80004f8:	23f0      	movs	r3, #240	; 0xf0
 80004fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4813      	ldr	r0, [pc, #76]	; (8000558 <MX_GPIO_Init+0x11c>)
 800050c:	f000 fe44 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : Col_4_Pin Col_3_Pin Col_2_Pin Col_1_Pin */
  GPIO_InitStruct.Pin = Col_4_Pin|Col_3_Pin|Col_2_Pin|Col_1_Pin;
 8000510:	f640 4303 	movw	r3, #3075	; 0xc03
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_GPIO_Init+0x120>)
 8000526:	f000 fe37 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin LCDB13_Pin LCDB14_Pin LCDB15_Pin
                           Buzzer_Pin Relay_1_Pin */
  GPIO_InitStruct.Pin = LCD_Pin|LCDB13_Pin|LCDB14_Pin|LCDB15_Pin
 800052a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800052e:	613b      	str	r3, [r7, #16]
                          |Buzzer_Pin|Relay_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_GPIO_Init+0x120>)
 8000544:	f000 fe28 	bl	8001198 <HAL_GPIO_Init>

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	40011000 	.word	0x40011000
 8000558:	40010800 	.word	0x40010800
 800055c:	40010c00 	.word	0x40010c00

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_MspInit+0x40>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <HAL_MspInit+0x40>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_MspInit+0x40>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_MspInit+0x40>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_MspInit+0x40>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_MspInit+0x40>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_ADC_MspInit+0x6c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d121      	bne.n	8000614 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x70>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Analog_Input_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000604:	2303      	movs	r3, #3
 8000606:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Analog_Input_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_ADC_MspInit+0x74>)
 8000610:	f000 fdc2 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40012400 	.word	0x40012400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800

08000628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <HAL_CAN_MspInit+0xb0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d143      	bne.n	80006d0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a23      	ldr	r2, [pc, #140]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_CAN_MspInit+0xb4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <HAL_CAN_MspInit+0xb8>)
 800068e:	f000 fd83 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <HAL_CAN_MspInit+0xb8>)
 80006a8:	f000 fd76 	bl	8001198 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_CAN_MspInit+0xbc>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_CAN_MspInit+0xbc>)
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40010000 	.word	0x40010000

080006e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <HAL_TIM_Base_MspInit+0x44>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d113      	bne.n	8000722 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_TIM_Base_MspInit+0x48>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <HAL_TIM_Base_MspInit+0x48>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_TIM_Base_MspInit+0x48>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	201e      	movs	r0, #30
 8000718:	f000 fd07 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800071c:	201e      	movs	r0, #30
 800071e:	f000 fd20 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40000800 	.word	0x40000800
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <HAL_UART_MspInit+0x8c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d131      	bne.n	80007b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_UART_MspInit+0x94>)
 800079a:	f000 fcfd 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_UART_MspInit+0x94>)
 80007b4:	f000 fcf0 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 f87f 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM4_IRQHandler+0x10>)
 8000822:	f001 fbc2 	bl	8001faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000080 	.word	0x20000080

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff8 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 f9c7 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc6f 	bl	800014c <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002c9c 	.word	0x08002c9c
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	20000114 	.word	0x20000114

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 fc3b 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe62 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fc53 	bl	800117e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 fc1b 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000110 	.word	0x20000110

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000110 	.word	0x20000110

0800094c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e0be      	b.n	8000aec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000978:	2b00      	cmp	r3, #0
 800097a:	d109      	bne.n	8000990 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fe10 	bl	80005b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f9b7 	bl	8000d04 <ADC_ConversionStop_Disable>
 8000996:	4603      	mov	r3, r0
 8000998:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 8099 	bne.w	8000ada <HAL_ADC_Init+0x18e>
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f040 8095 	bne.w	8000ada <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	f043 0202 	orr.w	r2, r3, #2
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7b1b      	ldrb	r3, [r3, #12]
 80009d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009e4:	d003      	beq.n	80009ee <HAL_ADC_Init+0xa2>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d102      	bne.n	80009f4 <HAL_ADC_Init+0xa8>
 80009ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f2:	e000      	b.n	80009f6 <HAL_ADC_Init+0xaa>
 80009f4:	2300      	movs	r3, #0
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7d1b      	ldrb	r3, [r3, #20]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d119      	bne.n	8000a38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7b1b      	ldrb	r3, [r3, #12]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	035a      	lsls	r2, r3, #13
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e00b      	b.n	8000a38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f043 0220 	orr.w	r2, r3, #32
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f043 0201 	orr.w	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <HAL_ADC_Init+0x1a8>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a68:	d003      	beq.n	8000a72 <HAL_ADC_Init+0x126>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d104      	bne.n	8000a7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	051b      	lsls	r3, r3, #20
 8000a7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_ADC_Init+0x1ac>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aaa:	f023 0303 	bic.w	r3, r3, #3
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab6:	e018      	b.n	8000aea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f023 0312 	bic.w	r3, r3, #18
 8000ac0:	f043 0210 	orr.w	r2, r3, #16
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	f043 0201 	orr.w	r2, r3, #1
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad8:	e007      	b.n	8000aea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ade:	f043 0210 	orr.w	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	ffe1f7fd 	.word	0xffe1f7fd
 8000af8:	ff1f0efe 	.word	0xff1f0efe

08000afc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <HAL_ADC_ConfigChannel+0x20>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e0dc      	b.n	8000cee <HAL_ADC_ConfigChannel+0x1da>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b06      	cmp	r3, #6
 8000b42:	d81c      	bhi.n	8000b7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	3b05      	subs	r3, #5
 8000b56:	221f      	movs	r2, #31
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4019      	ands	r1, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3b05      	subs	r3, #5
 8000b70:	fa00 f203 	lsl.w	r2, r0, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7c:	e03c      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d81c      	bhi.n	8000bc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	3b23      	subs	r3, #35	; 0x23
 8000b98:	221f      	movs	r2, #31
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4019      	ands	r1, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	3b23      	subs	r3, #35	; 0x23
 8000bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000bbe:	e01b      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b41      	subs	r3, #65	; 0x41
 8000bd2:	221f      	movs	r2, #31
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4019      	ands	r1, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	3b41      	subs	r3, #65	; 0x41
 8000bec:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b09      	cmp	r3, #9
 8000bfe:	d91c      	bls.n	8000c3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68d9      	ldr	r1, [r3, #12]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	3b1e      	subs	r3, #30
 8000c12:	2207      	movs	r2, #7
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4019      	ands	r1, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	6898      	ldr	r0, [r3, #8]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	3b1e      	subs	r3, #30
 8000c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	e019      	b.n	8000c6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6919      	ldr	r1, [r3, #16]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4019      	ands	r1, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6898      	ldr	r0, [r3, #8]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	fa00 f203 	lsl.w	r2, r0, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c7a:	2b11      	cmp	r3, #17
 8000c7c:	d132      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d125      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d126      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ca4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d11a      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_ADC_ConfigChannel+0x1e8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9a      	lsrs	r2, r3, #18
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cc4:	e002      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f9      	bne.n	8000cc6 <HAL_ADC_ConfigChannel+0x1b2>
 8000cd2:	e007      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f043 0220 	orr.w	r2, r3, #32
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40012400 	.word	0x40012400
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	431bde83 	.word	0x431bde83

08000d04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d12e      	bne.n	8000d7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d2e:	f7ff fe03 	bl	8000938 <HAL_GetTick>
 8000d32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d34:	e01b      	b.n	8000d6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d36:	f7ff fdff 	bl	8000938 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d914      	bls.n	8000d6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10d      	bne.n	8000d6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f043 0210 	orr.w	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	f043 0201 	orr.w	r2, r3, #1
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e007      	b.n	8000d7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d0dc      	beq.n	8000d36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0ed      	b.n	8000f74 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fc3f 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0201 	orr.w	r2, r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dba:	f7ff fdbd 	bl	8000938 <HAL_GetTick>
 8000dbe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dc0:	e012      	b.n	8000de8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc2:	f7ff fdb9 	bl	8000938 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b0a      	cmp	r3, #10
 8000dce:	d90b      	bls.n	8000de8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2205      	movs	r2, #5
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e0c5      	b.n	8000f74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0e5      	beq.n	8000dc2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0202 	bic.w	r2, r2, #2
 8000e04:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e06:	f7ff fd97 	bl	8000938 <HAL_GetTick>
 8000e0a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e0c:	e012      	b.n	8000e34 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e0e:	f7ff fd93 	bl	8000938 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b0a      	cmp	r3, #10
 8000e1a:	d90b      	bls.n	8000e34 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e09f      	b.n	8000f74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1e5      	bne.n	8000e0e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7e1b      	ldrb	r3, [r3, #24]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7e5b      	ldrb	r3, [r3, #25]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d108      	bne.n	8000e86 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e007      	b.n	8000e96 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7e9b      	ldrb	r3, [r3, #26]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0220 	orr.w	r2, r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e007      	b.n	8000ec0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0220 	bic.w	r2, r2, #32
 8000ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7edb      	ldrb	r3, [r3, #27]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d108      	bne.n	8000eda <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0210 	bic.w	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0210 	orr.w	r2, r2, #16
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7f1b      	ldrb	r3, [r3, #28]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d108      	bne.n	8000f04 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0208 	orr.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e007      	b.n	8000f14 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0208 	bic.w	r2, r2, #8
 8000f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7f5b      	ldrb	r3, [r3, #29]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0204 	orr.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0204 	bic.w	r2, r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	ea42 0103 	orr.w	r1, r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4906      	ldr	r1, [pc, #24]	; (8001014 <__NVIC_EnableIRQ+0x34>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff90 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff2d 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff42 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff90 	bl	800106c <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5f 	bl	8001018 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff35 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e169      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ac:	2201      	movs	r2, #1
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8158 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a9a      	ldr	r2, [pc, #616]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d05e      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011d4:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d875      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011da:	4a98      	ldr	r2, [pc, #608]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d058      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011e0:	4a96      	ldr	r2, [pc, #600]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d86f      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011e6:	4a96      	ldr	r2, [pc, #600]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d052      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011ec:	4a94      	ldr	r2, [pc, #592]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d869      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011f2:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d04c      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011f8:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d863      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011fe:	4a92      	ldr	r2, [pc, #584]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d046      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 8001204:	4a90      	ldr	r2, [pc, #576]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d85d      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d82a      	bhi.n	8001264 <HAL_GPIO_Init+0xcc>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d859      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <HAL_GPIO_Init+0x80>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001293 	.word	0x08001293
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800127f 	.word	0x0800127f
 8001224:	080012c1 	.word	0x080012c1
 8001228:	080012c7 	.word	0x080012c7
 800122c:	080012c7 	.word	0x080012c7
 8001230:	080012c7 	.word	0x080012c7
 8001234:	080012c7 	.word	0x080012c7
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c7 	.word	0x080012c7
 8001240:	080012c7 	.word	0x080012c7
 8001244:	080012c7 	.word	0x080012c7
 8001248:	080012c7 	.word	0x080012c7
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012c7 	.word	0x080012c7
 8001254:	080012c7 	.word	0x080012c7
 8001258:	080012c7 	.word	0x080012c7
 800125c:	08001275 	.word	0x08001275
 8001260:	08001289 	.word	0x08001289
 8001264:	4a79      	ldr	r2, [pc, #484]	; (800144c <HAL_GPIO_Init+0x2b4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126a:	e02c      	b.n	80012c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e029      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e024      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	3308      	adds	r3, #8
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e01f      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e01a      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129a:	2304      	movs	r3, #4
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e013      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	611a      	str	r2, [r3, #16]
          break;
 80012b2:	e009      	b.n	80012c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	615a      	str	r2, [r3, #20]
          break;
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          break;
 80012c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d801      	bhi.n	80012d2 <HAL_GPIO_Init+0x13a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_Init+0x13e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3304      	adds	r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d802      	bhi.n	80012e4 <HAL_GPIO_Init+0x14c>
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x152>
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3b08      	subs	r3, #8
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	210f      	movs	r1, #15
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	6a39      	ldr	r1, [r7, #32]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80b1 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_GPIO_Init+0x2c0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d013      	beq.n	8001384 <HAL_GPIO_Init+0x1ec>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <HAL_GPIO_Init+0x2c4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1e8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1e4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1e0>
 8001374:	2303      	movs	r3, #3
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001378:	2304      	movs	r3, #4
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001384:	2300      	movs	r3, #0
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001396:	492f      	ldr	r1, [pc, #188]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	492c      	ldr	r1, [pc, #176]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	4922      	ldr	r1, [pc, #136]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	491e      	ldr	r1, [pc, #120]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4918      	ldr	r1, [pc, #96]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4914      	ldr	r1, [pc, #80]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d021      	beq.n	800146c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e021      	b.n	800147a <HAL_GPIO_Init+0x2e2>
 8001436:	bf00      	nop
 8001438:	10320000 	.word	0x10320000
 800143c:	10310000 	.word	0x10310000
 8001440:	10220000 	.word	0x10220000
 8001444:	10210000 	.word	0x10210000
 8001448:	10120000 	.word	0x10120000
 800144c:	10110000 	.word	0x10110000
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	40010800 	.word	0x40010800
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40011000 	.word	0x40011000
 8001464:	40011400 	.word	0x40011400
 8001468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_GPIO_Init+0x304>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <HAL_GPIO_Init+0x304>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f47f ae8e 	bne.w	80011ac <HAL_GPIO_Init+0x14>
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	372c      	adds	r7, #44	; 0x2c
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e272      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8087 	beq.w	80015fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d00c      	beq.n	8001516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fc:	4b8f      	ldr	r3, [pc, #572]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d112      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d10b      	bne.n	800152e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d06c      	beq.n	80015fc <HAL_RCC_OscConfig+0x12c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d168      	bne.n	80015fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e24c      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x76>
 8001538:	4b80      	ldr	r3, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a7f      	ldr	r2, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b7b      	ldr	r3, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7a      	ldr	r2, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a77      	ldr	r2, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0xbc>
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a71      	ldr	r2, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xd4>
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a6a      	ldr	r2, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f9c4 	bl	8000938 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff f9c0 	bl	8000938 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e200      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe4>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff f9b0 	bl	8000938 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff f9ac 	bl	8000938 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1ec      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x10c>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1c0      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4939      	ldr	r1, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e03a      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f965 	bl	8000938 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff f961 	bl	8000938 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1a1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4927      	ldr	r1, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x270>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f944 	bl	8000938 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff f940 	bl	8000938 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e180      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03a      	beq.n	8001754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f924 	bl	8000938 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f920 	bl	8000938 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e160      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f000 face 	bl	8001cb4 <RCC_Delay>
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_OscConfig+0x274>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff f90a 	bl	8000938 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff f906 	bl	8000938 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d908      	bls.n	8001748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e146      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	42420000 	.word	0x42420000
 8001744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e9      	bne.n	8001728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a6 	beq.w	80018ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10d      	bne.n	800178e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a87      	ldr	r2, [pc, #540]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7e      	ldr	r2, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff f8c7 	bl	8000938 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ae:	f7ff f8c3 	bl	8000938 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b64      	cmp	r3, #100	; 0x64
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e103      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <HAL_RCC_OscConfig+0x4c8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x312>
 80017d4:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e02d      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x334>
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a66      	ldr	r2, [pc, #408]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	e01c      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x356>
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a60      	ldr	r2, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a5d      	ldr	r2, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x36e>
 8001826:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a5a      	ldr	r2, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff f877 	bl	8000938 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff f873 	bl	8000938 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0b1      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x37e>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f861 	bl	8000938 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f85d 	bl	8000938 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e09b      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8087 	beq.w	80019c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d061      	beq.n	8001988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d146      	bne.n	800195a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f831 	bl	8000938 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f82d 	bl	8000938 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e06d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001900:	d108      	bne.n	8001914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a19      	ldr	r1, [r3, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	430b      	orrs	r3, r1
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff f801 	bl	8000938 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7fe fffd 	bl	8000938 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e03d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x46a>
 8001958:	e035      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x4cc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe ffea 	bl	8000938 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe ffe6 	bl	8000938 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e026      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x498>
 8001986:	e01e      	b.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e019      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x500>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4965      	ldr	r1, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7fe ff38 	bl	8000938 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7fe ff34 	bl	8000938 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fe96 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08002c68 	.word	0x08002c68
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x36>
 8001bd6:	e027      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bda:	613b      	str	r3, [r7, #16]
      break;
 8001bdc:	e027      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	0c5b      	lsrs	r3, r3, #17
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0a:	fb03 f202 	mul.w	r2, r3, r2
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e004      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	613b      	str	r3, [r7, #16]
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2a:	613b      	str	r3, [r7, #16]
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	693b      	ldr	r3, [r7, #16]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	007a1200 	.word	0x007a1200
 8001c44:	08002c80 	.word	0x08002c80
 8001c48:	08002c90 	.word	0x08002c90
 8001c4c:	003d0900 	.word	0x003d0900

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff2 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002c78 	.word	0x08002c78

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0adb      	lsrs	r3, r3, #11
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08002c78 	.word	0x08002c78

08001cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <RCC_Delay+0x34>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <RCC_Delay+0x38>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0a5b      	lsrs	r3, r3, #9
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd0:	bf00      	nop
  }
  while (Delay --);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	60fa      	str	r2, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <RCC_Delay+0x1c>
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	10624dd3 	.word	0x10624dd3

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07d      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d118      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a42      	ldr	r2, [pc, #264]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fdf2 	bl	8000938 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	e008      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7fe fdee 	bl	8000938 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e06d      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d02e      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d027      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001daa:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d014      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe fdbd 	bl	8000938 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fdb9 	bl	8000938 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e036      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4917      	ldr	r1, [pc, #92]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	490b      	ldr	r1, [pc, #44]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4904      	ldr	r1, [pc, #16]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	42420440 	.word	0x42420440

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e041      	b.n	8001ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fc30 	bl	80006e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f000 fade 	bl	800245c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e041      	b.n	8001f90 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f839 	bl	8001f98 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f000 fa8f 	bl	800245c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d122      	bne.n	8002006 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d11b      	bne.n	8002006 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 0202 	mvn.w	r2, #2
 8001fd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fa1a 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 8001ff2:	e005      	b.n	8002000 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fa0d 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa1c 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d122      	bne.n	800205a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d11b      	bne.n	800205a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f06f 0204 	mvn.w	r2, #4
 800202a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f9f0 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 8002046:	e005      	b.n	8002054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f9e3 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9f2 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d122      	bne.n	80020ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11b      	bne.n	80020ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0208 	mvn.w	r2, #8
 800207e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2204      	movs	r2, #4
 8002084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f9c6 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 800209a:	e005      	b.n	80020a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f9b9 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f9c8 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d122      	bne.n	8002102 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d11b      	bne.n	8002102 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0210 	mvn.w	r2, #16
 80020d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2208      	movs	r2, #8
 80020d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f99c 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 80020ee:	e005      	b.n	80020fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f98f 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f99e 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10e      	bne.n	800212e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0201 	mvn.w	r2, #1
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f96a 	bl	8002402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d10e      	bne.n	800215a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b80      	cmp	r3, #128	; 0x80
 8002148:	d107      	bne.n	800215a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fc68 	bl	8002a2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d10e      	bne.n	8002186 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d107      	bne.n	8002186 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800217e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f962 	bl	800244a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d10e      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d107      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f06f 0220 	mvn.w	r2, #32
 80021aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fc33 	bl	8002a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_TIM_OC_ConfigChannel+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e048      	b.n	800226c <HAL_TIM_OC_ConfigChannel+0xb0>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d839      	bhi.n	800225c <HAL_TIM_OC_ConfigChannel+0xa0>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002225 	.word	0x08002225
 80021f4:	0800225d 	.word	0x0800225d
 80021f8:	0800225d 	.word	0x0800225d
 80021fc:	0800225d 	.word	0x0800225d
 8002200:	08002233 	.word	0x08002233
 8002204:	0800225d 	.word	0x0800225d
 8002208:	0800225d 	.word	0x0800225d
 800220c:	0800225d 	.word	0x0800225d
 8002210:	08002241 	.word	0x08002241
 8002214:	0800225d 	.word	0x0800225d
 8002218:	0800225d 	.word	0x0800225d
 800221c:	0800225d 	.word	0x0800225d
 8002220:	0800224f 	.word	0x0800224f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f978 	bl	8002520 <TIM_OC1_SetConfig>
      break;
 8002230:	e017      	b.n	8002262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f9d7 	bl	80025ec <TIM_OC2_SetConfig>
      break;
 800223e:	e010      	b.n	8002262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fa3a 	bl	80026c0 <TIM_OC3_SetConfig>
      break;
 800224c:	e009      	b.n	8002262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fa9d 	bl	8002794 <TIM_OC4_SetConfig>
      break;
 800225a:	e002      	b.n	8002262 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	75fb      	strb	r3, [r7, #23]
      break;
 8002260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800226a:	7dfb      	ldrb	r3, [r7, #23]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIM_ConfigClockSource+0x1c>
 800228c:	2302      	movs	r3, #2
 800228e:	e0b4      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c8:	d03e      	beq.n	8002348 <HAL_TIM_ConfigClockSource+0xd4>
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	f200 8087 	bhi.w	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	f000 8086 	beq.w	80023e6 <HAL_TIM_ConfigClockSource+0x172>
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022de:	d87f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d01a      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xa6>
 80022e4:	2b70      	cmp	r3, #112	; 0x70
 80022e6:	d87b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d050      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x11a>
 80022ec:	2b60      	cmp	r3, #96	; 0x60
 80022ee:	d877      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d03c      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xfa>
 80022f4:	2b50      	cmp	r3, #80	; 0x50
 80022f6:	d873      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d058      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x13a>
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d86f      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d064      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002304:	2b30      	cmp	r3, #48	; 0x30
 8002306:	d86b      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002308:	2b20      	cmp	r3, #32
 800230a:	d060      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d867      	bhi.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05c      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002314:	2b10      	cmp	r3, #16
 8002316:	d05a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	e062      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f000 faf8 	bl	800291e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800233c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	609a      	str	r2, [r3, #8]
      break;
 8002346:	e04f      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f000 fae1 	bl	800291e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236a:	609a      	str	r2, [r3, #8]
      break;
 800236c:	e03c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	461a      	mov	r2, r3
 800237c:	f000 fa58 	bl	8002830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2150      	movs	r1, #80	; 0x50
 8002386:	4618      	mov	r0, r3
 8002388:	f000 faaf 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 800238c:	e02c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	461a      	mov	r2, r3
 800239c:	f000 fa76 	bl	800288c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2160      	movs	r1, #96	; 0x60
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa9f 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80023ac:	e01c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f000 fa38 	bl	8002830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fa8f 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80023cc:	e00c      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f000 fa86 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80023de:	e003      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e000      	b.n	80023e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a29      	ldr	r2, [pc, #164]	; (8002514 <TIM_Base_SetConfig+0xb8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0x30>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x30>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a26      	ldr	r2, [pc, #152]	; (8002518 <TIM_Base_SetConfig+0xbc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x30>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a25      	ldr	r2, [pc, #148]	; (800251c <TIM_Base_SetConfig+0xc0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <TIM_Base_SetConfig+0xb8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00b      	beq.n	80024be <TIM_Base_SetConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d007      	beq.n	80024be <TIM_Base_SetConfig+0x62>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <TIM_Base_SetConfig+0xbc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d003      	beq.n	80024be <TIM_Base_SetConfig+0x62>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a18      	ldr	r2, [pc, #96]	; (800251c <TIM_Base_SetConfig+0xc0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d108      	bne.n	80024d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <TIM_Base_SetConfig+0xb8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d103      	bne.n	8002504 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	615a      	str	r2, [r3, #20]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800

08002520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 0201 	bic.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <TIM_OC1_SetConfig+0xc8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10c      	bne.n	8002596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0308 	bic.w	r3, r3, #8
 8002582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <TIM_OC1_SetConfig+0xc8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	621a      	str	r2, [r3, #32]
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40012c00 	.word	0x40012c00

080025ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 0210 	bic.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0320 	bic.w	r3, r3, #32
 8002636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <TIM_OC2_SetConfig+0xd0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10d      	bne.n	8002668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <TIM_OC2_SetConfig+0xd0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d113      	bne.n	8002698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <TIM_OC3_SetConfig+0xd0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10d      	bne.n	800273a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <TIM_OC3_SetConfig+0xd0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d113      	bne.n	800276a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	621a      	str	r2, [r3, #32]
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00

08002794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <TIM_OC4_SetConfig+0x98>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00

08002830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f023 030a 	bic.w	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0210 	bic.w	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	031b      	lsls	r3, r3, #12
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	621a      	str	r2, [r3, #32]
}
 80028e0:	bf00      	nop
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	f043 0307 	orr.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002938:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	021a      	lsls	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	431a      	orrs	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4313      	orrs	r3, r2
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e046      	b.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d009      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800

08002a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e042      	b.n	8002ad4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fe66 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f82b 	bl	8002adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b16:	f023 030c 	bic.w	r3, r3, #12
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <UART_SetConfig+0x114>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d103      	bne.n	8002b4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b44:	f7ff f8a2 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	e002      	b.n	8002b52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff f88a 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009a      	lsls	r2, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	0119      	lsls	r1, r3, #4
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2064      	movs	r0, #100	; 0x64
 8002b92:	fb00 f303 	mul.w	r3, r0, r3
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	3332      	adds	r3, #50	; 0x32
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	4419      	add	r1, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <UART_SetConfig+0x118>)
 8002bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2064      	movs	r0, #100	; 0x64
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	3332      	adds	r3, #50	; 0x32
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <UART_SetConfig+0x118>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	440a      	add	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	51eb851f 	.word	0x51eb851f

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 f822 	bl	8002c50 <_init>
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002c94 	.word	0x08002c94
 8002c34:	08002c94 	.word	0x08002c94
 8002c38:	08002c94 	.word	0x08002c94
 8002c3c:	08002c98 	.word	0x08002c98

08002c40 <memset>:
 8002c40:	4603      	mov	r3, r0
 8002c42:	4402      	add	r2, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
