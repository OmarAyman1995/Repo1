import os
import subprocess
import csv
import os
import sys


#Global Variables 
header = "File,Line,Severity,Scope,ID,Message,Code"
cpp_check_report= "cppcheck_misra.csv"
cpp_check_path=0
CppCheckQualityLimit=0


# CppCheck Function
def run_cppcheck(folders, output_file):
  """
  Runs cppcheck on the provided folders (relative to the script's location) and saves the report to the specified file.

  Args:
      folders: List of folder names relative to the script (strings).
      output_file: Path to save the cppcheck report (string).

  """

  script_dir = os.path.dirname(os.path.abspath(__file__))  # Get script directory
  cppcheck_cmd = [f"{cpp_check_path}"]
  cppcheck_cmd.extend([
     ""
      "--addon=misra.py",
      "--template={file},{line},{severity},{scope},{id},{message},{code}",
      f"--output-file={output_file}"
  ])

  #Iterate on all folders
  for folder in folders:
   # create a list of components names
   script_dir = os.path.dirname(os.path.abspath(__file__))  # Get script directory (optional for relative paths)
   subdirs = os.path.join(script_dir, folder) if not os.path.isabs(folder) else folder  # Handle relative paths
   subdirs = [d for d in os.listdir(subdirs) if os.path.isdir(os.path.join(subdirs, d))]
   
   #iterate on all components in folders
   for subdir in subdirs:
     relative_folders = [os.path.join(script_dir, folder,subdir,"src")]
     cppcheck_cmd.extend(relative_folders)
     
  try:
    subprocess.run(cppcheck_cmd, check=True)
  except subprocess.CalledProcessError as e:
    print(f"Cppcheck failed with exit code: {e.returncode}")
    

def AdjustReport(outputReport):
 
  #Add Header to the Report
 with open(cpp_check_report, "r+") as report:
        existing_content = report.read()
        report.seek(0)  # Move to the beginning of the file
        report.write(header + "\n") # write header
        report.write(existing_content)  # Write existing content back

  ###Clear lines that include "^" Character Generated by cppCheck ###
    
 temp_filename = outputReport + ".temp"  # Create a temporary file to store the filtered data

 with open(outputReport, 'r') as input_file, open(temp_filename, 'w', newline='') as output_file:
        
        # Create CSV reader and writer objects
        reader = csv.reader(input_file)
        writer = csv.writer(output_file)

        # Iterate over each row in the CSV file
        for row in reader:
            # Check if the row contains the caret symbol (^)
            if '^' not in ''.join(row):
                # Write the row to the temporary file
                writer.writerow(row)
    # replace Filtered file with the existing report
 os.replace(temp_filename, outputReport)


def QualityGate1(outputReport,CppCheckQualityLimit):
    num_lines = 0
    with open(outputReport, 'r') as report:
      reader = csv.reader(report)

      for line in reader:
        num_lines += 1

      if num_lines > CppCheckQualityLimit:
          file_name=line[0]
          print(f"Quality Gate Failed: Files have {num_lines} Misra warnings (Quality Limit is {CppCheckQualityLimit})")
          exit(1)
      else:
           print("Quality Gate Passed: ")
           

   



if __name__=="__main__": 
 
 #check for Arguments
 if len(sys.argv) < 3:
  print("Error: Missing argument. Please provide an argument when running the script.")
  exit(1)
  
 else:
  cpp_check_path=sys.argv[1]
  CppCheckQualityLimit=int(sys.argv[2])

 
 folders_to_lint = ["../Core/App",
                    "../Core/HAL",
                    "../Core/MCAL",
                    "../Core/Middleware",
                    "../Core/StandardFiles"]  # Folder names relative to script
# run cppcheck
 print("Running Linting Tool For all Files ")
 run_cppcheck(folders_to_lint, cpp_check_report)
 AdjustReport(cpp_check_report)
 QualityGate1(cpp_check_report,CppCheckQualityLimit)

#Remove all lines that have message "Include file: "Battery.h" not found".
