
ACCU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003930  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000018  08003948  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003948  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106de  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002686  00000000  00000000  0003071f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000774a  00000000  00000000  00032da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  0003b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001996e  00000000  00000000  0003bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011691  00000000  00000000  00055916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091a44  00000000  00000000  00066fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f89eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000398c  00000000  00000000  000f8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080038bc 	.word	0x080038bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080038bc 	.word	0x080038bc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2iz>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a00:	d215      	bcs.n	8000a2e <__aeabi_d2iz+0x36>
 8000a02:	d511      	bpl.n	8000a28 <__aeabi_d2iz+0x30>
 8000a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a0c:	d912      	bls.n	8000a34 <__aeabi_d2iz+0x3c>
 8000a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	4770      	bx	lr
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a32:	d105      	bne.n	8000a40 <__aeabi_d2iz+0x48>
 8000a34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	bf08      	it	eq
 8000a3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <vid_systickTimerInit>:
#include "Timer.h"


void vid_systickTimerInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/10);//100ms
 8000a4c:	f002 f9ba 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <vid_systickTimerInit+0x30>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fbfd 	bl	800225a <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a60:	2004      	movs	r0, #4
 8000a62:	f001 fc07 	bl	8002274 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6e:	f001 fbca 	bl	8002206 <HAL_NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	cccccccd 	.word	0xcccccccd

08000a7c <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_GPIO_TogglePin(Green_LED_GPIO_Port,Green_LED_Pin);
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <SysTick_Handler+0x14>)
 8000a86:	f001 fdc4 	bl	8002612 <HAL_GPIO_TogglePin>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40011000 	.word	0x40011000

08000a94 <enumSystemInit>:

PUBLIC UART_HandleTypeDef huart1;


InitApiRet_e enumSystemInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
    InitApiRet_e retVal  = Init_API_RETURN_OK;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
    
    SystemClock_Config();
 8000a9e:	f000 fdad 	bl	80015fc <SystemClock_Config>
    MX_GPIO_Init();
 8000aa2:	f000 f80d 	bl	8000ac0 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000aa6:	f000 f891 	bl	8000bcc <MX_ADC1_Init>
    vid_systickTimerInit();
 8000aaa:	f7ff ffcd 	bl	8000a48 <vid_systickTimerInit>
    MX_USART1_UART_Init();
 8000aae:	f000 f8cb 	bl	8000c48 <MX_USART1_UART_Init>
   
    /*    CAN      Init  */
   return retVal;
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a32      	ldr	r2, [pc, #200]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Yellow_Pin|Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <MX_GPIO_Init+0x100>)
 8000b24:	f001 fd5d 	bl	80025e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_2_LED_Pin|Red_1_LED_Pin|Relay_2_Pin|Row_1_Pin
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f640 11fe 	movw	r1, #2558	; 0x9fe
 8000b2e:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0x104>)
 8000b30:	f001 fd57 	bl	80025e2 <HAL_GPIO_WritePin>
                          |Row_2_Pin|Row_3_Pin|Row_4_Pin|LCD_EN_Pin
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000b34:	2200      	movs	r2, #0
 8000b36:	f24f 0130 	movw	r1, #61488	; 0xf030
 8000b3a:	4823      	ldr	r0, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0x108>)
 8000b3c:	f001 fd51 	bl	80025e2 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|Relay_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Yellow_Pin Blue_LED_Pin Green_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_Pin|Blue_LED_Pin|Green_LED_Pin;
 8000b40:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <MX_GPIO_Init+0x100>)
 8000b5a:	f001 fba7 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_2_LED_Pin Red_1_LED_Pin Relay_2_Pin Row_1_Pin
                           Row_2_Pin Row_3_Pin Row_4_Pin LCD_EN_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = Red_2_LED_Pin|Red_1_LED_Pin|Relay_2_Pin|Row_1_Pin
 8000b5e:	f640 13fe 	movw	r3, #2558	; 0x9fe
 8000b62:	613b      	str	r3, [r7, #16]
                          |Row_2_Pin|Row_3_Pin|Row_4_Pin|LCD_EN_Pin
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_GPIO_Init+0x104>)
 8000b78:	f001 fb98 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Col_4_Pin Col_3_Pin Col_2_Pin Col_1_Pin */
  GPIO_InitStruct.Pin = Col_4_Pin|Col_3_Pin|Col_2_Pin|Col_1_Pin;
 8000b7c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0x108>)
 8000b92:	f001 fb8b 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           Buzzer_Pin Relay_1_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000b96:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000b9a:	613b      	str	r3, [r7, #16]
                          |Buzzer_Pin|Relay_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_GPIO_Init+0x108>)
 8000bb0:	f001 fb7c 	bl	80022ac <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
PRIVATE void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN ADC1_Init 0 */

 /* USER CODE END ADC1_Init 0 */

 ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]

 /* USER CODE END ADC1_Init 1 */

 /** Common config
 */
 hadc1.Instance = ADC1;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <MX_ADC1_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
 hadc1.Init.ContinuousConvMode = DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	731a      	strb	r2, [r3, #12]
 hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	751a      	strb	r2, [r3, #20]
 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bf6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfa:	61da      	str	r2, [r3, #28]
 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
 hadc1.Init.NbrOfConversion = 1;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c0a:	f001 f813 	bl	8001c34 <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x4c>
 {
   Error_Handler();
 8000c14:	f000 fd42 	bl	800169c <Error_Handler>
 }

 /** Configure Regular Channel
 */
 sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c2a:	f001 f8db 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x6c>
 {
   Error_Handler();
 8000c34:	f000 fd32 	bl	800169c <Error_Handler>
 }
 /* USER CODE BEGIN ADC1_Init 2 */

 /* USER CODE END ADC1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000034 	.word	0x20000034
 8000c44:	40012400 	.word	0x40012400

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART1_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f002 fc20 	bl	80034c4 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 fd07 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000070 	.word	0x20000070
 8000c98:	40013800 	.word	0x40013800

08000c9c <vid_keypadreset>:
this function should be called before keypad scan API in any application when using this module

 param: void
 return:  void*/ 
PRIVATE void vid_keypadreset(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,KEYPAD_BUTTON_RELEASED);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <vid_keypadreset+0x28>)
 8000ca6:	f001 fc9c 	bl	80025e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_SECOND_ROW_PIN_ID,KEYPAD_BUTTON_RELEASED);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <vid_keypadreset+0x28>)
 8000cb0:	f001 fc97 	bl	80025e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_THIRD_ROW_PIN_ID,KEYPAD_BUTTON_RELEASED);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <vid_keypadreset+0x28>)
 8000cba:	f001 fc92 	bl	80025e2 <HAL_GPIO_WritePin>


}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <u8_keyPadScan>:

PRIVATE u8_t u8_keyPadScan(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
    u8_t LOC_u8buttonNum=0; /* pressed button number*/
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71bb      	strb	r3, [r7, #6]

    /*iterate on rows*/
    for(u8_t LOC_u8row=0;LOC_u8row<KEYPAD_ROWS_NUM;LOC_u8row++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	e077      	b.n	8000dc8 <u8_keyPadScan+0x100>
    {
  /*initalize all row pins to be released*/
    vid_keypadreset();
 8000cd8:	f7ff ffe0 	bl	8000c9c <vid_keypadreset>

   switch (LOC_u8row)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d822      	bhi.n	8000d28 <u8_keyPadScan+0x60>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <u8_keyPadScan+0x20>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000cf9 	.word	0x08000cf9
 8000cec:	08000d05 	.word	0x08000d05
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000d1d 	.word	0x08000d1d
   {
    case 0:
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <u8_keyPadScan+0x110>)
 8000cfe:	f001 fc70 	bl	80025e2 <HAL_GPIO_WritePin>
    break;
 8000d02:	e012      	b.n	8000d2a <u8_keyPadScan+0x62>
    case 1:
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_SECOND_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	4833      	ldr	r0, [pc, #204]	; (8000dd8 <u8_keyPadScan+0x110>)
 8000d0a:	f001 fc6a 	bl	80025e2 <HAL_GPIO_WritePin>
    break;
 8000d0e:	e00c      	b.n	8000d2a <u8_keyPadScan+0x62>
    case 2:
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_THIRD_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <u8_keyPadScan+0x110>)
 8000d16:	f001 fc64 	bl	80025e2 <HAL_GPIO_WritePin>
    break;
 8000d1a:	e006      	b.n	8000d2a <u8_keyPadScan+0x62>
    case 3:
    HAL_GPIO_WritePin(KEYPAD_ROW_PORT_ID,KEYPAD_FOURTH_ROW_PIN_ID,KEYPAD_BUTTON_PRESSED);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <u8_keyPadScan+0x110>)
 8000d22:	f001 fc5e 	bl	80025e2 <HAL_GPIO_WritePin>
    break;
 8000d26:	e000      	b.n	8000d2a <u8_keyPadScan+0x62>

    default: break;
 8000d28:	bf00      	nop
   }

 /* check all columns */

 if( HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_1_ID)==KEYPAD_BUTTON_PRESSED)
 8000d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2e:	482b      	ldr	r0, [pc, #172]	; (8000ddc <u8_keyPadScan+0x114>)
 8000d30:	f001 fc40 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d111      	bne.n	8000d5e <u8_keyPadScan+0x96>
 {
HAL_Delay(DEBOUNCING_DELAY);
 8000d3a:	2005      	movs	r0, #5
 8000d3c:	f000 ff56 	bl	8001bec <HAL_Delay>
  if(HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_1_ID)==KEYPAD_BUTTON_PRESSED)
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <u8_keyPadScan+0x114>)
 8000d46:	f001 fc35 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d138      	bne.n	8000dc2 <u8_keyPadScan+0xfa>
  /* assign corresponding number*/
  /*  row 1----->col 1----> (1)
      row 2----->col 1----> (4)
      row 3----->col 1----> (8)
      */
  LOC_u8buttonNum= (LOC_u8row * KEYPAD_COL_NUM )+1;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	71bb      	strb	r3, [r7, #6]
  return LOC_u8buttonNum; /*return keypad number*/
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	e038      	b.n	8000dd0 <u8_keyPadScan+0x108>

  }
 }

 else if (HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_2_ID)==KEYPAD_BUTTON_PRESSED)
 8000d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <u8_keyPadScan+0x114>)
 8000d64:	f001 fc26 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d111      	bne.n	8000d92 <u8_keyPadScan+0xca>
 {
  HAL_Delay(DEBOUNCING_DELAY);
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f000 ff3c 	bl	8001bec <HAL_Delay>
  if(HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_2_ID)==KEYPAD_BUTTON_PRESSED)
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <u8_keyPadScan+0x114>)
 8000d7a:	f001 fc1b 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11e      	bne.n	8000dc2 <u8_keyPadScan+0xfa>
   /* assign corresponding number*/
  /*  row 1----->col 2----> (2)
      row 2----->col 2----> (5)
      row 3----->col 2----> (9)
     */
  LOC_u8buttonNum= (LOC_u8row * KEYPAD_COL_NUM)+2;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	71bb      	strb	r3, [r7, #6]
   return LOC_u8buttonNum; /*return keypad number*/
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	e01e      	b.n	8000dd0 <u8_keyPadScan+0x108>
  }
 }

 else if (HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_3_ID)==KEYPAD_BUTTON_PRESSED)
 8000d92:	2102      	movs	r1, #2
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <u8_keyPadScan+0x114>)
 8000d96:	f001 fc0d 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d110      	bne.n	8000dc2 <u8_keyPadScan+0xfa>
 {
  HAL_Delay(DEBOUNCING_DELAY);
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 ff23 	bl	8001bec <HAL_Delay>
  if(HAL_GPIO_ReadPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_3_ID)==KEYPAD_BUTTON_PRESSED)
 8000da6:	2102      	movs	r1, #2
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <u8_keyPadScan+0x114>)
 8000daa:	f001 fc03 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d106      	bne.n	8000dc2 <u8_keyPadScan+0xfa>
   /* assign corresponding number*/
  /*  row 1----->col 3----> (3)
      row 2----->col 3----> (7)
      row 3----->col 3----> (11)
      */
  LOC_u8buttonNum= (LOC_u8row * KEYPAD_COL_NUM )+3;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3303      	adds	r3, #3
 8000dbc:	71bb      	strb	r3, [r7, #6]
  return LOC_u8buttonNum; /*return keypad number*/
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	e006      	b.n	8000dd0 <u8_keyPadScan+0x108>
    for(u8_t LOC_u8row=0;LOC_u8row<KEYPAD_ROWS_NUM;LOC_u8row++)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d984      	bls.n	8000cd8 <u8_keyPadScan+0x10>
  }
 }

  }
 return LOC_u8buttonNum; /*return keypad number*/
 8000dce:	79bb      	ldrb	r3, [r7, #6]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <enum_getUserRequest>:


keypad_buttons_e enum_getUserRequest(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  u8_t LOC_u8buttonNum;
  keypad_buttons_e LOC_enumUserRequest=0; /*user request to be returned*/
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
  
  LOC_u8buttonNum=u8_keyPadScan();
 8000dea:	f7ff ff6d 	bl	8000cc8 <u8_keyPadScan>
 8000dee:	4603      	mov	r3, r0
 8000df0:	71bb      	strb	r3, [r7, #6]

  switch (LOC_u8buttonNum)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	d833      	bhi.n	8000e62 <enum_getUserRequest+0x82>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <enum_getUserRequest+0x20>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e2d 	.word	0x08000e2d
 8000e04:	08000e3f 	.word	0x08000e3f
 8000e08:	08000e51 	.word	0x08000e51
 8000e0c:	08000e63 	.word	0x08000e63
 8000e10:	08000e33 	.word	0x08000e33
 8000e14:	08000e45 	.word	0x08000e45
 8000e18:	08000e57 	.word	0x08000e57
 8000e1c:	08000e63 	.word	0x08000e63
 8000e20:	08000e39 	.word	0x08000e39
 8000e24:	08000e4b 	.word	0x08000e4b
 8000e28:	08000e5d 	.word	0x08000e5d
    {
      /* row 1----->col 1---->1*/
      case COL_1_ROW_1:
      LOC_enumUserRequest=AIR_UP;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	71fb      	strb	r3, [r7, #7]
      break;
 8000e30:	e019      	b.n	8000e66 <enum_getUserRequest+0x86>
      /*row 2----->col 1----> (5)*/
      case COL_1_ROW_2:
      LOC_enumUserRequest=AIR_DOWN;
 8000e32:	2304      	movs	r3, #4
 8000e34:	71fb      	strb	r3, [r7, #7]
      break;
 8000e36:	e016      	b.n	8000e66 <enum_getUserRequest+0x86>
      /*row 3----->col 1----> (9)*/
      case COL_1_ROW_3:
      LOC_enumUserRequest=AIR_FRONT;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	71fb      	strb	r3, [r7, #7]
      break;
 8000e3c:	e013      	b.n	8000e66 <enum_getUserRequest+0x86>
      /*row 2----->col 2----> (2)*/
      case COL_2_ROW_1:
      LOC_enumUserRequest= FAN_SPEED_INCREASE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
      break;
 8000e42:	e010      	b.n	8000e66 <enum_getUserRequest+0x86>
      /*row 2----->col 2----> (6)*/
      case COL_2_ROW_2:
      LOC_enumUserRequest= FAN_SPEED_DECREASE;
 8000e44:	2302      	movs	r3, #2
 8000e46:	71fb      	strb	r3, [r7, #7]
      break;
 8000e48:	e00d      	b.n	8000e66 <enum_getUserRequest+0x86>
     /*row 2----->col 3----> (10)*/
     case COL_2_ROW_3:
     LOC_enumUserRequest= TEMPERATURE_INCREASE;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	71fb      	strb	r3, [r7, #7]
     break;
 8000e4e:	e00a      	b.n	8000e66 <enum_getUserRequest+0x86>
     /*row 3----->col 1----> (3)*/
     case COL_3_ROW_1:
     LOC_enumUserRequest= TEMPERATURE_DECREASE;
 8000e50:	2307      	movs	r3, #7
 8000e52:	71fb      	strb	r3, [r7, #7]
     break;
 8000e54:	e007      	b.n	8000e66 <enum_getUserRequest+0x86>
     /*row 3----->col 2----> (7)*/
     case COL_3_ROW_2:
     LOC_enumUserRequest= RECIRCULATION_MODE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
     break;
 8000e5a:	e004      	b.n	8000e66 <enum_getUserRequest+0x86>
     /*row 3----->col 3----> (11)*/
     case COL_3_ROW_3:
     LOC_enumUserRequest= AUTO_CONTROL_MODE;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	71fb      	strb	r3, [r7, #7]
     break;
 8000e60:	e001      	b.n	8000e66 <enum_getUserRequest+0x86>

    default:
    LOC_enumUserRequest=NO_PRESS;
 8000e62:	2309      	movs	r3, #9
 8000e64:	71fb      	strb	r3, [r7, #7]
    }

 return LOC_enumUserRequest;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <vid_lcdEnableRwData>:
 */


#include "lcd.h"
PRIVATE void vid_lcdEnableRwData(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	LCD_PIN_HIGH(EN_PIN);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <vid_lcdEnableRwData+0x44>)
 8000e7e:	f001 fbb0 	bl	80025e2 <HAL_GPIO_WritePin>
	LCD_PIN_LOW(EN_PIN);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <vid_lcdEnableRwData+0x44>)
 8000e8a:	f001 fbaa 	bl	80025e2 <HAL_GPIO_WritePin>
	s16_t LOC_s16Counter=0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	80fb      	strh	r3, [r7, #6]
	for(;LOC_s16Counter<=1000;LOC_s16Counter++);
 8000e92:	e005      	b.n	8000ea0 <vid_lcdEnableRwData+0x30>
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ea8:	ddf4      	ble.n	8000e94 <vid_lcdEnableRwData+0x24>
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <vid_lcdStart4Bit>:

PRIVATE void vid_lcdStart4Bit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	LCD_PORT_HIGH(Start4Bit);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <vid_lcdStart4Bit+0x64>)
 8000ec4:	f001 fb8d 	bl	80025e2 <HAL_GPIO_WritePin>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <vid_lcdStart4Bit+0x64>)
 8000ece:	f001 fb88 	bl	80025e2 <HAL_GPIO_WritePin>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <vid_lcdStart4Bit+0x68>)
 8000eda:	f001 fb82 	bl	80025e2 <HAL_GPIO_WritePin>
 8000ede:	f7ff ffc7 	bl	8000e70 <vid_lcdEnableRwData>
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <vid_lcdStart4Bit+0x64>)
 8000eea:	f001 fb7a 	bl	80025e2 <HAL_GPIO_WritePin>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <vid_lcdStart4Bit+0x64>)
 8000ef6:	f001 fb74 	bl	80025e2 <HAL_GPIO_WritePin>
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <vid_lcdStart4Bit+0x68>)
 8000f02:	f001 fb6e 	bl	80025e2 <HAL_GPIO_WritePin>
	LCD_PIN_LOW(RS_PIN);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <vid_lcdStart4Bit+0x68>)
 8000f0e:	f001 fb68 	bl	80025e2 <HAL_GPIO_WritePin>
	vid_lcdEnableRwData();
 8000f12:	f7ff ffad 	bl	8000e70 <vid_lcdEnableRwData>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40010800 	.word	0x40010800

08000f24 <enum_lcdInit>:

lcdApiRet_e enum_lcdInit(const lcdConfig_t* ptr_strLcdConfigX)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	lcdApiRet_e LOC_enumLcdApiRet = LCD_API_RETURN_OK;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
	s8_t LOC_s8Dots=0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73bb      	strb	r3, [r7, #14]
	s8_t LOC_s8Line=0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	737b      	strb	r3, [r7, #13]
	s8_t LOC_s8Mode=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	733b      	strb	r3, [r7, #12]
	if(ptr_strLcdConfigX!=NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 80db 	beq.w	80010fa <enum_lcdInit+0x1d6>
	{
		if(ptr_strLcdConfigX->s8Dots==LCD_40DOTS)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d102      	bne.n	8000f54 <enum_lcdInit+0x30>
		{
			LOC_s8Dots= LCD_5X8_DOTS_COMMAND;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	e009      	b.n	8000f68 <enum_lcdInit+0x44>
		}
		else if(ptr_strLcdConfigX->s8Dots==LCD_50DOTS)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5a:	2b0a      	cmp	r3, #10
 8000f5c:	d102      	bne.n	8000f64 <enum_lcdInit+0x40>
		{
			LOC_s8Dots= LCD_5X10_DOTS_COMMAND;
 8000f5e:	2324      	movs	r3, #36	; 0x24
 8000f60:	73bb      	strb	r3, [r7, #14]
 8000f62:	e001      	b.n	8000f68 <enum_lcdInit+0x44>
		}
		else 
		{
			LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 8000f64:	23ff      	movs	r3, #255	; 0xff
 8000f66:	73fb      	strb	r3, [r7, #15]
		}
			
		if(ptr_strLcdConfigX->s8Lines == LCD_1LINE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <enum_lcdInit+0x54>
		{
			LOC_s8Line=LCD_1_LINE_COMMAND;
 8000f72:	2320      	movs	r3, #32
 8000f74:	737b      	strb	r3, [r7, #13]
 8000f76:	e009      	b.n	8000f8c <enum_lcdInit+0x68>
		}
			
		else if(ptr_strLcdConfigX->s8Lines == LCD_2LINE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d102      	bne.n	8000f88 <enum_lcdInit+0x64>
		{
			LOC_s8Line=LCD_2_LINES_COMMAND;
 8000f82:	2328      	movs	r3, #40	; 0x28
 8000f84:	737b      	strb	r3, [r7, #13]
 8000f86:	e001      	b.n	8000f8c <enum_lcdInit+0x68>
		}
		else 
		{
			LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	73fb      	strb	r3, [r7, #15]
		}
			
		if(ptr_strLcdConfigX->s8Mode == LCD_4BIT)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d104      	bne.n	8000fa0 <enum_lcdInit+0x7c>
		{
			LOC_s8Mode=LCD_4BIT_MODE;
 8000f96:	2320      	movs	r3, #32
 8000f98:	733b      	strb	r3, [r7, #12]
			vid_lcdStart4Bit();
 8000f9a:	f7ff ff8d 	bl	8000eb8 <vid_lcdStart4Bit>
 8000f9e:	e009      	b.n	8000fb4 <enum_lcdInit+0x90>
		}
			
		else if(ptr_strLcdConfigX->s8Mode == LCD_8BIT)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d102      	bne.n	8000fb0 <enum_lcdInit+0x8c>
		{
			LOC_s8Mode=LCD_8BIT_MODE;
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	733b      	strb	r3, [r7, #12]
 8000fae:	e001      	b.n	8000fb4 <enum_lcdInit+0x90>
		}
			
		else 
		{
			LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 8000fb0:	23ff      	movs	r3, #255	; 0xff
 8000fb2:	73fb      	strb	r3, [r7, #15]
		}

		if(LOC_enumLcdApiRet == LCD_API_RETURN_OK)
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 80a0 	bne.w	80010fe <enum_lcdInit+0x1da>
		{
			LCD_PORT_HIGH((LOC_s8Dots)|(LOC_s8Line)|(LOC_s8Mode));
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fc4:	4851      	ldr	r0, [pc, #324]	; (800110c <enum_lcdInit+0x1e8>)
 8000fc6:	f001 fb0c 	bl	80025e2 <HAL_GPIO_WritePin>
 8000fca:	7bba      	ldrb	r2, [r7, #14]
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	10db      	asrs	r3, r3, #3
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	7bb9      	ldrb	r1, [r7, #14]
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	430b      	orrs	r3, r1
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	105b      	asrs	r3, r3, #1
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	7bb9      	ldrb	r1, [r7, #14]
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	430b      	orrs	r3, r1
 800100c:	b25b      	sxtb	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	430b      	orrs	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b21b      	sxth	r3, r3
 800101c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	7bb9      	ldrb	r1, [r7, #14]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	430b      	orrs	r3, r1
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	430b      	orrs	r3, r1
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b21b      	sxth	r3, r3
 800103c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	482e      	ldr	r0, [pc, #184]	; (800110c <enum_lcdInit+0x1e8>)
 8001052:	f001 fac6 	bl	80025e2 <HAL_GPIO_WritePin>
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <enum_lcdInit+0x1ec>)
 800105e:	f001 fac0 	bl	80025e2 <HAL_GPIO_WritePin>
 8001062:	f7ff ff05 	bl	8000e70 <vid_lcdEnableRwData>
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800106c:	4827      	ldr	r0, [pc, #156]	; (800110c <enum_lcdInit+0x1e8>)
 800106e:	f001 fab8 	bl	80025e2 <HAL_GPIO_WritePin>
 8001072:	7bba      	ldrb	r2, [r7, #14]
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	4313      	orrs	r3, r2
 8001078:	b25a      	sxtb	r2, r3
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	031b      	lsls	r3, r3, #12
 8001082:	10db      	asrs	r3, r3, #3
 8001084:	b21b      	sxth	r3, r3
 8001086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108a:	b21a      	sxth	r2, r3
 800108c:	7bb9      	ldrb	r1, [r7, #14]
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	430b      	orrs	r3, r1
 8001092:	b259      	sxtb	r1, r3
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	430b      	orrs	r3, r1
 8001098:	b25b      	sxtb	r3, r3
 800109a:	031b      	lsls	r3, r3, #12
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	b21b      	sxth	r3, r3
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	7bb9      	ldrb	r1, [r7, #14]
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	430b      	orrs	r3, r1
 80010b0:	b259      	sxtb	r1, r3
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	035b      	lsls	r3, r3, #13
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7bb9      	ldrb	r1, [r7, #14]
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	430b      	orrs	r3, r1
 80010cc:	b259      	sxtb	r1, r3
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	03db      	lsls	r3, r3, #15
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2201      	movs	r2, #1
 80010e0:	4619      	mov	r1, r3
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <enum_lcdInit+0x1e8>)
 80010e4:	f001 fa7d 	bl	80025e2 <HAL_GPIO_WritePin>
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ee:	4808      	ldr	r0, [pc, #32]	; (8001110 <enum_lcdInit+0x1ec>)
 80010f0:	f001 fa77 	bl	80025e2 <HAL_GPIO_WritePin>
			vid_lcdEnableRwData();
 80010f4:	f7ff febc 	bl	8000e70 <vid_lcdEnableRwData>
 80010f8:	e001      	b.n	80010fe <enum_lcdInit+0x1da>
			/*do nothing!*/
		}
	}
	else 
	{
		LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_enumLcdApiRet;
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010c00 	.word	0x40010c00
 8001110:	40010800 	.word	0x40010800

08001114 <enum_lcdSendCommand>:

lcdApiRet_e enum_lcdSendCommand(lcdCommand_e enumlcdCommand)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	lcdApiRet_e LOC_enumLcdApiRet = LCD_API_RETURN_OK;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
	if(
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d029      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_CLR_COMMAND) ||
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d026      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_RET_HOME_COMMAND) ||
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d023      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_DATA_OFF_COMMAND) ||
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d020      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_CURS_OFF_COMMAND) ||
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d01d      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_BLINK_OFF_COMMAND) ||
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b09      	cmp	r3, #9
 8001144:	d01a      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_BLINK_ON_COMMAND) ||
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d017      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_CURS_ON_DATA_OFF_COMMAND) ||
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d014      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_DATA_ON_COMMAND) ||
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d011      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_DATA_CURSOR_BLINKING_ALL_ON_COMMAND) ||
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d00e      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_SHIFT_CURS_L_COMMAND) ||
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b1c      	cmp	r3, #28
 8001162:	d00b      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_SHIFT_DATA_R_COMMAND) ||
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b14      	cmp	r3, #20
 8001168:	d008      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_SHIFT_CURS_R_COMMAND) ||
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b80      	cmp	r3, #128	; 0x80
 800116e:	d005      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_CURSOR_POS_1ST_LINE_COMMAND) ||
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2bc0      	cmp	r3, #192	; 0xc0
 8001174:	d002      	beq.n	800117c <enum_lcdSendCommand+0x68>
		(enumlcdCommand == LCD_CURSOR_POS_2ND_LINE_COMMAND) ||
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b18      	cmp	r3, #24
 800117a:	d167      	bne.n	800124c <enum_lcdSendCommand+0x138>
		(enumlcdCommand == LCD_SHIFT_DATA_L_COMMAND)
	)
	{
		LCD_PORT_HIGH(enumlcdCommand);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001182:	4836      	ldr	r0, [pc, #216]	; (800125c <enum_lcdSendCommand+0x148>)
 8001184:	f001 fa2d 	bl	80025e2 <HAL_GPIO_WritePin>
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	b21b      	sxth	r3, r3
 8001190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001194:	b21a      	sxth	r2, r3
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	105b      	asrs	r3, r3, #1
 800119c:	b21b      	sxth	r3, r3
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	02db      	lsls	r3, r3, #11
 80011bc:	b21b      	sxth	r3, r3
 80011be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	4822      	ldr	r0, [pc, #136]	; (800125c <enum_lcdSendCommand+0x148>)
 80011d4:	f001 fa05 	bl	80025e2 <HAL_GPIO_WritePin>
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011de:	4820      	ldr	r0, [pc, #128]	; (8001260 <enum_lcdSendCommand+0x14c>)
 80011e0:	f001 f9ff 	bl	80025e2 <HAL_GPIO_WritePin>
 80011e4:	f7ff fe44 	bl	8000e70 <vid_lcdEnableRwData>
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011ee:	481b      	ldr	r0, [pc, #108]	; (800125c <enum_lcdSendCommand+0x148>)
 80011f0:	f001 f9f7 	bl	80025e2 <HAL_GPIO_WritePin>
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	031b      	lsls	r3, r3, #12
 80011f8:	10db      	asrs	r3, r3, #3
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001200:	b21a      	sxth	r2, r3
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	031b      	lsls	r3, r3, #12
 8001206:	105b      	asrs	r3, r3, #1
 8001208:	b21b      	sxth	r3, r3
 800120a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21a      	sxth	r2, r3
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	035b      	lsls	r3, r3, #13
 8001218:	b21b      	sxth	r3, r3
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21a      	sxth	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	03db      	lsls	r3, r3, #15
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <enum_lcdSendCommand+0x148>)
 8001236:	f001 f9d4 	bl	80025e2 <HAL_GPIO_WritePin>
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <enum_lcdSendCommand+0x14c>)
 8001242:	f001 f9ce 	bl	80025e2 <HAL_GPIO_WritePin>
		vid_lcdEnableRwData();
 8001246:	f7ff fe13 	bl	8000e70 <vid_lcdEnableRwData>
 800124a:	e001      	b.n	8001250 <enum_lcdSendCommand+0x13c>
	}
	else 
	{
		LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	73fb      	strb	r3, [r7, #15]
	}
	return LOC_enumLcdApiRet;
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40010800 	.word	0x40010800

08001264 <enum_lcdWriteString>:
	}
	return LOC_enumLcdApiRet;
}

lcdApiRet_e enum_lcdWriteString(const s8_t *ptr_s8StringToSend)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	lcdApiRet_e LOC_enumLcdApiRet = LCD_API_RETURN_OK;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
	if(ptr_s8StringToSend != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80a2 	beq.w	80013bc <enum_lcdWriteString+0x158>
	{
		s16_t LOC_s16Counter =0;
 8001278:	2300      	movs	r3, #0
 800127a:	81bb      	strh	r3, [r7, #12]
		for(;ptr_s8StringToSend[LOC_s16Counter]!='\0';LOC_s16Counter++)
 800127c:	e094      	b.n	80013a8 <enum_lcdWriteString+0x144>
		{
			LCD_PORT_HIGH2(ptr_s8StringToSend[LOC_s16Counter]);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001284:	4851      	ldr	r0, [pc, #324]	; (80013cc <enum_lcdWriteString+0x168>)
 8001286:	f001 f9ac 	bl	80025e2 <HAL_GPIO_WritePin>
 800128a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	f993 3000 	ldrsb.w	r3, [r3]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	10db      	asrs	r3, r3, #3
 800129a:	b21b      	sxth	r3, r3
 800129c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	440b      	add	r3, r1
 80012aa:	f993 3000 	ldrsb.w	r3, [r3]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	440b      	add	r3, r1
 80012c6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	440b      	add	r3, r1
 80012e0:	f993 3000 	ldrsb.w	r3, [r3]
 80012e4:	02db      	lsls	r3, r3, #11
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2201      	movs	r2, #1
 80012fa:	4619      	mov	r1, r3
 80012fc:	4833      	ldr	r0, [pc, #204]	; (80013cc <enum_lcdWriteString+0x168>)
 80012fe:	f001 f970 	bl	80025e2 <HAL_GPIO_WritePin>
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001308:	4831      	ldr	r0, [pc, #196]	; (80013d0 <enum_lcdWriteString+0x16c>)
 800130a:	f001 f96a 	bl	80025e2 <HAL_GPIO_WritePin>
 800130e:	f7ff fdaf 	bl	8000e70 <vid_lcdEnableRwData>
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001318:	482c      	ldr	r0, [pc, #176]	; (80013cc <enum_lcdWriteString+0x168>)
 800131a:	f001 f962 	bl	80025e2 <HAL_GPIO_WritePin>
 800131e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	f993 3000 	ldrsb.w	r3, [r3]
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	10db      	asrs	r3, r3, #3
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001334:	b21a      	sxth	r2, r3
 8001336:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	440b      	add	r3, r1
 800133e:	f993 3000 	ldrsb.w	r3, [r3]
 8001342:	031b      	lsls	r3, r3, #12
 8001344:	105b      	asrs	r3, r3, #1
 8001346:	b21b      	sxth	r3, r3
 8001348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	440b      	add	r3, r1
 800135a:	f993 3000 	ldrsb.w	r3, [r3]
 800135e:	035b      	lsls	r3, r3, #13
 8001360:	b21b      	sxth	r3, r3
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21a      	sxth	r2, r3
 800136c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	f993 3000 	ldrsb.w	r3, [r3]
 8001378:	03db      	lsls	r3, r3, #15
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <enum_lcdWriteString+0x168>)
 8001388:	f001 f92b 	bl	80025e2 <HAL_GPIO_WritePin>
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <enum_lcdWriteString+0x16c>)
 8001394:	f001 f925 	bl	80025e2 <HAL_GPIO_WritePin>
			vid_lcdEnableRwData();
 8001398:	f7ff fd6a 	bl	8000e70 <vid_lcdEnableRwData>
		for(;ptr_s8StringToSend[LOC_s16Counter]!='\0';LOC_s16Counter++)
 800139c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	81bb      	strh	r3, [r7, #12]
 80013a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	f993 3000 	ldrsb.w	r3, [r3]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f47f af62 	bne.w	800127e <enum_lcdWriteString+0x1a>
 80013ba:	e001      	b.n	80013c0 <enum_lcdWriteString+0x15c>
		}
	}
	else 
	{
		LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 80013bc:	23ff      	movs	r3, #255	; 0xff
 80013be:	73fb      	strb	r3, [r7, #15]
	}
	return LOC_enumLcdApiRet;
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	40010800 	.word	0x40010800

080013d4 <enum_lcdSetCursorPosition>:


lcdApiRet_e enum_lcdSetCursorPosition(u8_t u8Line,u8_t u8_cursorPosition)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
   lcdApiRet_e LOC_enumLcdApiRet = LCD_API_RETURN_OK;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
   if((u8Line == LCD_1LINE) && ((u8_cursorPosition>=1) && (u8_cursorPosition<=16)) )
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d116      	bne.n	800141c <enum_lcdSetCursorPosition+0x48>
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <enum_lcdSetCursorPosition+0x48>
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d810      	bhi.n	800141c <enum_lcdSetCursorPosition+0x48>
   {
        enum_lcdSendCommand(LCD_CURSOR_POS_1ST_LINE_COMMAND);
 80013fa:	2080      	movs	r0, #128	; 0x80
 80013fc:	f7ff fe8a 	bl	8001114 <enum_lcdSendCommand>
		for(u8_t LOC_u8Counter = 0;LOC_u8Counter<u8_cursorPosition;LOC_u8Counter++)
 8001400:	2300      	movs	r3, #0
 8001402:	73bb      	strb	r3, [r7, #14]
 8001404:	e005      	b.n	8001412 <enum_lcdSetCursorPosition+0x3e>
   		{
        	enum_lcdSendCommand(LCD_SHIFT_CURS_R_COMMAND);
 8001406:	2014      	movs	r0, #20
 8001408:	f7ff fe84 	bl	8001114 <enum_lcdSendCommand>
		for(u8_t LOC_u8Counter = 0;LOC_u8Counter<u8_cursorPosition;LOC_u8Counter++)
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	3301      	adds	r3, #1
 8001410:	73bb      	strb	r3, [r7, #14]
 8001412:	7bba      	ldrb	r2, [r7, #14]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3f5      	bcc.n	8001406 <enum_lcdSetCursorPosition+0x32>
 800141a:	e01b      	b.n	8001454 <enum_lcdSetCursorPosition+0x80>
   		}
   }
   else if((u8Line == LCD_2LINE) && ((u8_cursorPosition>=1) && (u8_cursorPosition<=16)) )
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d116      	bne.n	8001450 <enum_lcdSetCursorPosition+0x7c>
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d013      	beq.n	8001450 <enum_lcdSetCursorPosition+0x7c>
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b10      	cmp	r3, #16
 800142c:	d810      	bhi.n	8001450 <enum_lcdSetCursorPosition+0x7c>
   {
        enum_lcdSendCommand(LCD_CURSOR_POS_2ND_LINE_COMMAND);
 800142e:	20c0      	movs	r0, #192	; 0xc0
 8001430:	f7ff fe70 	bl	8001114 <enum_lcdSendCommand>
		for(u8_t LOC_u8Counter = 0;LOC_u8Counter<u8_cursorPosition;LOC_u8Counter++)
 8001434:	2300      	movs	r3, #0
 8001436:	737b      	strb	r3, [r7, #13]
 8001438:	e005      	b.n	8001446 <enum_lcdSetCursorPosition+0x72>
   		{
        	enum_lcdSendCommand(LCD_SHIFT_CURS_R_COMMAND);
 800143a:	2014      	movs	r0, #20
 800143c:	f7ff fe6a 	bl	8001114 <enum_lcdSendCommand>
		for(u8_t LOC_u8Counter = 0;LOC_u8Counter<u8_cursorPosition;LOC_u8Counter++)
 8001440:	7b7b      	ldrb	r3, [r7, #13]
 8001442:	3301      	adds	r3, #1
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	7b7a      	ldrb	r2, [r7, #13]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3f5      	bcc.n	800143a <enum_lcdSetCursorPosition+0x66>
 800144e:	e001      	b.n	8001454 <enum_lcdSetCursorPosition+0x80>
   		}
   }
   else 
   {
         LOC_enumLcdApiRet = LCD_API_RETURN_ERROR;
 8001450:	23ff      	movs	r3, #255	; 0xff
 8001452:	73fb      	strb	r3, [r7, #15]
   }


   return LOC_enumLcdApiRet;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <ptr_s8FloatToString>:
#include "lcdServices.h"

s8_t* ptr_s8FloatToString(s64_t s64FloatNumber,s8_t s8FloatSize)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	71fb      	strb	r3, [r7, #7]
    s32_t LOC_s32Counter ; 
    s32_t LOC_s32part1 = (s32_t) s64FloatNumber;
 800146e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001472:	f7ff fac1 	bl	80009f8 <__aeabi_d2iz>
 8001476:	4603      	mov	r3, r0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    s64_t LOC_s64Temp = s64FloatNumber - (s64_t)LOC_s32part1;
 800147a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800147c:	f7fe ffb8 	bl	80003f0 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001488:	f7fe fe64 	bl	8000154 <__aeabi_dsub>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    LOC_s64Temp = LOC_s64Temp * 100.0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <ptr_s8FloatToString+0x12c>)
 800149a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800149e:	f7ff f811 	bl	80004c4 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    s32_t LOC_s32part2 = (s32_t)LOC_s64Temp;
 80014aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ae:	f7ff faa3 	bl	80009f8 <__aeabi_d2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
    
    s32_t LOC_s32Div  = LOC_s32part2 ;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    s8_t  LOC_s32reminder  = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	74fb      	strb	r3, [r7, #19]
    static s8_t LOC_ptrArray[10];
    for(LOC_s32Counter=s8FloatSize-2;LOC_s32Counter>s8FloatSize-4;LOC_s32Counter--)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	3b02      	subs	r3, #2
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c6:	e021      	b.n	800150c <ptr_s8FloatToString+0xac>
    {
       LOC_s32reminder = LOC_s32Div%10;
 80014c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <ptr_s8FloatToString+0x130>)
 80014cc:	fb83 1302 	smull	r1, r3, r3, r2
 80014d0:	1099      	asrs	r1, r3, #2
 80014d2:	17d3      	asrs	r3, r2, #31
 80014d4:	1ac9      	subs	r1, r1, r3
 80014d6:	460b      	mov	r3, r1
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1ad1      	subs	r1, r2, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	74fb      	strb	r3, [r7, #19]
       LOC_ptrArray[LOC_s32Counter] = LOC_s32reminder+48;
 80014e4:	7cfb      	ldrb	r3, [r7, #19]
 80014e6:	3330      	adds	r3, #48	; 0x30
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b259      	sxtb	r1, r3
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <ptr_s8FloatToString+0x134>)
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
       LOC_s32Div/=10;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <ptr_s8FloatToString+0x130>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1092      	asrs	r2, r2, #2
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    for(LOC_s32Counter=s8FloatSize-2;LOC_s32Counter>s8FloatSize-4;LOC_s32Counter--)
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	3b01      	subs	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	3b03      	subs	r3, #3
 8001512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001514:	429a      	cmp	r2, r3
 8001516:	dad7      	bge.n	80014c8 <ptr_s8FloatToString+0x68>
    }
    LOC_ptrArray[LOC_s32Counter--]= '.';
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	1e5a      	subs	r2, r3, #1
 800151c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <ptr_s8FloatToString+0x134>)
 8001520:	212e      	movs	r1, #46	; 0x2e
 8001522:	54d1      	strb	r1, [r2, r3]
    LOC_s32Div  = LOC_s32part1 ;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    for(;LOC_s32Counter>=0;LOC_s32Counter--)
 8001528:	e021      	b.n	800156e <ptr_s8FloatToString+0x10e>
    {
       LOC_s32reminder = LOC_s32Div%10;
 800152a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <ptr_s8FloatToString+0x130>)
 800152e:	fb83 1302 	smull	r1, r3, r3, r2
 8001532:	1099      	asrs	r1, r3, #2
 8001534:	17d3      	asrs	r3, r2, #31
 8001536:	1ac9      	subs	r1, r1, r3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad1      	subs	r1, r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	74fb      	strb	r3, [r7, #19]
       LOC_ptrArray[LOC_s32Counter] = LOC_s32reminder+48;
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	3330      	adds	r3, #48	; 0x30
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b259      	sxtb	r1, r3
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <ptr_s8FloatToString+0x134>)
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	4413      	add	r3, r2
 8001554:	460a      	mov	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
       LOC_s32Div/=10;  
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <ptr_s8FloatToString+0x130>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1092      	asrs	r2, r2, #2
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    for(;LOC_s32Counter>=0;LOC_s32Counter--)
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	3b01      	subs	r3, #1
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	dada      	bge.n	800152a <ptr_s8FloatToString+0xca>
    }
    LOC_ptrArray[s8FloatSize-1] = '\0';
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <ptr_s8FloatToString+0x134>)
 800157c:	2100      	movs	r1, #0
 800157e:	54d1      	strb	r1, [r2, r3]
    return LOC_ptrArray;
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <ptr_s8FloatToString+0x134>)
}
 8001582:	4618      	mov	r0, r3
 8001584:	3730      	adds	r7, #48	; 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40590000 	.word	0x40590000
 8001590:	66666667 	.word	0x66666667
 8001594:	20000064 	.word	0x20000064

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159e:	f000 faf3 	bl	8001b88 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
 // MX_ADC1_Init();
   enumSystemInit();
 80015a2:	f7ff fa77 	bl	8000a94 <enumSystemInit>
  //MX_CAN_Init();
  //vid_systickTimerInit();

 // MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  char buffer[] = "CREW TEQ \r\n!";
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <main+0x58>)
 80015a8:	463c      	mov	r4, r7
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	c407      	stmia	r4!, {r0, r1, r2}
 80015ae:	7023      	strb	r3, [r4, #0]

  lcdConfigX.s8Dots = LCD_40DOTS;
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <main+0x5c>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	701a      	strb	r2, [r3, #0]
  lcdConfigX.s8Lines =LCD_2LINE;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <main+0x5c>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	705a      	strb	r2, [r3, #1]
  lcdConfigX.s8Mode = LCD_4BIT;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <main+0x5c>)
 80015be:	2204      	movs	r2, #4
 80015c0:	709a      	strb	r2, [r3, #2]
  enum_lcdInit(&lcdConfigX);
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <main+0x5c>)
 80015c4:	f7ff fcae 	bl	8000f24 <enum_lcdInit>
  enum_lcdSendCommand(LCD_CURS_OFF_COMMAND | LCD_BLINK_OFF_COMMAND | LCD_DATA_ON_COMMAND);
 80015c8:	200c      	movs	r0, #12
 80015ca:	f7ff fda3 	bl	8001114 <enum_lcdSendCommand>
  enum_lcdSetCursorPosition(LCD_1LINE,1);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff feff 	bl	80013d4 <enum_lcdSetCursorPosition>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 80015d6:	4639      	mov	r1, r7
 80015d8:	230a      	movs	r3, #10
 80015da:	220d      	movs	r2, #13
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <main+0x60>)
 80015de:	f001 ffc1 	bl	8003564 <HAL_UART_Transmit>
	 temperatureHandle();
 80015e2:	f000 fa5f 	bl	8001aa4 <temperatureHandle>
	 HAL_Delay(200);
 80015e6:	20c8      	movs	r0, #200	; 0xc8
 80015e8:	f000 fb00 	bl	8001bec <HAL_Delay>
	 HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 80015ec:	e7f3      	b.n	80015d6 <main+0x3e>
 80015ee:	bf00      	nop
 80015f0:	080038d4 	.word	0x080038d4
 80015f4:	200000b8 	.word	0x200000b8
 80015f8:	20000070 	.word	0x20000070

080015fc <SystemClock_Config>:
#include "mcu.h"

PUBLIC void Error_Handler(void);

void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 f94e 	bl	80038ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f000 ffff 	bl	8002644 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800164c:	f000 f826 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fa6c 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001676:	f000 f811 	bl	800169c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800167a:	2302      	movs	r3, #2
 800167c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fc1d 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001690:	f000 f804 	bl	800169c <Error_Handler>
  }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	; 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ba:	f000 fa7b 	bl	8001bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_MspInit+0x40>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_MspInit+0x40>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_MspInit+0x40>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_MspInit+0x40>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_MspInit+0x40>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_MspInit+0x40>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_ADC_MspInit+0x6c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d121      	bne.n	8001774 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_ADC_MspInit+0x70>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_ADC_MspInit+0x70>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_ADC_MspInit+0x70>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_ADC_MspInit+0x70>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_ADC_MspInit+0x70>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_ADC_MspInit+0x70>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Analog_Input_Pin;
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001764:	2303      	movs	r3, #3
 8001766:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Analog_Input_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_ADC_MspInit+0x74>)
 8001770:	f000 fd9c 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40012400 	.word	0x40012400
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_UART_MspInit+0x8c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d131      	bne.n	800180c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_UART_MspInit+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_UART_MspInit+0x94>)
 80017ee:	f000 fd5d 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_UART_MspInit+0x94>)
 8001808:	f000 fd50 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013800 	.word	0x40013800
 8001818:	40021000 	.word	0x40021000
 800181c:	40010800 	.word	0x40010800

08001820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_InitTick+0xe8>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_InitTick+0xe8>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_InitTick+0xe8>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184e:	f107 0210 	add.w	r2, r7, #16
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fae5 	bl	8002e28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001868:	f001 fab6 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 800186c:	6378      	str	r0, [r7, #52]	; 0x34
 800186e:	e004      	b.n	800187a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001870:	f001 fab2 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8001874:	4603      	mov	r3, r0
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_InitTick+0xec>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	3b01      	subs	r3, #1
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_InitTick+0xf0>)
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <HAL_InitTick+0xf4>)
 800188c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_InitTick+0xf0>)
 8001890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001894:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_InitTick+0xf0>)
 8001898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_InitTick+0xf0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_InitTick+0xf0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_InitTick+0xf0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018ae:	4818      	ldr	r0, [pc, #96]	; (8001910 <HAL_InitTick+0xf0>)
 80018b0:	f001 fbbe 	bl	8003030 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d11b      	bne.n	80018fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80018c2:	4813      	ldr	r0, [pc, #76]	; (8001910 <HAL_InitTick+0xf0>)
 80018c4:	f001 fc0c 	bl	80030e0 <HAL_TIM_Base_Start_IT>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d111      	bne.n	80018fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018d6:	201e      	movs	r0, #30
 80018d8:	f000 fcb1 	bl	800223e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d808      	bhi.n	80018f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80018e2:	2200      	movs	r2, #0
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	201e      	movs	r0, #30
 80018e8:	f000 fc8d 	bl	8002206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_InitTick+0xf8>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e002      	b.n	80018fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3738      	adds	r7, #56	; 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	431bde83 	.word	0x431bde83
 8001910:	200000bc 	.word	0x200000bc
 8001914:	40000800 	.word	0x40000800
 8001918:	20000010 	.word	0x20000010

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM4_IRQHandler+0x10>)
 8001966:	f001 fc0d 	bl	8003184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000bc 	.word	0x200000bc

08001974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <s64_GetTemperatureFromLcd>:
#include "temperature_control.h"

PRIVATE s64_t s64TemperatureOnLcd = 20.0;
PRIVATE autoButtonState_e enumAutoButtonState = TEMP_AUTO_BUTTON_UNPRESSED;
PRIVATE s64_t s64_GetTemperatureFromLcd(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
        return s64TemperatureOnLcd;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <s64_GetTemperatureFromLcd+0x14>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008

08001998 <enum_SetTemperatureOnLcd>:

PRIVATE tempControlApiRet_e enum_SetTemperatureOnLcd(setTemperatureAction_e enumTempUpdateAction)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
        tempControlApiRet_e retVal = TEMP_CONTROL_API_RETURN_ERROR;
 80019a2:	23ff      	movs	r3, #255	; 0xff
 80019a4:	73fb      	strb	r3, [r7, #15]

        if((s64_GetTemperatureFromLcd() <40.0) && (enumTempUpdateAction == TEMP_INCREASE_WHEN_BUTTON_PRESSED))
 80019a6:	f7ff ffeb 	bl	8001980 <s64_GetTemperatureFromLcd>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <enum_SetTemperatureOnLcd+0x94>)
 80019b0:	f7fe fffa 	bl	80009a8 <__aeabi_dcmplt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <enum_SetTemperatureOnLcd+0x48>
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10f      	bne.n	80019e0 <enum_SetTemperatureOnLcd+0x48>
        {
                s64TemperatureOnLcd = s64TemperatureOnLcd + 0.5;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <enum_SetTemperatureOnLcd+0x98>)
 80019c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <enum_SetTemperatureOnLcd+0x9c>)
 80019cc:	f7fe fbc4 	bl	8000158 <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4916      	ldr	r1, [pc, #88]	; (8001a30 <enum_SetTemperatureOnLcd+0x98>)
 80019d6:	e9c1 2300 	strd	r2, r3, [r1]
                retVal = TEMP_CONTROL_API_RETURN_OK;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e01e      	b.n	8001a1e <enum_SetTemperatureOnLcd+0x86>
        }
        else if((s64_GetTemperatureFromLcd() >16.0) && (enumTempUpdateAction == TEMP_DECREASE_WHEN_BUTTON_PRESSED))
 80019e0:	f7ff ffce 	bl	8001980 <s64_GetTemperatureFromLcd>
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <enum_SetTemperatureOnLcd+0xa0>)
 80019ea:	f7fe fffb 	bl	80009e4 <__aeabi_dcmpgt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <enum_SetTemperatureOnLcd+0x82>
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <enum_SetTemperatureOnLcd+0x82>
        {
                s64TemperatureOnLcd = s64TemperatureOnLcd - 0.5;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <enum_SetTemperatureOnLcd+0x98>)
 80019fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <enum_SetTemperatureOnLcd+0x9c>)
 8001a06:	f7fe fba5 	bl	8000154 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <enum_SetTemperatureOnLcd+0x98>)
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
                retVal = TEMP_CONTROL_API_RETURN_OK;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e001      	b.n	8001a1e <enum_SetTemperatureOnLcd+0x86>
        }
        else
        {
               
               retVal = TEMP_CONTROL_API_RETURN_ERROR;
 8001a1a:	23ff      	movs	r3, #255	; 0xff
 8001a1c:	73fb      	strb	r3, [r7, #15]
        }
         return retVal;
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40440000 	.word	0x40440000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	3fe00000 	.word	0x3fe00000
 8001a38:	40300000 	.word	0x40300000

08001a3c <vid_UpdateLcdAfterTempControl>:

PRIVATE void vid_UpdateLcdAfterTempControl(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

        //L.................C...................D
        enum_lcdSetCursorPosition(LCD_1LINE,0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fcc6 	bl	80013d4 <enum_lcdSetCursorPosition>
        enum_lcdWriteString((const s8_t *)"TEMP:");
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <vid_UpdateLcdAfterTempControl+0x58>)
 8001a4a:	f7ff fc0b 	bl	8001264 <enum_lcdWriteString>

        enum_lcdSetCursorPosition(LCD_1LINE,5);
 8001a4e:	2105      	movs	r1, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fcbf 	bl	80013d4 <enum_lcdSetCursorPosition>
        enum_lcdWriteString(ptr_s8FloatToString(s64_GetTemperatureFromLcd(),6));
 8001a56:	f7ff ff93 	bl	8001980 <s64_GetTemperatureFromLcd>
 8001a5a:	2206      	movs	r2, #6
 8001a5c:	f7ff fd00 	bl	8001460 <ptr_s8FloatToString>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbfe 	bl	8001264 <enum_lcdWriteString>

        enum_lcdSetCursorPosition(LCD_1LINE,10);
 8001a68:	210a      	movs	r1, #10
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff fcb2 	bl	80013d4 <enum_lcdSetCursorPosition>
        if(enumAutoButtonState == TEMP_AUTO_BUTTON_UNPRESSED)
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <vid_UpdateLcdAfterTempControl+0x5c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <vid_UpdateLcdAfterTempControl+0x44>
                enum_lcdWriteString((const s8_t *)"AUTO  ");
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <vid_UpdateLcdAfterTempControl+0x60>)
 8001a7a:	f7ff fbf3 	bl	8001264 <enum_lcdWriteString>
        else if(enumAutoButtonState == TEMP_AUTO_BUTTON_PRESSED)
                enum_lcdWriteString((const s8_t *)"MANUAL");

}
 8001a7e:	e006      	b.n	8001a8e <vid_UpdateLcdAfterTempControl+0x52>
        else if(enumAutoButtonState == TEMP_AUTO_BUTTON_PRESSED)
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <vid_UpdateLcdAfterTempControl+0x5c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <vid_UpdateLcdAfterTempControl+0x52>
                enum_lcdWriteString((const s8_t *)"MANUAL");
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <vid_UpdateLcdAfterTempControl+0x64>)
 8001a8a:	f7ff fbeb 	bl	8001264 <enum_lcdWriteString>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	080038e4 	.word	0x080038e4
 8001a98:	20000104 	.word	0x20000104
 8001a9c:	080038ec 	.word	0x080038ec
 8001aa0:	080038f4 	.word	0x080038f4

08001aa4 <temperatureHandle>:

tempControlApiRet_e temperatureHandle(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
        tempControlApiRet_e retVal = TEMP_CONTROL_API_RETURN_ERROR;
 8001aaa:	23ff      	movs	r3, #255	; 0xff
 8001aac:	71fb      	strb	r3, [r7, #7]
        keypad_buttons_e LOC_enumKeyPressed = enum_getUserRequest();
 8001aae:	f7ff f997 	bl	8000de0 <enum_getUserRequest>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71bb      	strb	r3, [r7, #6]
        if((LOC_enumKeyPressed == TEMPERATURE_INCREASE) ||(LOC_enumKeyPressed == TEMPERATURE_DECREASE) ||(LOC_enumKeyPressed == AUTO_CONTROL_MODE))
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	2b06      	cmp	r3, #6
 8001aba:	d005      	beq.n	8001ac8 <temperatureHandle+0x24>
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d002      	beq.n	8001ac8 <temperatureHandle+0x24>
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d12b      	bne.n	8001b20 <temperatureHandle+0x7c>
        {
                retVal =  TEMP_CONTROL_API_RETURN_OK;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	71fb      	strb	r3, [r7, #7]
                //check manual Or Auto
                if(enumAutoButtonState == TEMP_AUTO_BUTTON_PRESSED)
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <temperatureHandle+0x94>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d110      	bne.n	8001af6 <temperatureHandle+0x52>
                {
                        /*Manual Mode*/
                        if(LOC_enumKeyPressed== TEMPERATURE_INCREASE) // +temp
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d105      	bne.n	8001ae6 <temperatureHandle+0x42>
                        {       
                                retVal = enum_SetTemperatureOnLcd(TEMP_INCREASE_WHEN_BUTTON_PRESSED);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff ff5c 	bl	8001998 <enum_SetTemperatureOnLcd>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	e007      	b.n	8001af6 <temperatureHandle+0x52>
                        }
                        else  if(LOC_enumKeyPressed == TEMPERATURE_DECREASE) // -temp
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	d104      	bne.n	8001af6 <temperatureHandle+0x52>
                        {
                                retVal = enum_SetTemperatureOnLcd(TEMP_DECREASE_WHEN_BUTTON_PRESSED);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff ff53 	bl	8001998 <enum_SetTemperatureOnLcd>
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
                else 
                {
                        /*do NOTHING!*/
                }

                if(LOC_enumKeyPressed == AUTO_CONTROL_MODE)
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d114      	bne.n	8001b26 <temperatureHandle+0x82>
                {
                        retVal = TEMP_CONTROL_API_RETURN_OK;
 8001afc:	2301      	movs	r3, #1
 8001afe:	71fb      	strb	r3, [r7, #7]
                        /*switch from/To Auto Mode*/
                        if(enumAutoButtonState == TEMP_AUTO_BUTTON_UNPRESSED)
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <temperatureHandle+0x94>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <temperatureHandle+0x6c>
                        {
                        enumAutoButtonState = TEMP_AUTO_BUTTON_PRESSED;    
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <temperatureHandle+0x94>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
                if(LOC_enumKeyPressed == AUTO_CONTROL_MODE)
 8001b0e:	e00a      	b.n	8001b26 <temperatureHandle+0x82>
                        }
                        else if(enumAutoButtonState == TEMP_AUTO_BUTTON_PRESSED)
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <temperatureHandle+0x94>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <temperatureHandle+0x82>
                        {
                        enumAutoButtonState = TEMP_AUTO_BUTTON_UNPRESSED;       
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <temperatureHandle+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
                if(LOC_enumKeyPressed == AUTO_CONTROL_MODE)
 8001b1e:	e002      	b.n	8001b26 <temperatureHandle+0x82>
                        /*do NOTHING!*/
                }
        }
        else 
        {
              retVal =  TEMP_CONTROL_API_RETURN_ERROR;   
 8001b20:	23ff      	movs	r3, #255	; 0xff
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	e000      	b.n	8001b28 <temperatureHandle+0x84>
                if(LOC_enumKeyPressed == AUTO_CONTROL_MODE)
 8001b26:	bf00      	nop
        }
        vid_UpdateLcdAfterTempControl();
 8001b28:	f7ff ff88 	bl	8001a3c <vid_UpdateLcdAfterTempControl>
        return retVal;
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000104 	.word	0x20000104

08001b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b3c:	f7ff ff1a 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b42:	490c      	ldr	r1, [pc, #48]	; (8001b74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b58:	4c09      	ldr	r4, [pc, #36]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b66:	f001 fe7d 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6a:	f7ff fd15 	bl	8001598 <main>
  bx lr
 8001b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001b78:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8001b7c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001b80:	2000010c 	.word	0x2000010c

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x28>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x28>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 fb29 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	200f      	movs	r0, #15
 8001ba0:	f7ff fe3e 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fd92 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x1c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000014 	.word	0x20000014
 8001bd4:	20000108 	.word	0x20000108

08001bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_GetTick+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000108 	.word	0x20000108

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffe0 	bl	8001bd8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000014 	.word	0x20000014

08001c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0be      	b.n	8001dd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd4c 	bl	8001710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f9ab 	bl	8001fd4 <ADC_ConversionStop_Disable>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 8099 	bne.w	8001dc2 <HAL_ADC_Init+0x18e>
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8095 	bne.w	8001dc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca0:	f023 0302 	bic.w	r3, r3, #2
 8001ca4:	f043 0202 	orr.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7b1b      	ldrb	r3, [r3, #12]
 8001cba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ccc:	d003      	beq.n	8001cd6 <HAL_ADC_Init+0xa2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_ADC_Init+0xa8>
 8001cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cda:	e000      	b.n	8001cde <HAL_ADC_Init+0xaa>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7d1b      	ldrb	r3, [r3, #20]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d119      	bne.n	8001d20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7b1b      	ldrb	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	035a      	lsls	r2, r3, #13
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_ADC_Init+0x1a8>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d50:	d003      	beq.n	8001d5a <HAL_ADC_Init+0x126>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d104      	bne.n	8001d64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	051b      	lsls	r3, r3, #20
 8001d62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_ADC_Init+0x1ac>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d9e:	e018      	b.n	8001dd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	f023 0312 	bic.w	r3, r3, #18
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc0:	e007      	b.n	8001dd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f043 0210 	orr.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	ffe1f7fd 	.word	0xffe1f7fd
 8001de0:	ff1f0efe 	.word	0xff1f0efe

08001de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x20>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0dc      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1da>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d81c      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b05      	subs	r3, #5
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4c:	e03c      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d81c      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4019      	ands	r1, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	; 0x23
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8e:	e01b      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	; 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d91c      	bls.n	8001f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d132      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d125      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d126      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x1b2>
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d12e      	bne.n	800204c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff fdeb 	bl	8001bd8 <HAL_GetTick>
 8002002:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002004:	e01b      	b.n	800203e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002006:	f7ff fde7 	bl	8001bd8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d914      	bls.n	800203e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10d      	bne.n	800203e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e007      	b.n	800204e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d0dc      	beq.n	8002006 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4906      	ldr	r1, [pc, #24]	; (80020f0 <__NVIC_EnableIRQ+0x34>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff90 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff2d 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff42 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff90 	bl	8002148 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5f 	bl	80020f4 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff35 	bl	80020bc <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa2 	bl	80021ac <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d106      	bne.n	8002290 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800228e:	e005      	b.n	800229c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b08b      	sub	sp, #44	; 0x2c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e169      	b.n	8002594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c0:	2201      	movs	r2, #1
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8158 	bne.w	800258e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a9a      	ldr	r2, [pc, #616]	; (800254c <HAL_GPIO_Init+0x2a0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022e8:	4a98      	ldr	r2, [pc, #608]	; (800254c <HAL_GPIO_Init+0x2a0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d875      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022ee:	4a98      	ldr	r2, [pc, #608]	; (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d058      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022f4:	4a96      	ldr	r2, [pc, #600]	; (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d86f      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022fa:	4a96      	ldr	r2, [pc, #600]	; (8002554 <HAL_GPIO_Init+0x2a8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d052      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002300:	4a94      	ldr	r2, [pc, #592]	; (8002554 <HAL_GPIO_Init+0x2a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d869      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002306:	4a94      	ldr	r2, [pc, #592]	; (8002558 <HAL_GPIO_Init+0x2ac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04c      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 800230c:	4a92      	ldr	r2, [pc, #584]	; (8002558 <HAL_GPIO_Init+0x2ac>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d863      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002312:	4a92      	ldr	r2, [pc, #584]	; (800255c <HAL_GPIO_Init+0x2b0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d046      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002318:	4a90      	ldr	r2, [pc, #576]	; (800255c <HAL_GPIO_Init+0x2b0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d85d      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 800231e:	2b12      	cmp	r3, #18
 8002320:	d82a      	bhi.n	8002378 <HAL_GPIO_Init+0xcc>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d859      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_GPIO_Init+0x80>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080023a7 	.word	0x080023a7
 8002330:	08002381 	.word	0x08002381
 8002334:	08002393 	.word	0x08002393
 8002338:	080023d5 	.word	0x080023d5
 800233c:	080023db 	.word	0x080023db
 8002340:	080023db 	.word	0x080023db
 8002344:	080023db 	.word	0x080023db
 8002348:	080023db 	.word	0x080023db
 800234c:	080023db 	.word	0x080023db
 8002350:	080023db 	.word	0x080023db
 8002354:	080023db 	.word	0x080023db
 8002358:	080023db 	.word	0x080023db
 800235c:	080023db 	.word	0x080023db
 8002360:	080023db 	.word	0x080023db
 8002364:	080023db 	.word	0x080023db
 8002368:	080023db 	.word	0x080023db
 800236c:	080023db 	.word	0x080023db
 8002370:	08002389 	.word	0x08002389
 8002374:	0800239d 	.word	0x0800239d
 8002378:	4a79      	ldr	r2, [pc, #484]	; (8002560 <HAL_GPIO_Init+0x2b4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e02c      	b.n	80023da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e029      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	3304      	adds	r3, #4
 800238e:	623b      	str	r3, [r7, #32]
          break;
 8002390:	e024      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	3308      	adds	r3, #8
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e01f      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	330c      	adds	r3, #12
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e01a      	b.n	80023dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ae:	2304      	movs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e013      	b.n	80023dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	611a      	str	r2, [r3, #16]
          break;
 80023c6:	e009      	b.n	80023dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	615a      	str	r2, [r3, #20]
          break;
 80023d2:	e003      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x130>
          break;
 80023da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d801      	bhi.n	80023e6 <HAL_GPIO_Init+0x13a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	e001      	b.n	80023ea <HAL_GPIO_Init+0x13e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d802      	bhi.n	80023f8 <HAL_GPIO_Init+0x14c>
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x152>
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3b08      	subs	r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	210f      	movs	r1, #15
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	6a39      	ldr	r1, [r7, #32]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80b1 	beq.w	800258e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2bc>)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a40      	ldr	r2, [pc, #256]	; (800256c <HAL_GPIO_Init+0x2c0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <HAL_GPIO_Init+0x2c4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1e8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <HAL_GPIO_Init+0x2c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1e4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <HAL_GPIO_Init+0x2cc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1e0>
 8002488:	2303      	movs	r3, #3
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 800248c:	2304      	movs	r3, #4
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002498:	2300      	movs	r3, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024aa:	492f      	ldr	r1, [pc, #188]	; (8002568 <HAL_GPIO_Init+0x2bc>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	492c      	ldr	r1, [pc, #176]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4928      	ldr	r1, [pc, #160]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	491e      	ldr	r1, [pc, #120]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4914      	ldr	r1, [pc, #80]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e021      	b.n	800258e <HAL_GPIO_Init+0x2e2>
 800254a:	bf00      	nop
 800254c:	10320000 	.word	0x10320000
 8002550:	10310000 	.word	0x10310000
 8002554:	10220000 	.word	0x10220000
 8002558:	10210000 	.word	0x10210000
 800255c:	10120000 	.word	0x10120000
 8002560:	10110000 	.word	0x10110000
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	40011000 	.word	0x40011000
 8002578:	40011400 	.word	0x40011400
 800257c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_GPIO_Init+0x304>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <HAL_GPIO_Init+0x304>)
 800258a:	4013      	ands	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f ae8e 	bne.w	80022c0 <HAL_GPIO_Init+0x14>
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	372c      	adds	r7, #44	; 0x2c
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f2:	787b      	ldrb	r3, [r7, #1]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	041a      	lsls	r2, r3, #16
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43d9      	mvns	r1, r3
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	400b      	ands	r3, r1
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e272      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002664:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00c      	beq.n	800268a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002670:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d112      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
 800267c:	4b8c      	ldr	r3, [pc, #560]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d10b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d06c      	beq.n	8002770 <HAL_RCC_OscConfig+0x12c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d168      	bne.n	8002770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e24c      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x76>
 80026ac:	4b80      	ldr	r3, [pc, #512]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a7f      	ldr	r2, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e02e      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x98>
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b78      	ldr	r3, [pc, #480]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a77      	ldr	r2, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0xbc>
 80026e6:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6a      	ldr	r2, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a67      	ldr	r2, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff fa5a 	bl	8001bd8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fa56 	bl	8001bd8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e200      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xe4>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff fa46 	bl	8001bd8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff fa42 	bl	8001bd8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1ec      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x10c>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
 8002796:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1c0      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4939      	ldr	r1, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff f9fb 	bl	8001bd8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f9f7 	bl	8001bd8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4927      	ldr	r1, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f9da 	bl	8001bd8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f9d6 	bl	8001bd8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e180      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03a      	beq.n	80028c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7ff f9ba 	bl	8001bd8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff f9b6 	bl	8001bd8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e160      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 fafe 	bl	8002e88 <RCC_Delay>
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7ff f9a0 	bl	8001bd8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289a:	e00f      	b.n	80028bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7ff f99c 	bl	8001bd8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d908      	bls.n	80028bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e146      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	42420000 	.word	0x42420000
 80028b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e9      	bne.n	800289c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a6 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8b      	ldr	r3, [pc, #556]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a87      	ldr	r2, [pc, #540]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b82      	ldr	r3, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7e      	ldr	r2, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7ff f95d 	bl	8001bd8 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7ff f959 	bl	8001bd8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e103      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x312>
 8002948:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x334>
 800295e:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x356>
 8002980:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a60      	ldr	r2, [pc, #384]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a5a      	ldr	r2, [pc, #360]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7ff f90d 	bl	8001bd8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7ff f909 	bl	8001bd8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0b1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x37e>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff f8f7 	bl	8001bd8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff f8f3 	bl	8001bd8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e09b      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d061      	beq.n	8002afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d146      	bne.n	8002ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7ff f8c7 	bl	8001bd8 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7ff f8c3 	bl	8001bd8 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e06d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d108      	bne.n	8002a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4921      	ldr	r1, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a19      	ldr	r1, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	491b      	ldr	r1, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7ff f897 	bl	8001bd8 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7ff f893 	bl	8001bd8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x46a>
 8002acc:	e035      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f880 	bl	8001bd8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7ff f87c 	bl	8001bd8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e026      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x498>
 8002afa:	e01e      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e019      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x500>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe ffce 	bl	8001bd8 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe ffca 	bl	8001bd8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fd92 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	080038fc 	.word	0x080038fc
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000010 	.word	0x20000010

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x30>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4a:	e027      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e027      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0c5b      	lsrs	r3, r3, #17
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	fb03 f202 	mul.w	r2, r3, r2
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9e:	613b      	str	r3, [r7, #16]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	693b      	ldr	r3, [r7, #16]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	08003914 	.word	0x08003914
 8002dbc:	08003924 	.word	0x08003924
 8002dc0:	003d0900 	.word	0x003d0900

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800390c 	.word	0x0800390c

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0adb      	lsrs	r3, r3, #11
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	0800390c 	.word	0x0800390c

08002e28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	220f      	movs	r2, #15
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_GetClockConfig+0x58>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_RCC_GetClockConfig+0x58>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetClockConfig+0x58>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_GetClockConfig+0x58>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40022000 	.word	0x40022000

08002e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <RCC_Delay+0x34>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <RCC_Delay+0x38>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a5b      	lsrs	r3, r3, #9
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ea4:	bf00      	nop
  }
  while (Delay --);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <RCC_Delay+0x1c>
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d07d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f24:	f7fe fe58 	bl	8001bd8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fe54 	bl	8001bd8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e06d      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d027      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d014      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fe23 	bl	8001bd8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fe1f 	bl	8001bd8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4917      	ldr	r1, [pc, #92]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
 800302c:	42420440 	.word	0x42420440

08003030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f839 	bl	80030ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 f9b4 	bl	80033dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e03a      	b.n	800316e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_TIM_Base_Start_IT+0x98>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x58>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d009      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x58>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_TIM_Base_Start_IT+0x9c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x58>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <HAL_TIM_Base_Start_IT+0xa0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d010      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	e007      	b.n	800316c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0202 	mvn.w	r2, #2
 80031b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8ed 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8e0 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8ef 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0204 	mvn.w	r2, #4
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8c3 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8b6 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8c5 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b08      	cmp	r3, #8
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b08      	cmp	r3, #8
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0208 	mvn.w	r2, #8
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f899 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f88c 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f89b 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b10      	cmp	r3, #16
 8003294:	d122      	bne.n	80032dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d11b      	bne.n	80032dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0210 	mvn.w	r2, #16
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2208      	movs	r2, #8
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f86f 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f862 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f871 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0201 	mvn.w	r2, #1
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe f9d0 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8bf 	bl	80034b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f835 	bl	80033ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d10e      	bne.n	800338c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d107      	bne.n	800338c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0220 	mvn.w	r2, #32
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f88a 	bl	80034a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_Base_SetConfig+0xb8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00b      	beq.n	800340c <TIM_Base_SetConfig+0x30>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d007      	beq.n	800340c <TIM_Base_SetConfig+0x30>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a26      	ldr	r2, [pc, #152]	; (8003498 <TIM_Base_SetConfig+0xbc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_Base_SetConfig+0x30>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a25      	ldr	r2, [pc, #148]	; (800349c <TIM_Base_SetConfig+0xc0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d108      	bne.n	800341e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <TIM_Base_SetConfig+0xb8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_Base_SetConfig+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d007      	beq.n	800343e <TIM_Base_SetConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <TIM_Base_SetConfig+0xbc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0x62>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <TIM_Base_SetConfig+0xc0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <TIM_Base_SetConfig+0xb8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d103      	bne.n	8003484 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	615a      	str	r2, [r3, #20]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e042      	b.n	800355c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe f94c 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f91d 	bl	8003748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d16d      	bne.n	8003660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_UART_Transmit+0x2c>
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e066      	b.n	8003662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a2:	f7fe fb19 	bl	8001bd8 <HAL_GetTick>
 80035a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035bc:	d108      	bne.n	80035d0 <HAL_UART_Transmit+0x6c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e003      	b.n	80035d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d8:	e02a      	b.n	8003630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f840 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e036      	b.n	8003662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e007      	b.n	8003622 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1cf      	bne.n	80035da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2140      	movs	r1, #64	; 0x40
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f810 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e006      	b.n	8003662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b090      	sub	sp, #64	; 0x40
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367a:	e050      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d04c      	beq.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0x30>
 800368a:	f7fe faa5 	bl	8001bd8 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003696:	429a      	cmp	r2, r3
 8003698:	d241      	bcs.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ba:	637a      	str	r2, [r7, #52]	; 0x34
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	613b      	str	r3, [r7, #16]
   return(result);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ee:	623a      	str	r2, [r7, #32]
 80036f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	69f9      	ldr	r1, [r7, #28]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d09f      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3740      	adds	r7, #64	; 0x40
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003782:	f023 030c 	bic.w	r3, r3, #12
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	430b      	orrs	r3, r1
 800378e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2c      	ldr	r2, [pc, #176]	; (800385c <UART_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d103      	bne.n	80037b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037b0:	f7ff fb26 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	e002      	b.n	80037be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037b8:	f7ff fb0e 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80037bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <UART_SetConfig+0x118>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	0119      	lsls	r1, r3, #4
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <UART_SetConfig+0x118>)
 80037f6:	fba3 0302 	umull	r0, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2064      	movs	r0, #100	; 0x64
 80037fe:	fb00 f303 	mul.w	r3, r0, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	3332      	adds	r3, #50	; 0x32
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <UART_SetConfig+0x118>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003814:	4419      	add	r1, r3
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f2f3 	udiv	r2, r2, r3
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <UART_SetConfig+0x118>)
 800382e:	fba3 0302 	umull	r0, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2064      	movs	r0, #100	; 0x64
 8003836:	fb00 f303 	mul.w	r3, r0, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	3332      	adds	r3, #50	; 0x32
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <UART_SetConfig+0x118>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	440a      	add	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40013800 	.word	0x40013800
 8003860:	51eb851f 	.word	0x51eb851f

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	2600      	movs	r6, #0
 8003868:	4d0c      	ldr	r5, [pc, #48]	; (800389c <__libc_init_array+0x38>)
 800386a:	4c0d      	ldr	r4, [pc, #52]	; (80038a0 <__libc_init_array+0x3c>)
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	f000 f822 	bl	80038bc <_init>
 8003878:	2600      	movs	r6, #0
 800387a:	4d0a      	ldr	r5, [pc, #40]	; (80038a4 <__libc_init_array+0x40>)
 800387c:	4c0a      	ldr	r4, [pc, #40]	; (80038a8 <__libc_init_array+0x44>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	08003928 	.word	0x08003928
 80038a0:	08003928 	.word	0x08003928
 80038a4:	08003928 	.word	0x08003928
 80038a8:	0800392c 	.word	0x0800392c

080038ac <memset>:
 80038ac:	4603      	mov	r3, r0
 80038ae:	4402      	add	r2, r0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d100      	bne.n	80038b6 <memset+0xa>
 80038b4:	4770      	bx	lr
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7f9      	b.n	80038b0 <memset+0x4>

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
