
ToggelingLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002568  08002568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002568  08002568  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002568  08002568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  0800257c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800257c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab40  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a51  00000000  00000000  0002ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005c0e  00000000  00000000  0002c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  000321d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  00032c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171dd  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4c9  00000000  00000000  0004a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089043  00000000  00000000  00055ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dece9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002acc  00000000  00000000  000ded3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002510 	.word	0x08002510

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002510 	.word	0x08002510

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa66 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f842 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ce 	bl	80002f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f88e 	bl	800027c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);//1ms
 8000160:	f001 fd88 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8000164:	4603      	mov	r3, r0
 8000166:	4a19      	ldr	r2, [pc, #100]	; (80001cc <main+0x80>)
 8000168:	fba2 2303 	umull	r2, r3, r2, r3
 800016c:	099b      	lsrs	r3, r3, #6
 800016e:	4618      	mov	r0, r3
 8000170:	f000 ffe1 	bl	8001136 <HAL_SYSTICK_Config>
     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000174:	2004      	movs	r0, #4
 8000176:	f000 ffeb 	bl	8001150 <HAL_SYSTICK_CLKSourceConfig>
     HAL_NVIC_SetPriority(SysTick_IRQn	, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	f04f 30ff 	mov.w	r0, #4294967295
 8000182:	f000 ffae 	bl	80010e2 <HAL_NVIC_SetPriority>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000186:	4812      	ldr	r0, [pc, #72]	; (80001d0 <main+0x84>)
 8000188:	f000 fb54 	bl	8000834 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800018c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000190:	480f      	ldr	r0, [pc, #60]	; (80001d0 <main+0x84>)
 8000192:	f000 fc29 	bl	80009e8 <HAL_ADC_PollForConversion>
	  readADC0 = HAL_ADC_GetValue(&hadc1);
 8000196:	480e      	ldr	r0, [pc, #56]	; (80001d0 <main+0x84>)
 8000198:	f000 fd2c 	bl	8000bf4 <HAL_ADC_GetValue>
 800019c:	4603      	mov	r3, r0
 800019e:	b29a      	uxth	r2, r3
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <main+0x88>)
 80001a2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80001a4:	480a      	ldr	r0, [pc, #40]	; (80001d0 <main+0x84>)
 80001a6:	f000 fbf3 	bl	8000990 <HAL_ADC_Stop>
	  if(readADC0>1000)
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <main+0x88>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001b2:	d905      	bls.n	80001c0 <main+0x74>
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2102      	movs	r1, #2
 80001b8:	4807      	ldr	r0, [pc, #28]	; (80001d8 <main+0x8c>)
 80001ba:	f001 f969 	bl	8001490 <HAL_GPIO_WritePin>
 80001be:	e7e2      	b.n	8000186 <main+0x3a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2102      	movs	r1, #2
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <main+0x8c>)
 80001c6:	f001 f963 	bl	8001490 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80001ca:	e7dc      	b.n	8000186 <main+0x3a>
 80001cc:	10624dd3 	.word	0x10624dd3
 80001d0:	20000028 	.word	0x20000028
 80001d4:	20000058 	.word	0x20000058
 80001d8:	40010c00 	.word	0x40010c00

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f988 	bl	8002500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020c:	2302      	movs	r3, #2
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000214:	2310      	movs	r3, #16
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000218:	2300      	movs	r3, #0
 800021a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f967 	bl	80014f4 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800022c:	f000 f8c0 	bl	80003b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fbd4 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000256:	f000 f8ab 	bl	80003b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fd71 	bl	8001d4c <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000270:	f000 f89e 	bl	80003b0 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	; 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_ADC1_Init+0x74>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_ADC1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 f9e3 	bl	8000684 <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f874 	bl	80003b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002da:	f000 fc97 	bl	8000c0c <HAL_ADC_ConfigChannel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e4:	f000 f864 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40012400 	.word	0x40012400

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_GPIO_Init+0x8c>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_GPIO_Init+0x8c>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a16      	ldr	r2, [pc, #88]	; (8000384 <MX_GPIO_Init+0x8c>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED_TMR0_ISR_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2106      	movs	r1, #6
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <MX_GPIO_Init+0x90>)
 8000342:	f001 f8a5 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8000346:	2301      	movs	r3, #1
 8000348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <MX_GPIO_Init+0x90>)
 800035a:	f000 ff15 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED_TMR0_ISR_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED_TMR0_ISR_Pin;
 800035e:	2306      	movs	r3, #6
 8000360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000362:	2301      	movs	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036a:	2303      	movs	r3, #3
 800036c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4619      	mov	r1, r3
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_GPIO_Init+0x90>)
 8000376:	f000 ff07 	bl	8001188 <HAL_GPIO_Init>

}
 800037a:	bf00      	nop
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010c00 	.word	0x40010c00

0800038c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d101      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039e:	f000 f955 	bl	800064c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40012c00 	.word	0x40012c00

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <Error_Handler+0x8>
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <HAL_MspInit+0x40>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <HAL_MspInit+0x40>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <HAL_MspInit+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <HAL_MspInit+0x40>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a07      	ldr	r2, [pc, #28]	; (80003fc <HAL_MspInit+0x40>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <HAL_MspInit+0x40>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <HAL_ADC_MspInit+0x6c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d121      	bne.n	8000464 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <HAL_ADC_MspInit+0x70>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a12      	ldr	r2, [pc, #72]	; (8000470 <HAL_ADC_MspInit+0x70>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_ADC_MspInit+0x70>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_ADC_MspInit+0x70>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <HAL_ADC_MspInit+0x70>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_ADC_MspInit+0x70>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000450:	2301      	movs	r3, #1
 8000452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000454:	2303      	movs	r3, #3
 8000456:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <HAL_ADC_MspInit+0x74>)
 8000460:	f000 fe92 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40012400 	.word	0x40012400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800

08000478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08c      	sub	sp, #48	; 0x30
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000480:	2300      	movs	r3, #0
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000488:	2300      	movs	r3, #0
 800048a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800048e:	4b2e      	ldr	r3, [pc, #184]	; (8000548 <HAL_InitTick+0xd0>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <HAL_InitTick+0xd0>)
 8000494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <HAL_InitTick+0xd0>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a6:	f107 020c 	add.w	r2, r7, #12
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fbfd 	bl	8001cb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004b6:	f001 fbe7 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80004ba:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004be:	4a23      	ldr	r2, [pc, #140]	; (800054c <HAL_InitTick+0xd4>)
 80004c0:	fba2 2303 	umull	r2, r3, r2, r3
 80004c4:	0c9b      	lsrs	r3, r3, #18
 80004c6:	3b01      	subs	r3, #1
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	; (8000550 <HAL_InitTick+0xd8>)
 80004cc:	4a21      	ldr	r2, [pc, #132]	; (8000554 <HAL_InitTick+0xdc>)
 80004ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <HAL_InitTick+0xd8>)
 80004d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <HAL_InitTick+0xd8>)
 80004da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_InitTick+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_InitTick+0xd8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <HAL_InitTick+0xd8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80004f0:	4817      	ldr	r0, [pc, #92]	; (8000550 <HAL_InitTick+0xd8>)
 80004f2:	f001 fd97 	bl	8002024 <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	2b00      	cmp	r3, #0
 8000502:	d11b      	bne.n	800053c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <HAL_InitTick+0xd8>)
 8000506:	f001 fde5 	bl	80020d4 <HAL_TIM_Base_Start_IT>
 800050a:	4603      	mov	r3, r0
 800050c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000514:	2b00      	cmp	r3, #0
 8000516:	d111      	bne.n	800053c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000518:	2019      	movs	r0, #25
 800051a:	f000 fdfe 	bl	800111a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b0f      	cmp	r3, #15
 8000522:	d808      	bhi.n	8000536 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000524:	2200      	movs	r2, #0
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	2019      	movs	r0, #25
 800052a:	f000 fdda 	bl	80010e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_InitTick+0xe0>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	e002      	b.n	800053c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800053c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000540:	4618      	mov	r0, r3
 8000542:	3730      	adds	r7, #48	; 0x30
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	431bde83 	.word	0x431bde83
 8000550:	2000005c 	.word	0x2000005c
 8000554:	40012c00 	.word	0x40012c00
 8000558:	20000004 	.word	0x20000004

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TMR0_ISR_GPIO_Port, LED_TMR0_ISR_Pin);
 80005a4:	2104      	movs	r1, #4
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <SysTick_Handler+0x10>)
 80005a8:	f000 ff8a 	bl	80014c0 <HAL_GPIO_TogglePin>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <TIM1_UP_IRQHandler+0x10>)
 80005ba:	f001 fddd 	bl	8002178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000005c 	.word	0x2000005c

080005c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff fff8 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005da:	490c      	ldr	r1, [pc, #48]	; (800060c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f0:	4c09      	ldr	r4, [pc, #36]	; (8000618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f001 ff5b 	bl	80024b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fda3 	bl	800014c <main>
  bx lr
 8000606:	4770      	bx	lr
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000610:	08002570 	.word	0x08002570
  ldr r2, =_sbss
 8000614:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000618:	200000a8 	.word	0x200000a8

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_Init+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_Init+0x28>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 fd4b 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff ff1e 	bl	8000478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff febe 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <HAL_IncTick+0x20>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000008 	.word	0x20000008
 800066c:	200000a4 	.word	0x200000a4

08000670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000a4 	.word	0x200000a4

08000684 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e0be      	b.n	8000824 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d109      	bne.n	80006c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fe9c 	bl	8000400 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fbf1 	bl	8000eb0 <ADC_ConversionStop_Disable>
 80006ce:	4603      	mov	r3, r0
 80006d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 8099 	bne.w	8000812 <HAL_ADC_Init+0x18e>
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f040 8095 	bne.w	8000812 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006f0:	f023 0302 	bic.w	r3, r3, #2
 80006f4:	f043 0202 	orr.w	r2, r3, #2
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000704:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
 800070a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800070c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	4313      	orrs	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800071c:	d003      	beq.n	8000726 <HAL_ADC_Init+0xa2>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d102      	bne.n	800072c <HAL_ADC_Init+0xa8>
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	e000      	b.n	800072e <HAL_ADC_Init+0xaa>
 800072c:	2300      	movs	r3, #0
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7d1b      	ldrb	r3, [r3, #20]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d119      	bne.n	8000770 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d109      	bne.n	8000758 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	3b01      	subs	r3, #1
 800074a:	035a      	lsls	r2, r3, #13
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	e00b      	b.n	8000770 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075c:	f043 0220 	orr.w	r2, r3, #32
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000768:	f043 0201 	orr.w	r2, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	430a      	orrs	r2, r1
 8000782:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <HAL_ADC_Init+0x1a8>)
 800078c:	4013      	ands	r3, r2
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	68b9      	ldr	r1, [r7, #8]
 8000794:	430b      	orrs	r3, r1
 8000796:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007a0:	d003      	beq.n	80007aa <HAL_ADC_Init+0x126>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	051b      	lsls	r3, r3, #20
 80007b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_ADC_Init+0x1ac>)
 80007d0:	4013      	ands	r3, r2
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d10b      	bne.n	80007f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	f043 0201 	orr.w	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007ee:	e018      	b.n	8000822 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	f023 0312 	bic.w	r3, r3, #18
 80007f8:	f043 0210 	orr.w	r2, r3, #16
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	f043 0201 	orr.w	r2, r3, #1
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000810:	e007      	b.n	8000822 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000816:	f043 0210 	orr.w	r2, r3, #16
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000822:	7dfb      	ldrb	r3, [r7, #23]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	ffe1f7fd 	.word	0xffe1f7fd
 8000830:	ff1f0efe 	.word	0xff1f0efe

08000834 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000846:	2b01      	cmp	r3, #1
 8000848:	d101      	bne.n	800084e <HAL_ADC_Start+0x1a>
 800084a:	2302      	movs	r3, #2
 800084c:	e098      	b.n	8000980 <HAL_ADC_Start+0x14c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2201      	movs	r2, #1
 8000852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 fad0 	bl	8000dfc <ADC_Enable>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f040 8087 	bne.w	8000976 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a41      	ldr	r2, [pc, #260]	; (8000988 <HAL_ADC_Start+0x154>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d105      	bne.n	8000892 <HAL_ADC_Start+0x5e>
 8000886:	4b41      	ldr	r3, [pc, #260]	; (800098c <HAL_ADC_Start+0x158>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d115      	bne.n	80008be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d026      	beq.n	80008fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008bc:	e01d      	b.n	80008fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <HAL_ADC_Start+0x158>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d004      	beq.n	80008de <HAL_ADC_Start+0xaa>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <HAL_ADC_Start+0x154>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d10d      	bne.n	80008fa <HAL_ADC_Start+0xc6>
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <HAL_ADC_Start+0x158>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d007      	beq.n	80008fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	f023 0206 	bic.w	r2, r3, #6
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
 8000912:	e002      	b.n	800091a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f06f 0202 	mvn.w	r2, #2
 800092a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000936:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800093a:	d113      	bne.n	8000964 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <HAL_ADC_Start+0x154>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_ADC_Start+0x158>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800094e:	2b00      	cmp	r3, #0
 8000950:	d108      	bne.n	8000964 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	e00c      	b.n	800097e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	e003      	b.n	800097e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40012800 	.word	0x40012800
 800098c:	40012400 	.word	0x40012400

08000990 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_ADC_Stop+0x1a>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e01a      	b.n	80009e0 <HAL_ADC_Stop+0x50>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 fa7c 	bl	8000eb0 <ADC_ConversionStop_Disable>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d109      	bne.n	80009d6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009ca:	f023 0301 	bic.w	r3, r3, #1
 80009ce:	f043 0201 	orr.w	r2, r3, #1
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80009fe:	f7ff fe37 	bl	8000670 <HAL_GetTick>
 8000a02:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	f043 0220 	orr.w	r2, r3, #32
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e0d3      	b.n	8000bd2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d131      	bne.n	8000a9c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d12a      	bne.n	8000a9c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a46:	e021      	b.n	8000a8c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d01d      	beq.n	8000a8c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <HAL_ADC_PollForConversion+0x7e>
 8000a56:	f7ff fe0b 	bl	8000670 <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d212      	bcs.n	8000a8c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10b      	bne.n	8000a8c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a78:	f043 0204 	orr.w	r2, r3, #4
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e0a2      	b.n	8000bd2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0d6      	beq.n	8000a48 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a9a:	e070      	b.n	8000b7e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a9c:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <HAL_ADC_PollForConversion+0x1f4>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f001 fa09 	bl	8001eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6919      	ldr	r1, [r3, #16]
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <HAL_ADC_PollForConversion+0x1f8>)
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d118      	bne.n	8000aec <HAL_ADC_PollForConversion+0x104>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68d9      	ldr	r1, [r3, #12]
 8000ac0:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <HAL_ADC_PollForConversion+0x1fc>)
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d111      	bne.n	8000aec <HAL_ADC_PollForConversion+0x104>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6919      	ldr	r1, [r3, #16]
 8000ace:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <HAL_ADC_PollForConversion+0x200>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d108      	bne.n	8000ae8 <HAL_ADC_PollForConversion+0x100>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68d9      	ldr	r1, [r3, #12]
 8000adc:	4b43      	ldr	r3, [pc, #268]	; (8000bec <HAL_ADC_PollForConversion+0x204>)
 8000ade:	400b      	ands	r3, r1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <HAL_ADC_PollForConversion+0x100>
 8000ae4:	2314      	movs	r3, #20
 8000ae6:	e020      	b.n	8000b2a <HAL_ADC_PollForConversion+0x142>
 8000ae8:	2329      	movs	r3, #41	; 0x29
 8000aea:	e01e      	b.n	8000b2a <HAL_ADC_PollForConversion+0x142>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6919      	ldr	r1, [r3, #16]
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_ADC_PollForConversion+0x200>)
 8000af4:	400b      	ands	r3, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d106      	bne.n	8000b08 <HAL_ADC_PollForConversion+0x120>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68d9      	ldr	r1, [r3, #12]
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_ADC_PollForConversion+0x204>)
 8000b02:	400b      	ands	r3, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00d      	beq.n	8000b24 <HAL_ADC_PollForConversion+0x13c>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6919      	ldr	r1, [r3, #16]
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <HAL_ADC_PollForConversion+0x208>)
 8000b10:	400b      	ands	r3, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <HAL_ADC_PollForConversion+0x140>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68d9      	ldr	r1, [r3, #12]
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <HAL_ADC_PollForConversion+0x208>)
 8000b1e:	400b      	ands	r3, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <HAL_ADC_PollForConversion+0x140>
 8000b24:	2354      	movs	r3, #84	; 0x54
 8000b26:	e000      	b.n	8000b2a <HAL_ADC_PollForConversion+0x142>
 8000b28:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b30:	e021      	b.n	8000b76 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d01a      	beq.n	8000b70 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <HAL_ADC_PollForConversion+0x168>
 8000b40:	f7ff fd96 	bl	8000670 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d20f      	bcs.n	8000b70 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d90b      	bls.n	8000b70 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	f043 0204 	orr.w	r2, r3, #4
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e030      	b.n	8000bd2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d8d9      	bhi.n	8000b32 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f06f 0212 	mvn.w	r2, #18
 8000b86:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ba2:	d115      	bne.n	8000bd0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f043 0201 	orr.w	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	24924924 	.word	0x24924924
 8000be4:	00924924 	.word	0x00924924
 8000be8:	12492492 	.word	0x12492492
 8000bec:	00492492 	.word	0x00492492
 8000bf0:	00249249 	.word	0x00249249

08000bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d101      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0x20>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e0dc      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1da>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d81c      	bhi.n	8000c76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b05      	subs	r3, #5
 8000c4e:	221f      	movs	r2, #31
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4019      	ands	r1, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	3b05      	subs	r3, #5
 8000c68:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
 8000c74:	e03c      	b.n	8000cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b0c      	cmp	r3, #12
 8000c7c:	d81c      	bhi.n	8000cb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b23      	subs	r3, #35	; 0x23
 8000c90:	221f      	movs	r2, #31
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4019      	ands	r1, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3b23      	subs	r3, #35	; 0x23
 8000caa:	fa00 f203 	lsl.w	r2, r0, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb6:	e01b      	b.n	8000cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3b41      	subs	r3, #65	; 0x41
 8000cca:	221f      	movs	r2, #31
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4019      	ands	r1, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3b41      	subs	r3, #65	; 0x41
 8000ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	d91c      	bls.n	8000d32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68d9      	ldr	r1, [r3, #12]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	3b1e      	subs	r3, #30
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6898      	ldr	r0, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	3b1e      	subs	r3, #30
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	e019      	b.n	8000d66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6919      	ldr	r1, [r3, #16]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	2207      	movs	r2, #7
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6898      	ldr	r0, [r3, #8]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b10      	cmp	r3, #16
 8000d6c:	d003      	beq.n	8000d76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d72:	2b11      	cmp	r3, #17
 8000d74:	d132      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d125      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d126      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d11a      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	0c9a      	lsrs	r2, r3, #18
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbc:	e002      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f9      	bne.n	8000dbe <HAL_ADC_ConfigChannel+0x1b2>
 8000dca:	e007      	b.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f043 0220 	orr.w	r2, r3, #32
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40012400 	.word	0x40012400
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d040      	beq.n	8000e9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <ADC_Enable+0xac>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <ADC_Enable+0xb0>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e38:	e002      	b.n	8000e40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f9      	bne.n	8000e3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e46:	f7ff fc13 	bl	8000670 <HAL_GetTick>
 8000e4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e4c:	e01f      	b.n	8000e8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e4e:	f7ff fc0f 	bl	8000670 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d918      	bls.n	8000e8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d011      	beq.n	8000e8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f043 0210 	orr.w	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e007      	b.n	8000e9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d1d8      	bne.n	8000e4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83

08000eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d12e      	bne.n	8000f28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eda:	f7ff fbc9 	bl	8000670 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee0:	e01b      	b.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ee2:	f7ff fbc5 	bl	8000670 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d914      	bls.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10d      	bne.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e007      	b.n	8000f2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d0dc      	beq.n	8000ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4906      	ldr	r1, [pc, #24]	; (8000fcc <__NVIC_EnableIRQ+0x34>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff90 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff2d 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff42 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff35 	bl	8000f98 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d106      	bne.n	800116c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800116a:	e005      	b.n	8001178 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001172:	f023 0304 	bic.w	r3, r3, #4
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e169      	b.n	8001470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800119c:	2201      	movs	r2, #1
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8158 	bne.w	800146a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4a9a      	ldr	r2, [pc, #616]	; (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d05e      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011c4:	4a98      	ldr	r2, [pc, #608]	; (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d875      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ca:	4a98      	ldr	r2, [pc, #608]	; (800142c <HAL_GPIO_Init+0x2a4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d058      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011d0:	4a96      	ldr	r2, [pc, #600]	; (800142c <HAL_GPIO_Init+0x2a4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d86f      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011d6:	4a96      	ldr	r2, [pc, #600]	; (8001430 <HAL_GPIO_Init+0x2a8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d052      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011dc:	4a94      	ldr	r2, [pc, #592]	; (8001430 <HAL_GPIO_Init+0x2a8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d869      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011e2:	4a94      	ldr	r2, [pc, #592]	; (8001434 <HAL_GPIO_Init+0x2ac>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d04c      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011e8:	4a92      	ldr	r2, [pc, #584]	; (8001434 <HAL_GPIO_Init+0x2ac>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d863      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ee:	4a92      	ldr	r2, [pc, #584]	; (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d046      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011f4:	4a90      	ldr	r2, [pc, #576]	; (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d85d      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d82a      	bhi.n	8001254 <HAL_GPIO_Init+0xcc>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d859      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <HAL_GPIO_Init+0x80>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001283 	.word	0x08001283
 800120c:	0800125d 	.word	0x0800125d
 8001210:	0800126f 	.word	0x0800126f
 8001214:	080012b1 	.word	0x080012b1
 8001218:	080012b7 	.word	0x080012b7
 800121c:	080012b7 	.word	0x080012b7
 8001220:	080012b7 	.word	0x080012b7
 8001224:	080012b7 	.word	0x080012b7
 8001228:	080012b7 	.word	0x080012b7
 800122c:	080012b7 	.word	0x080012b7
 8001230:	080012b7 	.word	0x080012b7
 8001234:	080012b7 	.word	0x080012b7
 8001238:	080012b7 	.word	0x080012b7
 800123c:	080012b7 	.word	0x080012b7
 8001240:	080012b7 	.word	0x080012b7
 8001244:	080012b7 	.word	0x080012b7
 8001248:	080012b7 	.word	0x080012b7
 800124c:	08001265 	.word	0x08001265
 8001250:	08001279 	.word	0x08001279
 8001254:	4a79      	ldr	r2, [pc, #484]	; (800143c <HAL_GPIO_Init+0x2b4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125a:	e02c      	b.n	80012b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e029      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e024      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	3308      	adds	r3, #8
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e01f      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	330c      	adds	r3, #12
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e01a      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128a:	2304      	movs	r3, #4
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e013      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001298:	2308      	movs	r3, #8
 800129a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	611a      	str	r2, [r3, #16]
          break;
 80012a2:	e009      	b.n	80012b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	615a      	str	r2, [r3, #20]
          break;
 80012ae:	e003      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          break;
 80012b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d801      	bhi.n	80012c2 <HAL_GPIO_Init+0x13a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e001      	b.n	80012c6 <HAL_GPIO_Init+0x13e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d802      	bhi.n	80012d4 <HAL_GPIO_Init+0x14c>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x152>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	3b08      	subs	r3, #8
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	210f      	movs	r1, #15
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	6a39      	ldr	r1, [r7, #32]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80b1 	beq.w	800146a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a4c      	ldr	r2, [pc, #304]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001320:	4a48      	ldr	r2, [pc, #288]	; (8001444 <HAL_GPIO_Init+0x2bc>)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a40      	ldr	r2, [pc, #256]	; (8001448 <HAL_GPIO_Init+0x2c0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3f      	ldr	r2, [pc, #252]	; (800144c <HAL_GPIO_Init+0x2c4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_GPIO_Init+0x2c8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3d      	ldr	r2, [pc, #244]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1e0>
 8001364:	2303      	movs	r3, #3
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001368:	2304      	movs	r3, #4
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001374:	2300      	movs	r3, #0
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001386:	492f      	ldr	r1, [pc, #188]	; (8001444 <HAL_GPIO_Init+0x2bc>)
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	492c      	ldr	r1, [pc, #176]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4928      	ldr	r1, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	491e      	ldr	r1, [pc, #120]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4918      	ldr	r1, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4914      	ldr	r1, [pc, #80]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d021      	beq.n	800145c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e021      	b.n	800146a <HAL_GPIO_Init+0x2e2>
 8001426:	bf00      	nop
 8001428:	10320000 	.word	0x10320000
 800142c:	10310000 	.word	0x10310000
 8001430:	10220000 	.word	0x10220000
 8001434:	10210000 	.word	0x10210000
 8001438:	10120000 	.word	0x10120000
 800143c:	10110000 	.word	0x10110000
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40011000 	.word	0x40011000
 8001454:	40011400 	.word	0x40011400
 8001458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_GPIO_Init+0x304>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	4909      	ldr	r1, [pc, #36]	; (800148c <HAL_GPIO_Init+0x304>)
 8001466:	4013      	ands	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	3301      	adds	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	f47f ae8e 	bne.w	800119c <HAL_GPIO_Init+0x14>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	372c      	adds	r7, #44	; 0x2c
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43d9      	mvns	r1, r3
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	400b      	ands	r3, r1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e272      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b04      	cmp	r3, #4
 800151e:	d00c      	beq.n	800153a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001520:	4b8f      	ldr	r3, [pc, #572]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d112      	bne.n	8001552 <HAL_RCC_OscConfig+0x5e>
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d10b      	bne.n	8001552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d06c      	beq.n	8001620 <HAL_RCC_OscConfig+0x12c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d168      	bne.n	8001620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e24c      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x76>
 800155c:	4b80      	ldr	r3, [pc, #512]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a7f      	ldr	r2, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e02e      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x98>
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0xbc>
 8001596:	4b72      	ldr	r3, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a71      	ldr	r2, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6e      	ldr	r2, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6a      	ldr	r2, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a67      	ldr	r2, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f84e 	bl	8000670 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff f84a 	bl	8000670 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e200      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe4>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff f83a 	bl	8000670 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff f836 	bl	8000670 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1ec      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x10c>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162e:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x18c>
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x176>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c0      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4939      	ldr	r1, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x270>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7fe ffef 	bl	8000670 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7fe ffeb 	bl	8000670 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a1      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x270>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7fe ffce 	bl	8000670 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7fe ffca 	bl	8000670 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e180      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03a      	beq.n	8001778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d019      	beq.n	800173e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_RCC_OscConfig+0x274>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7fe ffae 	bl	8000670 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7fe ffaa 	bl	8000670 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e160      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f000 faea 	bl	8001d10 <RCC_Delay>
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_RCC_OscConfig+0x274>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7fe ff94 	bl	8000670 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174a:	e00f      	b.n	800176c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7fe ff90 	bl	8000670 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d908      	bls.n	800176c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e146      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	42420000 	.word	0x42420000
 8001768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e9      	bne.n	800174c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a6 	beq.w	80018d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10d      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a87      	ldr	r2, [pc, #540]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b82      	ldr	r3, [pc, #520]	; (80019bc <HAL_RCC_OscConfig+0x4c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x4c8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x4c8>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7fe ff51 	bl	8000670 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7fe ff4d 	bl	8000670 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	; 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e103      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x4c8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x312>
 80017f8:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e02d      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x334>
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	6213      	str	r3, [r2, #32]
 800181a:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a66      	ldr	r2, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	e01c      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x356>
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a60      	ldr	r2, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a5d      	ldr	r2, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 800184a:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d015      	beq.n	8001896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7fe ff01 	bl	8000670 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe fefd 	bl	8000670 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0b1      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <HAL_RCC_OscConfig+0x37e>
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7fe feeb 	bl	8000670 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7fe fee7 	bl	8000670 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e09b      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a3b      	ldr	r2, [pc, #236]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8087 	beq.w	80019ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d061      	beq.n	80019ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d146      	bne.n	800197e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7fe febb 	bl	8000670 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe feb7 	bl	8000670 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e06d      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4921      	ldr	r1, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a19      	ldr	r1, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	430b      	orrs	r3, r1
 800194a:	491b      	ldr	r1, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7fe fe8b 	bl	8000670 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7fe fe87 	bl	8000670 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e03d      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x46a>
 800197c:	e035      	b.n	80019ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x4cc>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7fe fe74 	bl	8000670 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe fe70 	bl	8000670 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e026      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x498>
 80019aa:	e01e      	b.n	80019ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e019      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
 80019c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x500>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0d0      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4965      	ldr	r1, [pc, #404]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0b8      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	494d      	ldr	r1, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d040      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e07f      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e073      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06b      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4936      	ldr	r1, [pc, #216]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7fe fdc2 	bl	8000670 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7fe fdbe 	bl	8000670 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e053      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d210      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0207 	bic.w	r2, r3, #7
 8001b2e:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e032      	b.n	8001bae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4916      	ldr	r1, [pc, #88]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	490e      	ldr	r1, [pc, #56]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b86:	f000 f821 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	490a      	ldr	r1, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	5ccb      	ldrb	r3, [r1, r3]
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fc66 	bl	8000478 <HAL_InitTick>

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08002528 	.word	0x08002528
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x30>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x36>
 8001bfa:	e027      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	613b      	str	r3, [r7, #16]
      break;
 8001c00:	e027      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	0c9b      	lsrs	r3, r3, #18
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d010      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	0c5b      	lsrs	r3, r3, #17
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2e:	fb03 f202 	mul.w	r2, r3, r2
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e004      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	613b      	str	r3, [r7, #16]
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4e:	613b      	str	r3, [r7, #16]
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	693b      	ldr	r3, [r7, #16]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	007a1200 	.word	0x007a1200
 8001c68:	08002540 	.word	0x08002540
 8001c6c:	08002550 	.word	0x08002550
 8001c70:	003d0900 	.word	0x003d0900

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c8c:	f7ff fff2 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0adb      	lsrs	r3, r3, #11
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08002538 	.word	0x08002538

08001cb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_GetClockConfig+0x58>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_RCC_GetClockConfig+0x58>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_GetClockConfig+0x58>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_GetClockConfig+0x58>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40022000 	.word	0x40022000

08001d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <RCC_Delay+0x34>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <RCC_Delay+0x38>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d2c:	bf00      	nop
  }
  while (Delay --);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	60fa      	str	r2, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f9      	bne.n	8001d2c <RCC_Delay+0x1c>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000000 	.word	0x20000000
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d07d      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	61d3      	str	r3, [r2, #28]
 8001d84:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d118      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dac:	f7fe fc60 	bl	8000670 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	e008      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7fe fc5c 	bl	8000670 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e06d      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02e      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d027      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e06:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d014      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fc2b 	bl	8000670 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fc27 	bl	8000670 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e036      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4917      	ldr	r1, [pc, #92]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	490b      	ldr	r1, [pc, #44]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4904      	ldr	r1, [pc, #16]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42420440 	.word	0x42420440

08001eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	f200 808a 	bhi.w	8001ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d045      	beq.n	8001f74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d075      	beq.n	8001fda <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001eee:	e082      	b.n	8001ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07b      	beq.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c5b      	lsrs	r3, r3, #17
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f34:	4a38      	ldr	r2, [pc, #224]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e004      	b.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f50:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	61bb      	str	r3, [r7, #24]
      break;
 8001f62:	e04a      	b.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
      break;
 8001f72:	e042      	b.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f84:	d108      	bne.n	8001f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e01f      	b.n	8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001fb0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fc2:	d11c      	bne.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d016      	beq.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001fd0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001fd4:	61bb      	str	r3, [r7, #24]
      break;
 8001fd6:	e012      	b.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fd8:	e011      	b.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001fda:	f7ff fe55 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0b9b      	lsrs	r3, r3, #14
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	61bb      	str	r3, [r7, #24]
      break;
 8001ff4:	e004      	b.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001ff6:	bf00      	nop
 8001ff8:	e002      	b.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e000      	b.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001ffe:	bf00      	nop
    }
  }
  return (frequency);
 8002000:	69bb      	ldr	r3, [r7, #24]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	08002554 	.word	0x08002554
 8002014:	08002564 	.word	0x08002564
 8002018:	007a1200 	.word	0x007a1200
 800201c:	003d0900 	.word	0x003d0900
 8002020:	aaaaaaab 	.word	0xaaaaaaab

08002024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f839 	bl	80020c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 f9b4 	bl	80023d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e03a      	b.n	8002162 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_TIM_Base_Start_IT+0x98>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x58>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d009      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x58>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_TIM_Base_Start_IT+0x9c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x58>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_TIM_Base_Start_IT+0xa0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d111      	bne.n	8002150 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b06      	cmp	r3, #6
 800213c:	d010      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214e:	e007      	b.n	8002160 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40000400 	.word	0x40000400
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b02      	cmp	r3, #2
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0202 	mvn.w	r2, #2
 80021a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8ed 	bl	800239a <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8e0 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f8ef 	bl	80023ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0204 	mvn.w	r2, #4
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8c3 	bl	800239a <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8b6 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8c5 	bl	80023ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b08      	cmp	r3, #8
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0208 	mvn.w	r2, #8
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f899 	bl	800239a <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f88c 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f89b 	bl	80023ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b10      	cmp	r3, #16
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0210 	mvn.w	r2, #16
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2208      	movs	r2, #8
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f86f 	bl	800239a <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f862 	bl	8002388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f871 	bl	80023ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0201 	mvn.w	r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe f848 	bl	800038c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b80      	cmp	r3, #128	; 0x80
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8bf 	bl	80024a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d10e      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d107      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f835 	bl	80023be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b20      	cmp	r3, #32
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0220 	mvn.w	r2, #32
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f88a 	bl	8002494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <TIM_Base_SetConfig+0xb8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00b      	beq.n	8002400 <TIM_Base_SetConfig+0x30>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d007      	beq.n	8002400 <TIM_Base_SetConfig+0x30>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a26      	ldr	r2, [pc, #152]	; (800248c <TIM_Base_SetConfig+0xbc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d003      	beq.n	8002400 <TIM_Base_SetConfig+0x30>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <TIM_Base_SetConfig+0xc0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <TIM_Base_SetConfig+0xb8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0x62>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0x62>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <TIM_Base_SetConfig+0xbc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0x62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <TIM_Base_SetConfig+0xc0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <TIM_Base_SetConfig+0xb8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d103      	bne.n	8002478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	615a      	str	r2, [r3, #20]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800

08002494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <__libc_init_array>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	2600      	movs	r6, #0
 80024bc:	4d0c      	ldr	r5, [pc, #48]	; (80024f0 <__libc_init_array+0x38>)
 80024be:	4c0d      	ldr	r4, [pc, #52]	; (80024f4 <__libc_init_array+0x3c>)
 80024c0:	1b64      	subs	r4, r4, r5
 80024c2:	10a4      	asrs	r4, r4, #2
 80024c4:	42a6      	cmp	r6, r4
 80024c6:	d109      	bne.n	80024dc <__libc_init_array+0x24>
 80024c8:	f000 f822 	bl	8002510 <_init>
 80024cc:	2600      	movs	r6, #0
 80024ce:	4d0a      	ldr	r5, [pc, #40]	; (80024f8 <__libc_init_array+0x40>)
 80024d0:	4c0a      	ldr	r4, [pc, #40]	; (80024fc <__libc_init_array+0x44>)
 80024d2:	1b64      	subs	r4, r4, r5
 80024d4:	10a4      	asrs	r4, r4, #2
 80024d6:	42a6      	cmp	r6, r4
 80024d8:	d105      	bne.n	80024e6 <__libc_init_array+0x2e>
 80024da:	bd70      	pop	{r4, r5, r6, pc}
 80024dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e0:	4798      	blx	r3
 80024e2:	3601      	adds	r6, #1
 80024e4:	e7ee      	b.n	80024c4 <__libc_init_array+0xc>
 80024e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ea:	4798      	blx	r3
 80024ec:	3601      	adds	r6, #1
 80024ee:	e7f2      	b.n	80024d6 <__libc_init_array+0x1e>
 80024f0:	08002568 	.word	0x08002568
 80024f4:	08002568 	.word	0x08002568
 80024f8:	08002568 	.word	0x08002568
 80024fc:	0800256c 	.word	0x0800256c

08002500 <memset>:
 8002500:	4603      	mov	r3, r0
 8002502:	4402      	add	r2, r0
 8002504:	4293      	cmp	r3, r2
 8002506:	d100      	bne.n	800250a <memset+0xa>
 8002508:	4770      	bx	lr
 800250a:	f803 1b01 	strb.w	r1, [r3], #1
 800250e:	e7f9      	b.n	8002504 <memset+0x4>

08002510 <_init>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr

0800251c <_fini>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	bf00      	nop
 8002520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002522:	bc08      	pop	{r3}
 8002524:	469e      	mov	lr, r3
 8002526:	4770      	bx	lr
