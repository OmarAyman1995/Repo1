
ToggelingLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001d04  08001d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d58  08001d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d58  08001d58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d58  08001d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d58  08001d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001d6c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090c7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001781  00000000  00000000  000290fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000533c  00000000  00000000  0002a87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  00030558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b34  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a14e  00000000  00000000  0004795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084848  00000000  00000000  00051aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d62f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026d8  00000000  00000000  000d6344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cec 	.word	0x08001cec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001cec 	.word	0x08001cec

0800014c <lcd_ENABLE_R_W_DATA>:
		{7},
		{8},
		{9}
};
static void lcd_ENABLE_R_W_DATA(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	LCD_PIN_HIGH(EN_PIN);
 8000152:	2201      	movs	r2, #1
 8000154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000158:	480b      	ldr	r0, [pc, #44]	; (8000188 <lcd_ENABLE_R_W_DATA+0x3c>)
 800015a:	f000 fef3 	bl	8000f44 <HAL_GPIO_WritePin>
	LCD_PIN_LOW(EN_PIN);
 800015e:	2200      	movs	r2, #0
 8000160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000164:	4808      	ldr	r0, [pc, #32]	; (8000188 <lcd_ENABLE_R_W_DATA+0x3c>)
 8000166:	f000 feed 	bl	8000f44 <HAL_GPIO_WritePin>
	int i=0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
	for(;i<=1000;i++);
 800016e:	e002      	b.n	8000176 <lcd_ENABLE_R_W_DATA+0x2a>
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	3301      	adds	r3, #1
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800017c:	ddf8      	ble.n	8000170 <lcd_ENABLE_R_W_DATA+0x24>
}
 800017e:	bf00      	nop
 8000180:	bf00      	nop
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	40010800 	.word	0x40010800

0800018c <lcd_start4Bit>:

static void lcd_start4Bit(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	LCD_PORT_HIGH(0x02);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000196:	4816      	ldr	r0, [pc, #88]	; (80001f0 <lcd_start4Bit+0x64>)
 8000198:	f000 fed4 	bl	8000f44 <HAL_GPIO_WritePin>
 800019c:	2201      	movs	r2, #1
 800019e:	2100      	movs	r1, #0
 80001a0:	4813      	ldr	r0, [pc, #76]	; (80001f0 <lcd_start4Bit+0x64>)
 80001a2:	f000 fecf 	bl	8000f44 <HAL_GPIO_WritePin>
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <lcd_start4Bit+0x68>)
 80001ae:	f000 fec9 	bl	8000f44 <HAL_GPIO_WritePin>
 80001b2:	f7ff ffcb 	bl	800014c <lcd_ENABLE_R_W_DATA>
 80001b6:	2200      	movs	r2, #0
 80001b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80001bc:	480c      	ldr	r0, [pc, #48]	; (80001f0 <lcd_start4Bit+0x64>)
 80001be:	f000 fec1 	bl	8000f44 <HAL_GPIO_WritePin>
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c8:	4809      	ldr	r0, [pc, #36]	; (80001f0 <lcd_start4Bit+0x64>)
 80001ca:	f000 febb 	bl	8000f44 <HAL_GPIO_WritePin>
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d4:	4807      	ldr	r0, [pc, #28]	; (80001f4 <lcd_start4Bit+0x68>)
 80001d6:	f000 feb5 	bl	8000f44 <HAL_GPIO_WritePin>
	LCD_PIN_LOW(RS_PIN);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <lcd_start4Bit+0x68>)
 80001e2:	f000 feaf 	bl	8000f44 <HAL_GPIO_WritePin>
	lcd_ENABLE_R_W_DATA();
 80001e6:	f7ff ffb1 	bl	800014c <lcd_ENABLE_R_W_DATA>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010c00 	.word	0x40010c00
 80001f4:	40010800 	.word	0x40010800

080001f8 <lcdInit>:

void lcdInit(lcdConfig_t* lcdConfigX)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	char _DOTS=0,_LINES=0,_MODE=0;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	2300      	movs	r3, #0
 8000206:	73bb      	strb	r3, [r7, #14]
 8000208:	2300      	movs	r3, #0
 800020a:	737b      	strb	r3, [r7, #13]
	if(lcdConfigX->dots==8)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b08      	cmp	r3, #8
 8000212:	d102      	bne.n	800021a <lcdInit+0x22>
		_DOTS= LCD_5X8_DOTS_COMMAND;
 8000214:	2320      	movs	r3, #32
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e005      	b.n	8000226 <lcdInit+0x2e>
	else if(lcdConfigX->dots==10)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b0a      	cmp	r3, #10
 8000220:	d101      	bne.n	8000226 <lcdInit+0x2e>
		_DOTS= LCD_5X10_DOTS_COMMAND;
 8000222:	2324      	movs	r3, #36	; 0x24
 8000224:	73fb      	strb	r3, [r7, #15]
	if(lcdConfigX->lines == 1)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d102      	bne.n	8000234 <lcdInit+0x3c>
		_LINES=LCD_1_LINE_COMMAND;
 800022e:	2320      	movs	r3, #32
 8000230:	73bb      	strb	r3, [r7, #14]
 8000232:	e005      	b.n	8000240 <lcdInit+0x48>
	else if(lcdConfigX->lines == 2)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	785b      	ldrb	r3, [r3, #1]
 8000238:	2b02      	cmp	r3, #2
 800023a:	d101      	bne.n	8000240 <lcdInit+0x48>
		_LINES=LCD_2_LINES_COMMAND;
 800023c:	2328      	movs	r3, #40	; 0x28
 800023e:	73bb      	strb	r3, [r7, #14]
	if(lcdConfigX->mode == 4)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	2b04      	cmp	r3, #4
 8000246:	d102      	bne.n	800024e <lcdInit+0x56>
		_MODE=LCD_4BIT_MODE;
 8000248:	2320      	movs	r3, #32
 800024a:	737b      	strb	r3, [r7, #13]
 800024c:	e005      	b.n	800025a <lcdInit+0x62>
	else if(lcdConfigX->mode == 8)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	2b08      	cmp	r3, #8
 8000254:	d101      	bne.n	800025a <lcdInit+0x62>
		_MODE=LCD_8BIT_MODE;
 8000256:	2330      	movs	r3, #48	; 0x30
 8000258:	737b      	strb	r3, [r7, #13]
	if(lcdConfigX->mode==4)lcd_start4Bit();
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	789b      	ldrb	r3, [r3, #2]
 800025e:	2b04      	cmp	r3, #4
 8000260:	d101      	bne.n	8000266 <lcdInit+0x6e>
 8000262:	f7ff ff93 	bl	800018c <lcd_start4Bit>
	LCD_PORT_HIGH((_DOTS)|(_LINES)|(_MODE));
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800026c:	484c      	ldr	r0, [pc, #304]	; (80003a0 <lcdInit+0x1a8>)
 800026e:	f000 fe69 	bl	8000f44 <HAL_GPIO_WritePin>
 8000272:	7bfa      	ldrb	r2, [r7, #15]
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	4313      	orrs	r3, r2
 8000278:	b2db      	uxtb	r3, r3
 800027a:	461a      	mov	r2, r3
 800027c:	7b7b      	ldrb	r3, [r7, #13]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	4313      	orrs	r3, r2
 8000282:	10db      	asrs	r3, r3, #3
 8000284:	b21b      	sxth	r3, r3
 8000286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800028a:	b21a      	sxth	r2, r3
 800028c:	7bf9      	ldrb	r1, [r7, #15]
 800028e:	7bbb      	ldrb	r3, [r7, #14]
 8000290:	430b      	orrs	r3, r1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	7b7b      	ldrb	r3, [r7, #13]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	430b      	orrs	r3, r1
 800029c:	105b      	asrs	r3, r3, #1
 800029e:	b21b      	sxth	r3, r3
 80002a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002a4:	b21b      	sxth	r3, r3
 80002a6:	4313      	orrs	r3, r2
 80002a8:	b21a      	sxth	r2, r3
 80002aa:	7bf9      	ldrb	r1, [r7, #15]
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	430b      	orrs	r3, r1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	4619      	mov	r1, r3
 80002b4:	7b7b      	ldrb	r3, [r7, #13]
 80002b6:	021b      	lsls	r3, r3, #8
 80002b8:	430b      	orrs	r3, r1
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	b21b      	sxth	r3, r3
 80002be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	4313      	orrs	r3, r2
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	7bf9      	ldrb	r1, [r7, #15]
 80002ca:	7bbb      	ldrb	r3, [r7, #14]
 80002cc:	430b      	orrs	r3, r1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4619      	mov	r1, r3
 80002d2:	7b7b      	ldrb	r3, [r7, #13]
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	430b      	orrs	r3, r1
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	b21b      	sxth	r3, r3
 80002dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80002e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002e4:	b21b      	sxth	r3, r3
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	482b      	ldr	r0, [pc, #172]	; (80003a0 <lcdInit+0x1a8>)
 80002f2:	f000 fe27 	bl	8000f44 <HAL_GPIO_WritePin>
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002fc:	4829      	ldr	r0, [pc, #164]	; (80003a4 <lcdInit+0x1ac>)
 80002fe:	f000 fe21 	bl	8000f44 <HAL_GPIO_WritePin>
 8000302:	f7ff ff23 	bl	800014c <lcd_ENABLE_R_W_DATA>
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800030c:	4824      	ldr	r0, [pc, #144]	; (80003a0 <lcdInit+0x1a8>)
 800030e:	f000 fe19 	bl	8000f44 <HAL_GPIO_WritePin>
 8000312:	7bfa      	ldrb	r2, [r7, #15]
 8000314:	7bbb      	ldrb	r3, [r7, #14]
 8000316:	4313      	orrs	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	7b7b      	ldrb	r3, [r7, #13]
 800031c:	4313      	orrs	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	031b      	lsls	r3, r3, #12
 8000322:	10db      	asrs	r3, r3, #3
 8000324:	b21b      	sxth	r3, r3
 8000326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032a:	b21a      	sxth	r2, r3
 800032c:	7bf9      	ldrb	r1, [r7, #15]
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	430b      	orrs	r3, r1
 8000332:	b2d9      	uxtb	r1, r3
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	430b      	orrs	r3, r1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	031b      	lsls	r3, r3, #12
 800033c:	105b      	asrs	r3, r3, #1
 800033e:	b21b      	sxth	r3, r3
 8000340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000344:	b21b      	sxth	r3, r3
 8000346:	4313      	orrs	r3, r2
 8000348:	b21a      	sxth	r2, r3
 800034a:	7bf9      	ldrb	r1, [r7, #15]
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	430b      	orrs	r3, r1
 8000350:	b2d9      	uxtb	r1, r3
 8000352:	7b7b      	ldrb	r3, [r7, #13]
 8000354:	430b      	orrs	r3, r1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	035b      	lsls	r3, r3, #13
 800035a:	b21b      	sxth	r3, r3
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	b21b      	sxth	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b21a      	sxth	r2, r3
 8000366:	7bf9      	ldrb	r1, [r7, #15]
 8000368:	7bbb      	ldrb	r3, [r7, #14]
 800036a:	430b      	orrs	r3, r1
 800036c:	b2d9      	uxtb	r1, r3
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	430b      	orrs	r3, r1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	03db      	lsls	r3, r3, #15
 8000376:	b21b      	sxth	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	b21b      	sxth	r3, r3
 800037c:	b29b      	uxth	r3, r3
 800037e:	2201      	movs	r2, #1
 8000380:	4619      	mov	r1, r3
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <lcdInit+0x1a8>)
 8000384:	f000 fdde 	bl	8000f44 <HAL_GPIO_WritePin>
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <lcdInit+0x1ac>)
 8000390:	f000 fdd8 	bl	8000f44 <HAL_GPIO_WritePin>
	lcd_ENABLE_R_W_DATA();
 8000394:	f7ff feda 	bl	800014c <lcd_ENABLE_R_W_DATA>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	40010800 	.word	0x40010800

080003a8 <lcd_Send_Command>:

void lcd_Send_Command(unsigned command)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	LCD_PORT_HIGH(command);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003b6:	4835      	ldr	r0, [pc, #212]	; (800048c <lcd_Send_Command+0xe4>)
 80003b8:	f000 fdc4 	bl	8000f44 <HAL_GPIO_WritePin>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	021b      	lsls	r3, r3, #8
 80003c0:	08db      	lsrs	r3, r3, #3
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	085b      	lsrs	r3, r3, #1
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	b29b      	uxth	r3, r3
 80003e0:	025b      	lsls	r3, r3, #9
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	02db      	lsls	r3, r3, #11
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80003fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80003fe:	b29b      	uxth	r3, r3
 8000400:	4313      	orrs	r3, r2
 8000402:	b29b      	uxth	r3, r3
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	4820      	ldr	r0, [pc, #128]	; (800048c <lcd_Send_Command+0xe4>)
 800040a:	f000 fd9b 	bl	8000f44 <HAL_GPIO_WritePin>
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000414:	481e      	ldr	r0, [pc, #120]	; (8000490 <lcd_Send_Command+0xe8>)
 8000416:	f000 fd95 	bl	8000f44 <HAL_GPIO_WritePin>
 800041a:	f7ff fe97 	bl	800014c <lcd_ENABLE_R_W_DATA>
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000424:	4819      	ldr	r0, [pc, #100]	; (800048c <lcd_Send_Command+0xe4>)
 8000426:	f000 fd8d 	bl	8000f44 <HAL_GPIO_WritePin>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	031b      	lsls	r3, r3, #12
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	b29b      	uxth	r3, r3
 8000432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000436:	b29a      	uxth	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	031b      	lsls	r3, r3, #12
 800043c:	085b      	lsrs	r3, r3, #1
 800043e:	b29b      	uxth	r3, r3
 8000440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000444:	b29b      	uxth	r3, r3
 8000446:	4313      	orrs	r3, r2
 8000448:	b29a      	uxth	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	b29b      	uxth	r3, r3
 800044e:	035b      	lsls	r3, r3, #13
 8000450:	b29b      	uxth	r3, r3
 8000452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000456:	b29b      	uxth	r3, r3
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	b29b      	uxth	r3, r3
 8000460:	03db      	lsls	r3, r3, #15
 8000462:	b29b      	uxth	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b29b      	uxth	r3, r3
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	4807      	ldr	r0, [pc, #28]	; (800048c <lcd_Send_Command+0xe4>)
 800046e:	f000 fd69 	bl	8000f44 <HAL_GPIO_WritePin>
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <lcd_Send_Command+0xe8>)
 800047a:	f000 fd63 	bl	8000f44 <HAL_GPIO_WritePin>
	lcd_ENABLE_R_W_DATA();
 800047e:	f7ff fe65 	bl	800014c <lcd_ENABLE_R_W_DATA>
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40010800 	.word	0x40010800

08000494 <lcdWriteString>:
	LCD_PORT_HIGH2(ch);
	lcd_ENABLE_R_W_DATA();
}

void lcdWriteString(char *ch)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	int i =0;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
	for(;ch[i]!='\0';i++)
 80004a0:	e081      	b.n	80005a6 <lcdWriteString+0x112>
	{
	LCD_PORT_HIGH2(ch[i]);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004a8:	4845      	ldr	r0, [pc, #276]	; (80005c0 <lcdWriteString+0x12c>)
 80004aa:	f000 fd4b 	bl	8000f44 <HAL_GPIO_WritePin>
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	021b      	lsls	r3, r3, #8
 80004b8:	10db      	asrs	r3, r3, #3
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	440b      	add	r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	021b      	lsls	r3, r3, #8
 80004cc:	105b      	asrs	r3, r3, #1
 80004ce:	b21b      	sxth	r3, r3
 80004d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b21a      	sxth	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	440b      	add	r3, r1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ea:	b21b      	sxth	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6879      	ldr	r1, [r7, #4]
 80004f4:	440b      	add	r3, r1
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	02db      	lsls	r3, r3, #11
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000504:	b21b      	sxth	r3, r3
 8000506:	4313      	orrs	r3, r2
 8000508:	b21b      	sxth	r3, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	482b      	ldr	r0, [pc, #172]	; (80005c0 <lcdWriteString+0x12c>)
 8000512:	f000 fd17 	bl	8000f44 <HAL_GPIO_WritePin>
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051c:	4829      	ldr	r0, [pc, #164]	; (80005c4 <lcdWriteString+0x130>)
 800051e:	f000 fd11 	bl	8000f44 <HAL_GPIO_WritePin>
 8000522:	f7ff fe13 	bl	800014c <lcd_ENABLE_R_W_DATA>
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800052c:	4824      	ldr	r0, [pc, #144]	; (80005c0 <lcdWriteString+0x12c>)
 800052e:	f000 fd09 	bl	8000f44 <HAL_GPIO_WritePin>
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	031b      	lsls	r3, r3, #12
 800053c:	10db      	asrs	r3, r3, #3
 800053e:	b21b      	sxth	r3, r3
 8000540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000544:	b21a      	sxth	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	440b      	add	r3, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	031b      	lsls	r3, r3, #12
 8000550:	105b      	asrs	r3, r3, #1
 8000552:	b21b      	sxth	r3, r3
 8000554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000558:	b21b      	sxth	r3, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	b21a      	sxth	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	440b      	add	r3, r1
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	035b      	lsls	r3, r3, #13
 8000568:	b21b      	sxth	r3, r3
 800056a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056e:	b21b      	sxth	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b21a      	sxth	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	440b      	add	r3, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	03db      	lsls	r3, r3, #15
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <lcdWriteString+0x12c>)
 800058c:	f000 fcda 	bl	8000f44 <HAL_GPIO_WritePin>
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <lcdWriteString+0x130>)
 8000598:	f000 fcd4 	bl	8000f44 <HAL_GPIO_WritePin>
	lcd_ENABLE_R_W_DATA();
 800059c:	f7ff fdd6 	bl	800014c <lcd_ENABLE_R_W_DATA>
	for(;ch[i]!='\0';i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f47f af77 	bne.w	80004a2 <lcdWriteString+0xe>
	}
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	40010800 	.word	0x40010800

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fa00 	bl	80009d0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f838 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f872 	bl	80006bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  lcdConfigX.dots = _40DOTS;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0x6c>)
 80005da:	2208      	movs	r2, #8
 80005dc:	701a      	strb	r2, [r3, #0]
  lcdConfigX.lines = _2LINE;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0x6c>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	705a      	strb	r2, [r3, #1]
  lcdConfigX.mode = _4BIT;
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <main+0x6c>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	709a      	strb	r2, [r3, #2]
     lcdInit(&lcdConfigX);
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0x6c>)
 80005ec:	f7ff fe04 	bl	80001f8 <lcdInit>
    lcd_Send_Command(LCD_CURS_OFF_COMMAND | LCD_BLINK_OFF_COMMAND | LCD_DATA_ON_COMMAND);
 80005f0:	200c      	movs	r0, #12
 80005f2:	f7ff fed9 	bl	80003a8 <lcd_Send_Command>
    lcdWriteString("STM32F103C8");
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0x70>)
 80005f8:	f7ff ff4c 	bl	8000494 <lcdWriteString>
  	lcd_Send_Command(LCD_CURSOR_POS_2ND_LINE_COMMAND);
 80005fc:	20c0      	movs	r0, #192	; 0xc0
 80005fe:	f7ff fed3 	bl	80003a8 <lcd_Send_Command>
  	lcdWriteString("C.R.E.W T.E.Q");
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <main+0x74>)
 8000604:	f7ff ff46 	bl	8000494 <lcdWriteString>
  	HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fa12 	bl	8000a34 <HAL_Delay>
  	lcd_Send_Command(LCD_CLR_COMMAND);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff fec9 	bl	80003a8 <lcd_Send_Command>
  	HAL_Delay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f000 fa0b 	bl	8000a34 <HAL_Delay>
  	lcdWriteString("C.R.E.W T.E.Q");
 800061e:	4807      	ldr	r0, [pc, #28]	; (800063c <main+0x74>)
 8000620:	f7ff ff38 	bl	8000494 <lcdWriteString>

  	  	lcd_Send_Command(LCD_CURSOR_POS_2ND_LINE_COMMAND);
 8000624:	20c0      	movs	r0, #192	; 0xc0
 8000626:	f7ff febf 	bl	80003a8 <lcd_Send_Command>
  	  lcdWriteString("__Company__");
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0x78>)
 800062c:	f7ff ff32 	bl	8000494 <lcdWriteString>
    // NVIC_EnableIRQ(SysTick_IRQn);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x68>
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028
 8000638:	08001d04 	.word	0x08001d04
 800063c:	08001d10 	.word	0x08001d10
 8000640:	08001d20 	.word	0x08001d20

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b090      	sub	sp, #64	; 0x40
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fb42 	bl	8001cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fc94 	bl	8000fa8 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000686:	f000 f89b 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 ff02 	bl	80014ac <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f887 	bl	80007c0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	; 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED_TMR0_ISR_Pin|LCD_D7_Pin|LCD_D6_Pin
 8000700:	2200      	movs	r2, #0
 8000702:	f24f 0106 	movw	r1, #61446	; 0xf006
 8000706:	4823      	ldr	r0, [pc, #140]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000708:	f000 fc1c 	bl	8000f44 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <MX_GPIO_Init+0xdc>)
 8000714:	f000 fc16 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8000718:	2301      	movs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_GPIO_Init+0xd8>)
 800072c:	f000 fa86 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED_TMR0_ISR_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED_TMR0_ISR_Pin;
 8000730:	2306      	movs	r3, #6
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4619      	mov	r1, r3
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000748:	f000 fa78 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 800074c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000766:	f000 fa69 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 800076a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800076e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xdc>)
 8000784:	f000 fa5a 	bl	8000c3c <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	40010c00 	.word	0x40010c00
 8000798:	40010800 	.word	0x40010800

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ae:	f000 f925 	bl	80009fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40000800 	.word	0x40000800

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_MspInit+0x40>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_MspInit+0x40>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_MspInit+0x40>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_MspInit+0x40>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_MspInit+0x40>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_MspInit+0x40>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <HAL_InitTick+0xe8>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <HAL_InitTick+0xe8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <HAL_InitTick+0xe8>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800083e:	f107 0210 	add.w	r2, r7, #16
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 ff8b 	bl	8001764 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000854:	2b00      	cmp	r3, #0
 8000856:	d103      	bne.n	8000860 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000858:	f000 ff70 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 800085c:	6378      	str	r0, [r7, #52]	; 0x34
 800085e:	e004      	b.n	800086a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000860:	f000 ff6c 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 8000864:	4603      	mov	r3, r0
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <HAL_InitTick+0xec>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_InitTick+0xf0>)
 800087a:	4a22      	ldr	r2, [pc, #136]	; (8000904 <HAL_InitTick+0xf4>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_InitTick+0xf0>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <HAL_InitTick+0xf0>)
 8000888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_InitTick+0xf0>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_InitTick+0xf0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_InitTick+0xf0>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <HAL_InitTick+0xf0>)
 80008a0:	f000 ffae 	bl	8001800 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d11b      	bne.n	80008ea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <HAL_InitTick+0xf0>)
 80008b4:	f000 fffc 	bl	80018b0 <HAL_TIM_Base_Start_IT>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d111      	bne.n	80008ea <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008c6:	201e      	movs	r0, #30
 80008c8:	f000 f9a9 	bl	8000c1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d808      	bhi.n	80008e4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008d2:	2200      	movs	r2, #0
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	201e      	movs	r0, #30
 80008d8:	f000 f985 	bl	8000be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_InitTick+0xf8>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e002      	b.n	80008ea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3738      	adds	r7, #56	; 0x38
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	2000002c 	.word	0x2000002c
 8000904:	40000800 	.word	0x40000800
 8000908:	20000004 	.word	0x20000004

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
	...

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TMR0_ISR_GPIO_Port, LED_TMR0_ISR_Pin);
 8000954:	2104      	movs	r1, #4
 8000956:	4802      	ldr	r0, [pc, #8]	; (8000960 <SysTick_Handler+0x10>)
 8000958:	f000 fb0c 	bl	8000f74 <HAL_GPIO_TogglePin>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010c00 	.word	0x40010c00

08000964 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM4_IRQHandler+0x10>)
 800096a:	f000 fff3 	bl	8001954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000002c 	.word	0x2000002c

08000978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff fff8 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800098a:	490c      	ldr	r1, [pc, #48]	; (80009bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a0:	4c09      	ldr	r4, [pc, #36]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f001 f971 	bl	8001c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fe09 	bl	80005c8 <main>
  bx lr
 80009b6:	4770      	bx	lr
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08001d60 	.word	0x08001d60
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	20000078 	.word	0x20000078

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f8f5 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f7ff ff12 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff feee 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000074 	.word	0x20000074

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000074 	.word	0x20000074

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4906      	ldr	r1, [pc, #24]	; (8000b14 <__NVIC_EnableIRQ+0x34>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff4f 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff64 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ffb2 	bl	8000b6c <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff81 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff57 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b08b      	sub	sp, #44	; 0x2c
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e169      	b.n	8000f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c50:	2201      	movs	r2, #1
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8158 	bne.w	8000f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a9a      	ldr	r2, [pc, #616]	; (8000edc <HAL_GPIO_Init+0x2a0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d05e      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c78:	4a98      	ldr	r2, [pc, #608]	; (8000edc <HAL_GPIO_Init+0x2a0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d875      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c7e:	4a98      	ldr	r2, [pc, #608]	; (8000ee0 <HAL_GPIO_Init+0x2a4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d058      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c84:	4a96      	ldr	r2, [pc, #600]	; (8000ee0 <HAL_GPIO_Init+0x2a4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d86f      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c8a:	4a96      	ldr	r2, [pc, #600]	; (8000ee4 <HAL_GPIO_Init+0x2a8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d052      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c90:	4a94      	ldr	r2, [pc, #592]	; (8000ee4 <HAL_GPIO_Init+0x2a8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d869      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c96:	4a94      	ldr	r2, [pc, #592]	; (8000ee8 <HAL_GPIO_Init+0x2ac>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d04c      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c9c:	4a92      	ldr	r2, [pc, #584]	; (8000ee8 <HAL_GPIO_Init+0x2ac>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d863      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000ca2:	4a92      	ldr	r2, [pc, #584]	; (8000eec <HAL_GPIO_Init+0x2b0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d046      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000ca8:	4a90      	ldr	r2, [pc, #576]	; (8000eec <HAL_GPIO_Init+0x2b0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d85d      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d82a      	bhi.n	8000d08 <HAL_GPIO_Init+0xcc>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d859      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000cb6:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <HAL_GPIO_Init+0x80>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000d37 	.word	0x08000d37
 8000cc0:	08000d11 	.word	0x08000d11
 8000cc4:	08000d23 	.word	0x08000d23
 8000cc8:	08000d65 	.word	0x08000d65
 8000ccc:	08000d6b 	.word	0x08000d6b
 8000cd0:	08000d6b 	.word	0x08000d6b
 8000cd4:	08000d6b 	.word	0x08000d6b
 8000cd8:	08000d6b 	.word	0x08000d6b
 8000cdc:	08000d6b 	.word	0x08000d6b
 8000ce0:	08000d6b 	.word	0x08000d6b
 8000ce4:	08000d6b 	.word	0x08000d6b
 8000ce8:	08000d6b 	.word	0x08000d6b
 8000cec:	08000d6b 	.word	0x08000d6b
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d6b 	.word	0x08000d6b
 8000cf8:	08000d6b 	.word	0x08000d6b
 8000cfc:	08000d6b 	.word	0x08000d6b
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d2d 	.word	0x08000d2d
 8000d08:	4a79      	ldr	r2, [pc, #484]	; (8000ef0 <HAL_GPIO_Init+0x2b4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d013      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d0e:	e02c      	b.n	8000d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e029      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e024      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	3308      	adds	r3, #8
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e01f      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	330c      	adds	r3, #12
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e01a      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e013      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d105      	bne.n	8000d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	611a      	str	r2, [r3, #16]
          break;
 8000d56:	e009      	b.n	8000d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	615a      	str	r2, [r3, #20]
          break;
 8000d62:	e003      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          break;
 8000d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d801      	bhi.n	8000d76 <HAL_GPIO_Init+0x13a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_Init+0x13e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2bff      	cmp	r3, #255	; 0xff
 8000d80:	d802      	bhi.n	8000d88 <HAL_GPIO_Init+0x14c>
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	e002      	b.n	8000d8e <HAL_GPIO_Init+0x152>
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	3b08      	subs	r3, #8
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	210f      	movs	r1, #15
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	6a39      	ldr	r1, [r7, #32]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2bc>)
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_GPIO_Init+0x2c0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1ec>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <HAL_GPIO_Init+0x2c4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1e8>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	; (8000f04 <HAL_GPIO_Init+0x2c8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1e4>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3d      	ldr	r2, [pc, #244]	; (8000f08 <HAL_GPIO_Init+0x2cc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1e0>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e004      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2c:	f002 0203 	and.w	r2, r2, #3
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	4093      	lsls	r3, r2
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e3a:	492f      	ldr	r1, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x2bc>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	492c      	ldr	r1, [pc, #176]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4928      	ldr	r1, [pc, #160]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	4922      	ldr	r1, [pc, #136]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60cb      	str	r3, [r1, #12]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	491e      	ldr	r1, [pc, #120]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4918      	ldr	r1, [pc, #96]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4914      	ldr	r1, [pc, #80]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d021      	beq.n	8000f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	490e      	ldr	r1, [pc, #56]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
 8000ed8:	e021      	b.n	8000f1e <HAL_GPIO_Init+0x2e2>
 8000eda:	bf00      	nop
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10310000 	.word	0x10310000
 8000ee4:	10220000 	.word	0x10220000
 8000ee8:	10210000 	.word	0x10210000
 8000eec:	10120000 	.word	0x10120000
 8000ef0:	10110000 	.word	0x10110000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40010800 	.word	0x40010800
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40011400 	.word	0x40011400
 8000f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_GPIO_Init+0x304>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4909      	ldr	r1, [pc, #36]	; (8000f40 <HAL_GPIO_Init+0x304>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f47f ae8e 	bne.w	8000c50 <HAL_GPIO_Init+0x14>
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	372c      	adds	r7, #44	; 0x2c
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	611a      	str	r2, [r3, #16]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43d9      	mvns	r1, r3
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	400b      	ands	r3, r1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	611a      	str	r2, [r3, #16]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e272      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8087 	beq.w	80010d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d00c      	beq.n	8000fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd4:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 030c 	and.w	r3, r3, #12
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d112      	bne.n	8001006 <HAL_RCC_OscConfig+0x5e>
 8000fe0:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d10b      	bne.n	8001006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fee:	4b89      	ldr	r3, [pc, #548]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d06c      	beq.n	80010d4 <HAL_RCC_OscConfig+0x12c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d168      	bne.n	80010d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e24c      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x76>
 8001010:	4b80      	ldr	r3, [pc, #512]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a7f      	ldr	r2, [pc, #508]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e02e      	b.n	800107c <HAL_RCC_OscConfig+0xd4>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x98>
 8001026:	4b7b      	ldr	r3, [pc, #492]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a7a      	ldr	r2, [pc, #488]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b78      	ldr	r3, [pc, #480]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a77      	ldr	r2, [pc, #476]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e01d      	b.n	800107c <HAL_RCC_OscConfig+0xd4>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0xbc>
 800104a:	4b72      	ldr	r3, [pc, #456]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a71      	ldr	r2, [pc, #452]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6e      	ldr	r2, [pc, #440]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0xd4>
 8001064:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a6a      	ldr	r2, [pc, #424]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800106a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b68      	ldr	r3, [pc, #416]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a67      	ldr	r2, [pc, #412]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fccc 	bl	8000a20 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fcc8 	bl	8000a20 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e200      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	4b5d      	ldr	r3, [pc, #372]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0xe4>
 80010aa:	e014      	b.n	80010d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fcb8 	bl	8000a20 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fcb4 	bl	8000a20 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e1ec      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x10c>
 80010d2:	e000      	b.n	80010d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d063      	beq.n	80011aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ee:	4b49      	ldr	r3, [pc, #292]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d11c      	bne.n	8001134 <HAL_RCC_OscConfig+0x18c>
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d116      	bne.n	8001134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	4b43      	ldr	r3, [pc, #268]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <HAL_RCC_OscConfig+0x176>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d001      	beq.n	800111e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e1c0      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4939      	ldr	r1, [pc, #228]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e03a      	b.n	80011aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_RCC_OscConfig+0x270>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fc6d 	bl	8000a20 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114a:	f7ff fc69 	bl	8000a20 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e1a1      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4927      	ldr	r1, [pc, #156]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e015      	b.n	80011aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_RCC_OscConfig+0x270>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc4c 	bl	8000a20 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fc48 	bl	8000a20 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e180      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d03a      	beq.n	800122c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d019      	beq.n	80011f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_RCC_OscConfig+0x274>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc2c 	bl	8000a20 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc28 	bl	8000a20 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e160      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 faea 	bl	80017c4 <RCC_Delay>
 80011f0:	e01c      	b.n	800122c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_RCC_OscConfig+0x274>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fc12 	bl	8000a20 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fe:	e00f      	b.n	8001220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fc0e 	bl	8000a20 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d908      	bls.n	8001220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e146      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	42420000 	.word	0x42420000
 800121c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	4b92      	ldr	r3, [pc, #584]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e9      	bne.n	8001200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80a6 	beq.w	8001386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123e:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a87      	ldr	r2, [pc, #540]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x4c8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d118      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001272:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x4c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7e      	ldr	r2, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x4c8>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fbcf 	bl	8000a20 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001286:	f7ff fbcb 	bl	8000a20 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e103      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	4b75      	ldr	r3, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x4c8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x312>
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a6e      	ldr	r2, [pc, #440]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e02d      	b.n	8001316 <HAL_RCC_OscConfig+0x36e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x334>
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a69      	ldr	r2, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a66      	ldr	r2, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	e01c      	b.n	8001316 <HAL_RCC_OscConfig+0x36e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d10c      	bne.n	80012fe <HAL_RCC_OscConfig+0x356>
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a60      	ldr	r2, [pc, #384]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	4b5e      	ldr	r3, [pc, #376]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4a5d      	ldr	r2, [pc, #372]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6213      	str	r3, [r2, #32]
 80012fc:	e00b      	b.n	8001316 <HAL_RCC_OscConfig+0x36e>
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb7f 	bl	8000a20 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fb7b 	bl	8000a20 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0b1      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0ee      	beq.n	8001326 <HAL_RCC_OscConfig+0x37e>
 8001348:	e014      	b.n	8001374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fb69 	bl	8000a20 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	e00a      	b.n	8001368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7ff fb65 	bl	8000a20 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4293      	cmp	r3, r2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e09b      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ee      	bne.n	8001352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d105      	bne.n	8001386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a3b      	ldr	r2, [pc, #236]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d061      	beq.n	8001460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d146      	bne.n	8001432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <HAL_RCC_OscConfig+0x4cc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb39 	bl	8000a20 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b2:	f7ff fb35 	bl	8000a20 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e06d      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d108      	bne.n	80013ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4921      	ldr	r1, [pc, #132]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a19      	ldr	r1, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	430b      	orrs	r3, r1
 80013fe:	491b      	ldr	r1, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x4cc>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb09 	bl	8000a20 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fb05 	bl	8000a20 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e03d      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x46a>
 8001430:	e035      	b.n	800149e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_RCC_OscConfig+0x4cc>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff faf2 	bl	8000a20 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff faee 	bl	8000a20 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e026      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_OscConfig+0x4c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x498>
 800145e:	e01e      	b.n	800149e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d107      	bne.n	8001478 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e019      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
 800146c:	40021000 	.word	0x40021000
 8001470:	40007000 	.word	0x40007000
 8001474:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x500>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	429a      	cmp	r2, r3
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0d0      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d910      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 0207 	bic.w	r2, r3, #7
 80014d6:	4965      	ldr	r1, [pc, #404]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b8      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001512:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800152a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	494d      	ldr	r1, [pc, #308]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d040      	beq.n	80015cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e07f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e073      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06b      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f023 0203 	bic.w	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4936      	ldr	r1, [pc, #216]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff fa40 	bl	8000a20 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff fa3c 	bl	8000a20 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e053      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 020c 	and.w	r2, r3, #12
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1eb      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d210      	bcs.n	80015fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 0207 	bic.w	r2, r3, #7
 80015e2:	4922      	ldr	r1, [pc, #136]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e032      	b.n	8001662 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4916      	ldr	r1, [pc, #88]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800163a:	f000 f821 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	490a      	ldr	r1, [pc, #40]	; (8001674 <HAL_RCC_ClockConfig+0x1c8>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1cc>)
 8001654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f8d8 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000
 8001670:	40021000 	.word	0x40021000
 8001674:	08001d2c 	.word	0x08001d2c
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_RCC_GetSysClockFreq+0x94>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d002      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x30>
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d003      	beq.n	80016b6 <HAL_RCC_GetSysClockFreq+0x36>
 80016ae:	e027      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_GetSysClockFreq+0x98>)
 80016b2:	613b      	str	r3, [r7, #16]
      break;
 80016b4:	e027      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d010      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0c5b      	lsrs	r3, r3, #17
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_RCC_GetSysClockFreq+0x98>)
 80016e2:	fb03 f202 	mul.w	r2, r3, r2
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e004      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetSysClockFreq+0x98>)
 8001702:	613b      	str	r3, [r7, #16]
      break;
 8001704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001706:	693b      	ldr	r3, [r7, #16]
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	007a1200 	.word	0x007a1200
 800171c:	08001d44 	.word	0x08001d44
 8001720:	08001d54 	.word	0x08001d54
 8001724:	003d0900 	.word	0x003d0900

08001728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_RCC_GetHCLKFreq+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001740:	f7ff fff2 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	08001d3c 	.word	0x08001d3c

08001764 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	220f      	movs	r2, #15
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_RCC_GetClockConfig+0x58>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_RCC_GetClockConfig+0x58>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_GetClockConfig+0x58>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_RCC_GetClockConfig+0x58>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_GetClockConfig+0x5c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0207 	and.w	r2, r3, #7
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40022000 	.word	0x40022000

080017c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <RCC_Delay+0x34>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <RCC_Delay+0x38>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a5b      	lsrs	r3, r3, #9
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e0:	bf00      	nop
  }
  while (Delay --);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	60fa      	str	r2, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <RCC_Delay+0x1c>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000000 	.word	0x20000000
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e041      	b.n	8001896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f839 	bl	800189e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f000 f9b4 	bl	8001bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e03a      	b.n	800193e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a18      	ldr	r2, [pc, #96]	; (8001948 <HAL_TIM_Base_Start_IT+0x98>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00e      	beq.n	8001908 <HAL_TIM_Base_Start_IT+0x58>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d009      	beq.n	8001908 <HAL_TIM_Base_Start_IT+0x58>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_TIM_Base_Start_IT+0x9c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d004      	beq.n	8001908 <HAL_TIM_Base_Start_IT+0x58>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_TIM_Base_Start_IT+0xa0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d111      	bne.n	800192c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d010      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800192a:	e007      	b.n	800193c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40000400 	.word	0x40000400
 8001950:	40000800 	.word	0x40000800

08001954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d122      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	d11b      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0202 	mvn.w	r2, #2
 8001980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8ed 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 800199c:	e005      	b.n	80019aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8e0 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f8ef 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d122      	bne.n	8001a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d11b      	bne.n	8001a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0204 	mvn.w	r2, #4
 80019d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f8c3 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 80019f0:	e005      	b.n	80019fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f8b6 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8c5 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d122      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d11b      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0208 	mvn.w	r2, #8
 8001a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f899 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 8001a44:	e005      	b.n	8001a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f88c 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f89b 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d122      	bne.n	8001aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d11b      	bne.n	8001aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0210 	mvn.w	r2, #16
 8001a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2208      	movs	r2, #8
 8001a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f86f 	bl	8001b76 <HAL_TIM_IC_CaptureCallback>
 8001a98:	e005      	b.n	8001aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f862 	bl	8001b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f871 	bl	8001b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0201 	mvn.w	r2, #1
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fe62 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	2b80      	cmp	r3, #128	; 0x80
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b80      	cmp	r3, #128	; 0x80
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8bf 	bl	8001c82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	2b40      	cmp	r3, #64	; 0x40
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1c:	2b40      	cmp	r3, #64	; 0x40
 8001b1e:	d107      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f835 	bl	8001b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d10e      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d107      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0220 	mvn.w	r2, #32
 8001b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f88a 	bl	8001c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00b      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d007      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <TIM_Base_SetConfig+0xbc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d007      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <TIM_Base_SetConfig+0xbc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <TIM_Base_SetConfig+0xc0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <TIM_Base_SetConfig+0xb8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d103      	bne.n	8001c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	615a      	str	r2, [r3, #20]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800

08001c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <__libc_init_array>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	2600      	movs	r6, #0
 8001c98:	4d0c      	ldr	r5, [pc, #48]	; (8001ccc <__libc_init_array+0x38>)
 8001c9a:	4c0d      	ldr	r4, [pc, #52]	; (8001cd0 <__libc_init_array+0x3c>)
 8001c9c:	1b64      	subs	r4, r4, r5
 8001c9e:	10a4      	asrs	r4, r4, #2
 8001ca0:	42a6      	cmp	r6, r4
 8001ca2:	d109      	bne.n	8001cb8 <__libc_init_array+0x24>
 8001ca4:	f000 f822 	bl	8001cec <_init>
 8001ca8:	2600      	movs	r6, #0
 8001caa:	4d0a      	ldr	r5, [pc, #40]	; (8001cd4 <__libc_init_array+0x40>)
 8001cac:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <__libc_init_array+0x44>)
 8001cae:	1b64      	subs	r4, r4, r5
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	42a6      	cmp	r6, r4
 8001cb4:	d105      	bne.n	8001cc2 <__libc_init_array+0x2e>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cbc:	4798      	blx	r3
 8001cbe:	3601      	adds	r6, #1
 8001cc0:	e7ee      	b.n	8001ca0 <__libc_init_array+0xc>
 8001cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc6:	4798      	blx	r3
 8001cc8:	3601      	adds	r6, #1
 8001cca:	e7f2      	b.n	8001cb2 <__libc_init_array+0x1e>
 8001ccc:	08001d58 	.word	0x08001d58
 8001cd0:	08001d58 	.word	0x08001d58
 8001cd4:	08001d58 	.word	0x08001d58
 8001cd8:	08001d5c 	.word	0x08001d5c

08001cdc <memset>:
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4402      	add	r2, r0
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <memset+0xa>
 8001ce4:	4770      	bx	lr
 8001ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cea:	e7f9      	b.n	8001ce0 <memset+0x4>

08001cec <_init>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr

08001cf8 <_fini>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr
