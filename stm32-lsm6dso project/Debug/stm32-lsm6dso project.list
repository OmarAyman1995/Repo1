
stm32-lsm6dso project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080074a8  080074a8  000174a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007924  08007924  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007924  08007924  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001dc  08007b08  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08007b08  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001919b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d79  00000000  00000000  000393a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0003c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001718c  00000000  00000000  0003d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127d9  00000000  00000000  00054aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e2df  00000000  00000000  00067285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  000f55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007490 	.word	0x08007490

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007490 	.word	0x08007490

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <lsm6dso_offset>:
extern void platform_delay(uint32_t ms);
extern void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dso_offset(void)
{
 8000f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f48:	b08a      	sub	sp, #40	; 0x28
 8000f4a:	af04      	add	r7, sp, #16
  stmdev_ctx_t dev_ctx;
  /* Example of XL offset to apply to acc. output */
  uint8_t offset[3] = { 0x30, 0x40, 0x7E };
 8000f4c:	4ab9      	ldr	r2, [pc, #740]	; (8001234 <lsm6dso_offset+0x2f0>)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	4611      	mov	r1, r2
 8000f54:	8019      	strh	r1, [r3, #0]
 8000f56:	3302      	adds	r3, #2
 8000f58:	0c12      	lsrs	r2, r2, #16
 8000f5a:	701a      	strb	r2, [r3, #0]
  /* Initialize mems driver interface */
  dev_ctx.write_reg = (stmdev_write_ptr)platform_write;
 8000f5c:	4bb6      	ldr	r3, [pc, #728]	; (8001238 <lsm6dso_offset+0x2f4>)
 8000f5e:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8000f60:	4bb6      	ldr	r3, [pc, #728]	; (800123c <lsm6dso_offset+0x2f8>)
 8000f62:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8000f64:	4bb6      	ldr	r3, [pc, #728]	; (8001240 <lsm6dso_offset+0x2fc>)
 8000f66:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000f68:	4bb6      	ldr	r3, [pc, #728]	; (8001244 <lsm6dso_offset+0x300>)
 8000f6a:	617b      	str	r3, [r7, #20]
  /* Init test platform */
  platform_init();
 8000f6c:	f000 ffc7 	bl	8001efe <platform_init>
  /* Wait sensor boot time */
  platform_delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f000 ffb9 	bl	8001ee8 <platform_delay>
  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	49b3      	ldr	r1, [pc, #716]	; (8001248 <lsm6dso_offset+0x304>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fe08 	bl	8001b92 <lsm6dso_device_id_get>

  if (whoamI != LSM6DSO_ID)
 8000f82:	4bb1      	ldr	r3, [pc, #708]	; (8001248 <lsm6dso_offset+0x304>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b6c      	cmp	r3, #108	; 0x6c
 8000f88:	d000      	beq.n	8000f8c <lsm6dso_offset+0x48>
    while (1);
 8000f8a:	e7fe      	b.n	8000f8a <lsm6dso_offset+0x46>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2101      	movs	r1, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fe0e 	bl	8001bb4 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	49ab      	ldr	r1, [pc, #684]	; (800124c <lsm6dso_offset+0x308>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fe2e 	bl	8001c00 <lsm6dso_reset_get>
  } while (rst);
 8000fa4:	4ba9      	ldr	r3, [pc, #676]	; (800124c <lsm6dso_offset+0x308>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f5      	bne.n	8000f98 <lsm6dso_offset+0x54>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fe9b 	bl	8001cee <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fc18 	bl	80017f4 <lsm6dso_block_data_update_set>
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fc38 	bl	8001840 <lsm6dso_xl_offset_weight_set>
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */
  lsm6dso_xl_usr_offset_x_set(&dev_ctx, &offset[0]);
 8000fd0:	1d3a      	adds	r2, r7, #4
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fca2 	bl	8001922 <lsm6dso_xl_usr_offset_x_set>
  lsm6dso_xl_usr_offset_y_set(&dev_ctx, &offset[1]);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fcab 	bl	8001944 <lsm6dso_xl_usr_offset_y_set>
  lsm6dso_xl_usr_offset_z_set(&dev_ctx, &offset[2]);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	1c9a      	adds	r2, r3, #2
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fcb4 	bl	8001966 <lsm6dso_xl_usr_offset_z_set>
  lsm6dso_xl_usr_offset_set(&dev_ctx, PROPERTY_ENABLE);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2101      	movs	r1, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fcbf 	bl	8001988 <lsm6dso_xl_usr_offset_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f9d1 	bl	80013b8 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f000 faed 	bl	80015fc <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f99f 	bl	800136c <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2106      	movs	r1, #6
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fabb 	bl	80015b0 <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fe1c 	bl	8001c7e <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fdf0 	bl	8001c32 <lsm6dso_xl_filter_lp2_set>

  /* Read samples in polling mode (no int). */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(&dev_ctx, &reg);
 8001052:	1cfa      	adds	r2, r7, #3
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fc16 	bl	800188c <lsm6dso_xl_flag_data_ready_get>

    if (reg) {
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d051      	beq.n	800110a <lsm6dso_offset+0x1c6>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001066:	2206      	movs	r2, #6
 8001068:	2100      	movs	r1, #0
 800106a:	4879      	ldr	r0, [pc, #484]	; (8001250 <lsm6dso_offset+0x30c>)
 800106c:	f003 fb2e 	bl	80046cc <memset>
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4976      	ldr	r1, [pc, #472]	; (8001250 <lsm6dso_offset+0x30c>)
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fd1a 	bl	8001ab0 <lsm6dso_acceleration_raw_get>
      acceleration_mg[0] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
 800107c:	4b74      	ldr	r3, [pc, #464]	; (8001250 <lsm6dso_offset+0x30c>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f92a 	bl	80012dc <lsm6dso_from_fs2_to_mg>
 8001088:	4603      	mov	r3, r0
      acceleration_mg[0] =
 800108a:	4a72      	ldr	r2, [pc, #456]	; (8001254 <lsm6dso_offset+0x310>)
 800108c:	6013      	str	r3, [r2, #0]
      acceleration_mg[1] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
 800108e:	4b70      	ldr	r3, [pc, #448]	; (8001250 <lsm6dso_offset+0x30c>)
 8001090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f921 	bl	80012dc <lsm6dso_from_fs2_to_mg>
 800109a:	4603      	mov	r3, r0
      acceleration_mg[1] =
 800109c:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <lsm6dso_offset+0x310>)
 800109e:	6053      	str	r3, [r2, #4]
      acceleration_mg[2] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
 80010a0:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <lsm6dso_offset+0x30c>)
 80010a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f918 	bl	80012dc <lsm6dso_from_fs2_to_mg>
 80010ac:	4603      	mov	r3, r0
      acceleration_mg[2] =
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <lsm6dso_offset+0x310>)
 80010b0:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010b2:	4b68      	ldr	r3, [pc, #416]	; (8001254 <lsm6dso_offset+0x310>)
 80010b4:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9b6 	bl	8000428 <__aeabi_f2d>
 80010bc:	4680      	mov	r8, r0
 80010be:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010c0:	4b64      	ldr	r3, [pc, #400]	; (8001254 <lsm6dso_offset+0x310>)
 80010c2:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f9af 	bl	8000428 <__aeabi_f2d>
 80010ca:	4604      	mov	r4, r0
 80010cc:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <lsm6dso_offset+0x310>)
 80010d0:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9a8 	bl	8000428 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010e0:	e9cd 4500 	strd	r4, r5, [sp]
 80010e4:	4642      	mov	r2, r8
 80010e6:	464b      	mov	r3, r9
 80010e8:	495b      	ldr	r1, [pc, #364]	; (8001258 <lsm6dso_offset+0x314>)
 80010ea:	485c      	ldr	r0, [pc, #368]	; (800125c <lsm6dso_offset+0x318>)
 80010ec:	f003 ff56 	bl	8004f9c <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80010f0:	485a      	ldr	r0, [pc, #360]	; (800125c <lsm6dso_offset+0x318>)
 80010f2:	f7ff f82d 	bl	8000150 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4857      	ldr	r0, [pc, #348]	; (800125c <lsm6dso_offset+0x318>)
 80010fe:	f000 fedf 	bl	8001ec0 <tx_com>
      platform_delay(500);
 8001102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001106:	f000 feef 	bl	8001ee8 <platform_delay>
    }

    lsm6dso_gy_flag_data_ready_get(&dev_ctx, &reg);
 800110a:	1cfa      	adds	r2, r7, #3
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fbd3 	bl	80018be <lsm6dso_gy_flag_data_ready_get>

    if (reg) {
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d051      	beq.n	80011c2 <lsm6dso_offset+0x27e>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800111e:	2206      	movs	r2, #6
 8001120:	2100      	movs	r1, #0
 8001122:	484f      	ldr	r0, [pc, #316]	; (8001260 <lsm6dso_offset+0x31c>)
 8001124:	f003 fad2 	bl	80046cc <memset>
      lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	494c      	ldr	r1, [pc, #304]	; (8001260 <lsm6dso_offset+0x31c>)
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fc73 	bl	8001a1a <lsm6dso_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[0]);
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <lsm6dso_offset+0x31c>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f8e4 	bl	8001308 <lsm6dso_from_fs2000_to_mdps>
 8001140:	4603      	mov	r3, r0
      angular_rate_mdps[0] =
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <lsm6dso_offset+0x320>)
 8001144:	6013      	str	r3, [r2, #0]
      angular_rate_mdps[1] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[1]);
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <lsm6dso_offset+0x31c>)
 8001148:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f8db 	bl	8001308 <lsm6dso_from_fs2000_to_mdps>
 8001152:	4603      	mov	r3, r0
      angular_rate_mdps[1] =
 8001154:	4a43      	ldr	r2, [pc, #268]	; (8001264 <lsm6dso_offset+0x320>)
 8001156:	6053      	str	r3, [r2, #4]
      angular_rate_mdps[2] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[2]);
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <lsm6dso_offset+0x31c>)
 800115a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f8d2 	bl	8001308 <lsm6dso_from_fs2000_to_mdps>
 8001164:	4603      	mov	r3, r0
      angular_rate_mdps[2] =
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <lsm6dso_offset+0x320>)
 8001168:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <lsm6dso_offset+0x320>)
 800116c:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f95a 	bl	8000428 <__aeabi_f2d>
 8001174:	4680      	mov	r8, r0
 8001176:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <lsm6dso_offset+0x320>)
 800117a:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f953 	bl	8000428 <__aeabi_f2d>
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <lsm6dso_offset+0x320>)
 8001188:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f94c 	bl	8000428 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001198:	e9cd 4500 	strd	r4, r5, [sp]
 800119c:	4642      	mov	r2, r8
 800119e:	464b      	mov	r3, r9
 80011a0:	4931      	ldr	r1, [pc, #196]	; (8001268 <lsm6dso_offset+0x324>)
 80011a2:	482e      	ldr	r0, [pc, #184]	; (800125c <lsm6dso_offset+0x318>)
 80011a4:	f003 fefa 	bl	8004f9c <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <lsm6dso_offset+0x318>)
 80011aa:	f7fe ffd1 	bl	8000150 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	4829      	ldr	r0, [pc, #164]	; (800125c <lsm6dso_offset+0x318>)
 80011b6:	f000 fe83 	bl	8001ec0 <tx_com>
      platform_delay(500);
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f000 fe93 	bl	8001ee8 <platform_delay>
    }

    lsm6dso_temp_flag_data_ready_get(&dev_ctx, &reg);
 80011c2:	1cfa      	adds	r2, r7, #3
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fb90 	bl	80018f0 <lsm6dso_temp_flag_data_ready_get>

    if (reg) {
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d029      	beq.n	800122a <lsm6dso_offset+0x2e6>
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <lsm6dso_offset+0x328>)
 80011d8:	2200      	movs	r2, #0
 80011da:	801a      	strh	r2, [r3, #0]
      /* Read temperature data. */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      lsm6dso_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4922      	ldr	r1, [pc, #136]	; (800126c <lsm6dso_offset+0x328>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fbf6 	bl	80019d4 <lsm6dso_temperature_raw_get>
      temperature_degC = lsm6dso_from_lsb_to_celsius(
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <lsm6dso_offset+0x328>)
 80011ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f8a0 	bl	8001334 <lsm6dso_from_lsb_to_celsius>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <lsm6dso_offset+0x32c>)
 80011f8:	6013      	str	r3, [r2, #0]
                           data_raw_temperature);
      sprintf((char *)tx_buffer,
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <lsm6dso_offset+0x32c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	491a      	ldr	r1, [pc, #104]	; (8001274 <lsm6dso_offset+0x330>)
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <lsm6dso_offset+0x318>)
 800120c:	f003 fec6 	bl	8004f9c <siprintf>
              "Temperature [degC]:%6.2f\r\n", temperature_degC);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <lsm6dso_offset+0x318>)
 8001212:	f7fe ff9d 	bl	8000150 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29b      	uxth	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <lsm6dso_offset+0x318>)
 800121e:	f000 fe4f 	bl	8001ec0 <tx_com>
      platform_delay(500);
 8001222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001226:	f000 fe5f 	bl	8001ee8 <platform_delay>
    }
    tx_com((uint8_t *)"\r\n\r\n\r\n", strlen("\r\n\r\n\r\n"));
 800122a:	2106      	movs	r1, #6
 800122c:	4812      	ldr	r0, [pc, #72]	; (8001278 <lsm6dso_offset+0x334>)
 800122e:	f000 fe47 	bl	8001ec0 <tx_com>
  while (1) {
 8001232:	e70e      	b.n	8001052 <lsm6dso_offset+0x10e>
 8001234:	0800751c 	.word	0x0800751c
 8001238:	08001e4d 	.word	0x08001e4d
 800123c:	08001e87 	.word	0x08001e87
 8001240:	08001ee9 	.word	0x08001ee9
 8001244:	20000610 	.word	0x20000610
 8001248:	20000224 	.word	0x20000224
 800124c:	20000225 	.word	0x20000225
 8001250:	200001f8 	.word	0x200001f8
 8001254:	20000208 	.word	0x20000208
 8001258:	080074a8 	.word	0x080074a8
 800125c:	20000228 	.word	0x20000228
 8001260:	20000200 	.word	0x20000200
 8001264:	20000214 	.word	0x20000214
 8001268:	080074d0 	.word	0x080074d0
 800126c:	20000206 	.word	0x20000206
 8001270:	20000220 	.word	0x20000220
 8001274:	080074f8 	.word	0x080074f8
 8001278:	08007514 	.word	0x08007514

0800127c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	461a      	mov	r2, r3
 8001288:	460b      	mov	r3, r1
 800128a:	72fb      	strb	r3, [r7, #11]
 800128c:	4613      	mov	r3, r2
 800128e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685c      	ldr	r4, [r3, #4]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68d8      	ldr	r0, [r3, #12]
 8001298:	893b      	ldrh	r3, [r7, #8]
 800129a:	7af9      	ldrb	r1, [r7, #11]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	47a0      	blx	r4
 80012a0:	6178      	str	r0, [r7, #20]

  return ret;
 80012a2:	697b      	ldr	r3, [r7, #20]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	461a      	mov	r2, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	72fb      	strb	r3, [r7, #11]
 80012bc:	4613      	mov	r3, r2
 80012be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68d8      	ldr	r0, [r3, #12]
 80012c8:	893b      	ldrh	r3, [r7, #8]
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	47a0      	blx	r4
 80012d0:	6178      	str	r0, [r7, #20]

  return ret;
 80012d2:	697b      	ldr	r3, [r7, #20]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
 // return ((float_t)lsb) * 0.061f;
	return ((float_t)lsb) * 0.000061f;
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fc86 	bl	8000bfc <__aeabi_i2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4904      	ldr	r1, [pc, #16]	; (8001304 <lsm6dso_from_fs2_to_mg+0x28>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fcd5 	bl	8000ca4 <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	387fda40 	.word	0x387fda40

08001308 <lsm6dso_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dso_from_fs2000_to_mdps(int16_t lsb)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fc70 	bl	8000bfc <__aeabi_i2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4904      	ldr	r1, [pc, #16]	; (8001330 <lsm6dso_from_fs2000_to_mdps+0x28>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fcbf 	bl	8000ca4 <__aeabi_fmul>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	428c0000 	.word	0x428c0000

08001334 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc5a 	bl	8000bfc <__aeabi_i2f>
 8001348:	4603      	mov	r3, r0
 800134a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd5c 	bl	8000e0c <__aeabi_fdiv>
 8001354:	4603      	mov	r3, r0
 8001356:	4904      	ldr	r1, [pc, #16]	; (8001368 <lsm6dso_from_lsb_to_celsius+0x34>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fb9b 	bl	8000a94 <__addsf3>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	41c80000 	.word	0x41c80000

0800136c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	2301      	movs	r3, #1
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff7b 	bl	800127c <lsm6dso_read_reg>
 8001386:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	b2da      	uxtb	r2, r3
 8001396:	7a3b      	ldrb	r3, [r7, #8]
 8001398:	f362 0383 	bfi	r3, r2, #2, #2
 800139c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800139e:	f107 0208 	add.w	r2, r7, #8
 80013a2:	2301      	movs	r3, #1
 80013a4:	2110      	movs	r1, #16
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff80 	bl	80012ac <lsm6dso_write_reg>
 80013ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fcd3 	bl	8001d7a <lsm6dso_fsm_enable_get>
 80013d4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 80c4 	bne.w	8001566 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013e6:	7b3b      	ldrb	r3, [r7, #12]
 80013e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013ec:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80013fe:	7b3b      	ldrb	r3, [r7, #12]
 8001400:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001406:	4313      	orrs	r3, r2
 8001408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001412:	4313      	orrs	r3, r2
 8001414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001416:	7b3b      	ldrb	r3, [r7, #12]
 8001418:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800141c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800141e:	4313      	orrs	r3, r2
 8001420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001422:	7b3b      	ldrb	r3, [r7, #12]
 8001424:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800142a:	4313      	orrs	r3, r2
 800142c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001434:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001436:	4313      	orrs	r3, r2
 8001438:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001442:	4313      	orrs	r3, r2
 8001444:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800144c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800144e:	4313      	orrs	r3, r2
 8001450:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001458:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800145a:	4313      	orrs	r3, r2
 800145c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001464:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001466:	4313      	orrs	r3, r2
 8001468:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800146a:	7b7b      	ldrb	r3, [r7, #13]
 800146c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001470:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001472:	4313      	orrs	r3, r2
 8001474:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800147c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800147e:	4313      	orrs	r3, r2
 8001480:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001482:	7b7b      	ldrb	r3, [r7, #13]
 8001484:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001488:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800148a:	4313      	orrs	r3, r2
 800148c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001494:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001496:	4313      	orrs	r3, r2
 8001498:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800149a:	2b01      	cmp	r3, #1
 800149c:	d163      	bne.n	8001566 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800149e:	f107 030b 	add.w	r3, r7, #11
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fc89 	bl	8001dbc <lsm6dso_fsm_data_rate_get>
 80014aa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d159      	bne.n	8001566 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d853      	bhi.n	8001560 <lsm6dso_xl_data_rate_set+0x1a8>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <lsm6dso_xl_data_rate_set+0x108>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014e3 	.word	0x080014e3
 80014c8:	08001501 	.word	0x08001501
 80014cc:	0800152b 	.word	0x0800152b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80014da:	e045      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	75fb      	strb	r3, [r7, #23]
            break;
 80014e0:	e042      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80014e8:	2302      	movs	r3, #2
 80014ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80014ec:	e03c      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80014f4:	2302      	movs	r3, #2
 80014f6:	75fb      	strb	r3, [r7, #23]
            break;
 80014f8:	e036      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	75fb      	strb	r3, [r7, #23]
            break;
 80014fe:	e033      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001506:	2303      	movs	r3, #3
 8001508:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800150a:	e02d      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d102      	bne.n	8001518 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001512:	2303      	movs	r3, #3
 8001514:	75fb      	strb	r3, [r7, #23]
            break;
 8001516:	e027      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d102      	bne.n	8001524 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800151e:	2303      	movs	r3, #3
 8001520:	75fb      	strb	r3, [r7, #23]
            break;
 8001522:	e021      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	75fb      	strb	r3, [r7, #23]
            break;
 8001528:	e01e      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001530:	2304      	movs	r3, #4
 8001532:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001534:	e018      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800153c:	2304      	movs	r3, #4
 800153e:	75fb      	strb	r3, [r7, #23]
            break;
 8001540:	e012      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d102      	bne.n	800154e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001548:	2304      	movs	r3, #4
 800154a:	75fb      	strb	r3, [r7, #23]
            break;
 800154c:	e00c      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d102      	bne.n	800155a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001554:	2304      	movs	r3, #4
 8001556:	75fb      	strb	r3, [r7, #23]
            break;
 8001558:	e006      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	75fb      	strb	r3, [r7, #23]
            break;
 800155e:	e003      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	75fb      	strb	r3, [r7, #23]
            break;
 8001564:	e000      	b.n	8001568 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8001566:	bf00      	nop
    }
  }

  if (ret == 0)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	2301      	movs	r3, #1
 8001574:	2110      	movs	r1, #16
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe80 	bl	800127c <lsm6dso_read_reg>
 800157c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10f      	bne.n	80015a4 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	b2da      	uxtb	r2, r3
 800158c:	7a3b      	ldrb	r3, [r7, #8]
 800158e:	f362 1307 	bfi	r3, r2, #4, #4
 8001592:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	2301      	movs	r3, #1
 800159a:	2110      	movs	r1, #16
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe85 	bl	80012ac <lsm6dso_write_reg>
 80015a2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80015a4:	693b      	ldr	r3, [r7, #16]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80015bc:	f107 0208 	add.w	r2, r7, #8
 80015c0:	2301      	movs	r3, #1
 80015c2:	2111      	movs	r1, #17
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe59 	bl	800127c <lsm6dso_read_reg>
 80015ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10f      	bne.n	80015f2 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7a3b      	ldrb	r3, [r7, #8]
 80015dc:	f362 0343 	bfi	r3, r2, #1, #3
 80015e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	2301      	movs	r3, #1
 80015e8:	2111      	movs	r1, #17
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fe5e 	bl	80012ac <lsm6dso_write_reg>
 80015f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fbb1 	bl	8001d7a <lsm6dso_fsm_enable_get>
 8001618:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 80c4 	bne.w	80017aa <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001630:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001632:	4313      	orrs	r3, r2
 8001634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800163c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800163e:	4313      	orrs	r3, r2
 8001640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001648:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800164a:	4313      	orrs	r3, r2
 800164c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800164e:	7b3b      	ldrb	r3, [r7, #12]
 8001650:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001656:	4313      	orrs	r3, r2
 8001658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001660:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001662:	4313      	orrs	r3, r2
 8001664:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800166c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800166e:	4313      	orrs	r3, r2
 8001670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001678:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800167a:	4313      	orrs	r3, r2
 800167c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001686:	4313      	orrs	r3, r2
 8001688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800168a:	7b7b      	ldrb	r3, [r7, #13]
 800168c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001690:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001692:	4313      	orrs	r3, r2
 8001694:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800169c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800169e:	4313      	orrs	r3, r2
 80016a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80016ae:	7b7b      	ldrb	r3, [r7, #13]
 80016b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80016ba:	7b7b      	ldrb	r3, [r7, #13]
 80016bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80016d2:	7b7b      	ldrb	r3, [r7, #13]
 80016d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d163      	bne.n	80017aa <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80016e2:	f107 030b 	add.w	r3, r7, #11
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fb67 	bl	8001dbc <lsm6dso_fsm_data_rate_get>
 80016ee:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d159      	bne.n	80017aa <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d853      	bhi.n	80017a4 <lsm6dso_gy_data_rate_set+0x1a8>
 80016fc:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <lsm6dso_gy_data_rate_set+0x108>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001715 	.word	0x08001715
 8001708:	08001727 	.word	0x08001727
 800170c:	08001745 	.word	0x08001745
 8001710:	0800176f 	.word	0x0800176f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800171e:	e045      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	75fb      	strb	r3, [r7, #23]
            break;
 8001724:	e042      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 800172c:	2302      	movs	r3, #2
 800172e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001730:	e03c      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8001738:	2302      	movs	r3, #2
 800173a:	75fb      	strb	r3, [r7, #23]
            break;
 800173c:	e036      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	75fb      	strb	r3, [r7, #23]
            break;
 8001742:	e033      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800174a:	2303      	movs	r3, #3
 800174c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800174e:	e02d      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8001756:	2303      	movs	r3, #3
 8001758:	75fb      	strb	r3, [r7, #23]
            break;
 800175a:	e027      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d102      	bne.n	8001768 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8001762:	2303      	movs	r3, #3
 8001764:	75fb      	strb	r3, [r7, #23]
            break;
 8001766:	e021      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	75fb      	strb	r3, [r7, #23]
            break;
 800176c:	e01e      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001774:	2304      	movs	r3, #4
 8001776:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001778:	e018      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001780:	2304      	movs	r3, #4
 8001782:	75fb      	strb	r3, [r7, #23]
            break;
 8001784:	e012      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d102      	bne.n	8001792 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800178c:	2304      	movs	r3, #4
 800178e:	75fb      	strb	r3, [r7, #23]
            break;
 8001790:	e00c      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d102      	bne.n	800179e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001798:	2304      	movs	r3, #4
 800179a:	75fb      	strb	r3, [r7, #23]
            break;
 800179c:	e006      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	75fb      	strb	r3, [r7, #23]
            break;
 80017a2:	e003      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	75fb      	strb	r3, [r7, #23]
            break;
 80017a8:	e000      	b.n	80017ac <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80017aa:	bf00      	nop
    }
  }

  if (ret == 0)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80017b2:	f107 0208 	add.w	r2, r7, #8
 80017b6:	2301      	movs	r3, #1
 80017b8:	2111      	movs	r1, #17
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fd5e 	bl	800127c <lsm6dso_read_reg>
 80017c0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	f362 1307 	bfi	r3, r2, #4, #4
 80017d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	2301      	movs	r3, #1
 80017de:	2111      	movs	r1, #17
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fd63 	bl	80012ac <lsm6dso_write_reg>
 80017e6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80017e8:	693b      	ldr	r3, [r7, #16]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop

080017f4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	2301      	movs	r3, #1
 8001806:	2112      	movs	r1, #18
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fd37 	bl	800127c <lsm6dso_read_reg>
 800180e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	7a3b      	ldrb	r3, [r7, #8]
 8001820:	f362 1386 	bfi	r3, r2, #6, #1
 8001824:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	2301      	movs	r3, #1
 800182c:	2112      	movs	r1, #18
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fd3c 	bl	80012ac <lsm6dso_write_reg>
 8001834:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
 800184c:	f107 0208 	add.w	r2, r7, #8
 8001850:	2301      	movs	r3, #1
 8001852:	2115      	movs	r1, #21
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fd11 	bl	800127c <lsm6dso_read_reg>
 800185a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <lsm6dso_xl_offset_weight_set+0x42>
  {
    reg.usr_off_w = (uint8_t)val;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	7a3b      	ldrb	r3, [r7, #8]
 800186c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001870:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
 8001872:	f107 0208 	add.w	r2, r7, #8
 8001876:	2301      	movs	r3, #1
 8001878:	2115      	movs	r1, #21
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fd16 	bl	80012ac <lsm6dso_write_reg>
 8001880:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 8001896:	f107 0208 	add.w	r2, r7, #8
 800189a:	2301      	movs	r3, #1
 800189c:	211e      	movs	r1, #30
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fcec 	bl	800127c <lsm6dso_read_reg>
 80018a4:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 80018a6:	7a3b      	ldrb	r3, [r7, #8]
 80018a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	701a      	strb	r2, [r3, #0]

  return ret;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <lsm6dso_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80018c8:	f107 0208 	add.w	r2, r7, #8
 80018cc:	2301      	movs	r3, #1
 80018ce:	211e      	movs	r1, #30
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fcd3 	bl	800127c <lsm6dso_read_reg>
 80018d6:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 80018d8:	7a3b      	ldrb	r3, [r7, #8]
 80018da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	701a      	strb	r2, [r3, #0]

  return ret;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <lsm6dso_temp_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80018fa:	f107 0208 	add.w	r2, r7, #8
 80018fe:	2301      	movs	r3, #1
 8001900:	211e      	movs	r1, #30
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fcba 	bl	800127c <lsm6dso_read_reg>
 8001908:	60f8      	str	r0, [r7, #12]
  *val = reg.tda;
 800190a:	7a3b      	ldrb	r3, [r7, #8]
 800190c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	701a      	strb	r2, [r3, #0]

  return ret;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <lsm6dso_xl_usr_offset_x_set>:
  * @param  buff     buffer that contains data to write
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_usr_offset_x_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_write_reg(ctx, LSM6DSO_X_OFS_USR, buff, 1);
 800192c:	2301      	movs	r3, #1
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	2173      	movs	r1, #115	; 0x73
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fcba 	bl	80012ac <lsm6dso_write_reg>
 8001938:	60f8      	str	r0, [r7, #12]

  return ret;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <lsm6dso_xl_usr_offset_y_set>:
  * @param  buff     buffer that contains data to write
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_usr_offset_y_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_write_reg(ctx, LSM6DSO_Y_OFS_USR, buff, 1);
 800194e:	2301      	movs	r3, #1
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	2174      	movs	r1, #116	; 0x74
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fca9 	bl	80012ac <lsm6dso_write_reg>
 800195a:	60f8      	str	r0, [r7, #12]

  return ret;
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <lsm6dso_xl_usr_offset_z_set>:
  * @param  buff     buffer that contains data to write
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_usr_offset_z_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_write_reg(ctx, LSM6DSO_Z_OFS_USR, buff, 1);
 8001970:	2301      	movs	r3, #1
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	2175      	movs	r1, #117	; 0x75
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fc98 	bl	80012ac <lsm6dso_write_reg>
 800197c:	60f8      	str	r0, [r7, #12]

  return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <lsm6dso_xl_usr_offset_set>:
  * @param  val      change the values of usr_off_on_out in reg CTRL7_G
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_usr_offset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl7_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL7_G, (uint8_t *)&reg, 1);
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	2301      	movs	r3, #1
 800199a:	2116      	movs	r1, #22
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fc6d 	bl	800127c <lsm6dso_read_reg>
 80019a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <lsm6dso_xl_usr_offset_set+0x42>
  {
    reg.usr_off_on_out = val;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	7a3b      	ldrb	r3, [r7, #8]
 80019b4:	f362 0341 	bfi	r3, r2, #1, #1
 80019b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL7_G, (uint8_t *)&reg, 1);
 80019ba:	f107 0208 	add.w	r2, r7, #8
 80019be:	2301      	movs	r3, #1
 80019c0:	2116      	movs	r1, #22
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fc72 	bl	80012ac <lsm6dso_write_reg>
 80019c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <lsm6dso_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUT_TEMP_L, buff, 2);
 80019de:	f107 0208 	add.w	r2, r7, #8
 80019e2:	2302      	movs	r3, #2
 80019e4:	2120      	movs	r1, #32
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fc48 	bl	800127c <lsm6dso_read_reg>
 80019ec:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80019ee:	7a7b      	ldrb	r3, [r7, #9]
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	7a3b      	ldrb	r3, [r7, #8]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	2306      	movs	r3, #6
 8001a2a:	2122      	movs	r1, #34	; 0x22
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fc25 	bl	800127c <lsm6dso_read_reg>
 8001a32:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	b212      	sxth	r2, r2
 8001a5e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3302      	adds	r3, #2
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	b212      	sxth	r2, r2
 8001a7c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001a7e:	7c7a      	ldrb	r2, [r7, #17]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3304      	adds	r3, #4
 8001a84:	b212      	sxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	7c3b      	ldrb	r3, [r7, #16]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	b212      	sxth	r2, r2
 8001aa4:	801a      	strh	r2, [r3, #0]

  return ret;
 8001aa6:	697b      	ldr	r3, [r7, #20]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8001aba:	f107 020c 	add.w	r2, r7, #12
 8001abe:	2306      	movs	r3, #6
 8001ac0:	2128      	movs	r1, #40	; 0x28
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fbda 	bl	800127c <lsm6dso_read_reg>
 8001ac8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	7b3b      	ldrb	r3, [r7, #12]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	3302      	adds	r3, #2
 8001af2:	b212      	sxth	r2, r2
 8001af4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3302      	adds	r3, #2
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	b212      	sxth	r2, r2
 8001b12:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b14:	7c7a      	ldrb	r2, [r7, #17]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	b212      	sxth	r2, r2
 8001b1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	3304      	adds	r3, #4
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	7c3b      	ldrb	r3, [r7, #16]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3304      	adds	r3, #4
 8001b38:	b212      	sxth	r2, r2
 8001b3a:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b3c:	697b      	ldr	r3, [r7, #20]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8001b52:	f107 0208 	add.w	r2, r7, #8
 8001b56:	2301      	movs	r3, #1
 8001b58:	2101      	movs	r1, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fb8e 	bl	800127c <lsm6dso_read_reg>
 8001b60:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10f      	bne.n	8001b88 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	7a3b      	ldrb	r3, [r7, #8]
 8001b72:	f362 1387 	bfi	r3, r2, #6, #2
 8001b76:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8001b78:	f107 0208 	add.w	r2, r7, #8
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	2101      	movs	r1, #1
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fb93 	bl	80012ac <lsm6dso_write_reg>
 8001b86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fb6a 	bl	800127c <lsm6dso_read_reg>
 8001ba8:	60f8      	str	r0, [r7, #12]

  return ret;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2112      	movs	r1, #18
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fb57 	bl	800127c <lsm6dso_read_reg>
 8001bce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	f362 0300 	bfi	r3, r2, #0, #1
 8001be4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001be6:	f107 0208 	add.w	r2, r7, #8
 8001bea:	2301      	movs	r3, #1
 8001bec:	2112      	movs	r1, #18
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fb5c 	bl	80012ac <lsm6dso_write_reg>
 8001bf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001c0a:	f107 0208 	add.w	r2, r7, #8
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2112      	movs	r1, #18
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fb32 	bl	800127c <lsm6dso_read_reg>
 8001c18:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	2301      	movs	r3, #1
 8001c44:	2110      	movs	r1, #16
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fb18 	bl	800127c <lsm6dso_read_reg>
 8001c4c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <lsm6dso_xl_filter_lp2_set+0x42>
  {
    reg.lpf2_xl_en = val;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	7a3b      	ldrb	r3, [r7, #8]
 8001c5e:	f362 0341 	bfi	r3, r2, #1, #1
 8001c62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001c64:	f107 0208 	add.w	r2, r7, #8
 8001c68:	2301      	movs	r3, #1
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fb1d 	bl	80012ac <lsm6dso_write_reg>
 8001c72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c74:	68fb      	ldr	r3, [r7, #12]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
 8001c8a:	f107 0208 	add.w	r2, r7, #8
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2117      	movs	r1, #23
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff faf2 	bl	800127c <lsm6dso_read_reg>
 8001c98:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d121      	bne.n	8001ce4 <lsm6dso_xl_hp_path_on_out_set+0x66>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	7a3b      	ldrb	r3, [r7, #8]
 8001cac:	f362 0382 	bfi	r3, r2, #2, #1
 8001cb0:	723b      	strb	r3, [r7, #8]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7a3b      	ldrb	r3, [r7, #8]
 8001cbe:	f362 1304 	bfi	r3, r2, #4, #1
 8001cc2:	723b      	strb	r3, [r7, #8]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	f362 1347 	bfi	r3, r2, #5, #3
 8001cd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2117      	movs	r1, #23
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fae5 	bl	80012ac <lsm6dso_write_reg>
 8001ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2118      	movs	r1, #24
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff faba 	bl	800127c <lsm6dso_read_reg>
 8001d08:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d111      	bne.n	8001d34 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	09db      	lsrs	r3, r3, #7
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	f362 0341 	bfi	r3, r2, #1, #1
 8001d22:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001d24:	f107 020c 	add.w	r2, r7, #12
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2118      	movs	r1, #24
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fabd 	bl	80012ac <lsm6dso_write_reg>
 8001d32:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001d3a:	f107 0210 	add.w	r2, r7, #16
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2162      	movs	r1, #98	; 0x62
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fa9a 	bl	800127c <lsm6dso_read_reg>
 8001d48:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	7c3b      	ldrb	r3, [r7, #16]
 8001d5a:	f362 03c4 	bfi	r3, r2, #3, #2
 8001d5e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001d60:	f107 0210 	add.w	r2, r7, #16
 8001d64:	2301      	movs	r3, #1
 8001d66:	2162      	movs	r1, #98	; 0x62
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fa9f 	bl	80012ac <lsm6dso_write_reg>
 8001d6e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001d70:	697b      	ldr	r3, [r7, #20]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001d84:	2102      	movs	r1, #2
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fedd 	bl	8001b46 <lsm6dso_mem_bank_set>
 8001d8c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8001d94:	2302      	movs	r3, #2
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	2146      	movs	r1, #70	; 0x46
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fa6e 	bl	800127c <lsm6dso_read_reg>
 8001da0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001da8:	2100      	movs	r1, #0
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fecb 	bl	8001b46 <lsm6dso_mem_bank_set>
 8001db0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff febc 	bl	8001b46 <lsm6dso_mem_bank_set>
 8001dce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8001dd6:	f107 0208 	add.w	r2, r7, #8
 8001dda:	2301      	movs	r3, #1
 8001ddc:	215f      	movs	r1, #95	; 0x5f
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fa4c 	bl	800127c <lsm6dso_read_reg>
 8001de4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12a      	bne.n	8001e42 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8001dec:	7a3b      	ldrb	r3, [r7, #8]
 8001dee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d81b      	bhi.n	8001e30 <lsm6dso_fsm_data_rate_get+0x74>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <lsm6dso_fsm_data_rate_get+0x44>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e19 	.word	0x08001e19
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e29 	.word	0x08001e29
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
        break;
 8001e16:	e00f      	b.n	8001e38 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
        break;
 8001e1e:	e00b      	b.n	8001e38 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
        break;
 8001e26:	e007      	b.n	8001e38 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	701a      	strb	r2, [r3, #0]
        break;
 8001e2e:	e003      	b.n	8001e38 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
        break;
 8001e36:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fe83 	bl	8001b46 <lsm6dso_mem_bank_set>
 8001e40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
 int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	72fb      	strb	r3, [r7, #11]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg,
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	893b      	ldrh	r3, [r7, #8]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2301      	movs	r3, #1
 8001e74:	21d7      	movs	r1, #215	; 0xd7
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 ff08 	bl	8002c8c <HAL_I2C_Mem_Write>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSO_I2C_ADD_H & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
 int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b088      	sub	sp, #32
 8001e8a:	af04      	add	r7, sp, #16
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	460b      	mov	r3, r1
 8001e94:	72fb      	strb	r3, [r7, #11]
 8001e96:	4613      	mov	r3, r2
 8001e98:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg,
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	893b      	ldrh	r3, [r7, #8]
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2301      	movs	r3, #1
 8001eae:	21d7      	movs	r1, #215	; 0xd7
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 ffe5 	bl	8002e80 <HAL_I2C_Mem_Read>
  HAL_SPI_Receive(handle, bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSO_I2C_ADD_H & 0xFE, reg, bufp, len);
#endif
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
 void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
#if defined(NUCLEO_F411RE)
  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 8001ecc:	887a      	ldrh	r2, [r7, #2]
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <tx_com+0x24>)
 8001ed6:	f002 fa4f 	bl	8004378 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000664 	.word	0x20000664

08001ee8 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
 void platform_delay(uint32_t ms)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F411RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fafb 	bl	80024ec <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
 void platform_init(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001f0e:	f000 fa8b 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f12:	f000 f809 	bl	8001f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f16:	f000 f89f 	bl	8002058 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f1a:	f000 f845 	bl	8001fa8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f1e:	f000 f871 	bl	8002004 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //lsm6dso_orientation();
	 // lsm6dso_fsm();
	  lsm6dso_offset();
 8001f22:	f7ff f80f 	bl	8000f44 <lsm6dso_offset>
 8001f26:	e7fc      	b.n	8001f22 <main+0x18>

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b090      	sub	sp, #64	; 0x40
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	2228      	movs	r2, #40	; 0x28
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fbc8 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f52:	2310      	movs	r3, #16
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f56:	2302      	movs	r3, #2
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001f5e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fda5 	bl	8003ab8 <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001f74:	f000 f892 	bl	800209c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 f813 	bl	8003fbc <HAL_RCC_ClockConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001f9c:	f000 f87e 	bl	800209c <Error_Handler>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3740      	adds	r7, #64	; 0x40
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <MX_I2C1_Init+0x54>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_I2C1_Init+0x58>)
 8001fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_I2C1_Init+0x50>)
 8001fe6:	f000 fd0d 	bl	8002a04 <HAL_I2C_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ff0:	f000 f854 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000610 	.word	0x20000610
 8001ffc:	40005400 	.word	0x40005400
 8002000:	00061a80 	.word	0x00061a80

08002004 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <MX_USART1_UART_Init+0x50>)
 800200c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800203c:	f002 f94c 	bl	80042d8 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002046:	f000 f829 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000664 	.word	0x20000664
 8002054:	40013800 	.word	0x40013800

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_GPIO_Init+0x40>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <MX_GPIO_Init+0x40>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_GPIO_Init+0x40>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_GPIO_Init+0x40>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <MX_GPIO_Init+0x40>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6193      	str	r3, [r2, #24]
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <MX_GPIO_Init+0x40>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
}
 80020a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <Error_Handler+0x8>
	...

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_MspInit+0x40>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_MspInit+0x40>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_MspInit+0x40>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_MspInit+0x40>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_MspInit+0x40>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_MspInit+0x40>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_I2C_MspInit+0x70>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d123      	bne.n	8002154 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_I2C_MspInit+0x74>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002128:	2312      	movs	r3, #18
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <HAL_I2C_MspInit+0x78>)
 8002138:	f000 fae0 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_I2C_MspInit+0x74>)
 8002142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002146:	61d3      	str	r3, [r2, #28]
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_I2C_MspInit+0x74>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40005400 	.word	0x40005400
 8002160:	40021000 	.word	0x40021000
 8002164:	40010c00 	.word	0x40010c00

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_UART_MspInit+0x8c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d131      	bne.n	80021ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_UART_MspInit+0x90>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_UART_MspInit+0x90>)
 800218e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_UART_MspInit+0x90>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_UART_MspInit+0x90>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_UART_MspInit+0x90>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_UART_MspInit+0x90>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <HAL_UART_MspInit+0x94>)
 80021ce:	f000 fa95 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4619      	mov	r1, r3
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_UART_MspInit+0x94>)
 80021e8:	f000 fa88 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010800 	.word	0x40010800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 f935 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f002 fa07 	bl	8004678 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
  }

  return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
  }
  return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002328:	605a      	str	r2, [r3, #4]
  return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <_isatty>:

int _isatty(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
	...

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f002 f970 	bl	8004678 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005000 	.word	0x20005000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	200006ac 	.word	0x200006ac
 80023cc:	200006c8 	.word	0x200006c8

080023d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023dc:	f7ff fff8 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023e2:	490c      	ldr	r1, [pc, #48]	; (8002414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023f8:	4c09      	ldr	r4, [pc, #36]	; (8002420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f002 f93d 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800240a:	f7ff fd7e 	bl	8001f0a <main>
  bx lr
 800240e:	4770      	bx	lr
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002418:	0800792c 	.word	0x0800792c
  ldr r2, =_sbss
 800241c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002420:	200006c4 	.word	0x200006c4

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x28>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x28>)
 8002432:	f043 0310 	orr.w	r3, r3, #16
 8002436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f92b 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	200f      	movs	r0, #15
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fe30 	bl	80020a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f935 	bl	80026e2 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f90b 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_IncTick+0x20>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000008 	.word	0x20000008
 80024d4:	200006b0 	.word	0x200006b0

080024d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	200006b0 	.word	0x200006b0

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff90 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff49 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff5e 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff90 	bl	80025ec <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5f 	bl	8002598 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffb0 	bl	8002650 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b08b      	sub	sp, #44	; 0x2c
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	e169      	b.n	80029e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002710:	2201      	movs	r2, #1
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8158 	bne.w	80029de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a9a      	ldr	r2, [pc, #616]	; (800299c <HAL_GPIO_Init+0x2a0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d05e      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002738:	4a98      	ldr	r2, [pc, #608]	; (800299c <HAL_GPIO_Init+0x2a0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d875      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800273e:	4a98      	ldr	r2, [pc, #608]	; (80029a0 <HAL_GPIO_Init+0x2a4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d058      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002744:	4a96      	ldr	r2, [pc, #600]	; (80029a0 <HAL_GPIO_Init+0x2a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d86f      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800274a:	4a96      	ldr	r2, [pc, #600]	; (80029a4 <HAL_GPIO_Init+0x2a8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d052      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002750:	4a94      	ldr	r2, [pc, #592]	; (80029a4 <HAL_GPIO_Init+0x2a8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d869      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002756:	4a94      	ldr	r2, [pc, #592]	; (80029a8 <HAL_GPIO_Init+0x2ac>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d04c      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 800275c:	4a92      	ldr	r2, [pc, #584]	; (80029a8 <HAL_GPIO_Init+0x2ac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d863      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002762:	4a92      	ldr	r2, [pc, #584]	; (80029ac <HAL_GPIO_Init+0x2b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d046      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002768:	4a90      	ldr	r2, [pc, #576]	; (80029ac <HAL_GPIO_Init+0x2b0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d85d      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800276e:	2b12      	cmp	r3, #18
 8002770:	d82a      	bhi.n	80027c8 <HAL_GPIO_Init+0xcc>
 8002772:	2b12      	cmp	r3, #18
 8002774:	d859      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_GPIO_Init+0x80>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080027e3 	.word	0x080027e3
 8002788:	08002825 	.word	0x08002825
 800278c:	0800282b 	.word	0x0800282b
 8002790:	0800282b 	.word	0x0800282b
 8002794:	0800282b 	.word	0x0800282b
 8002798:	0800282b 	.word	0x0800282b
 800279c:	0800282b 	.word	0x0800282b
 80027a0:	0800282b 	.word	0x0800282b
 80027a4:	0800282b 	.word	0x0800282b
 80027a8:	0800282b 	.word	0x0800282b
 80027ac:	0800282b 	.word	0x0800282b
 80027b0:	0800282b 	.word	0x0800282b
 80027b4:	0800282b 	.word	0x0800282b
 80027b8:	0800282b 	.word	0x0800282b
 80027bc:	0800282b 	.word	0x0800282b
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027ed 	.word	0x080027ed
 80027c8:	4a79      	ldr	r2, [pc, #484]	; (80029b0 <HAL_GPIO_Init+0x2b4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ce:	e02c      	b.n	800282a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e029      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	3304      	adds	r3, #4
 80027de:	623b      	str	r3, [r7, #32]
          break;
 80027e0:	e024      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	3308      	adds	r3, #8
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e01f      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	330c      	adds	r3, #12
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e01a      	b.n	800282c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027fe:	2304      	movs	r3, #4
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e013      	b.n	800282c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800280c:	2308      	movs	r3, #8
 800280e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	611a      	str	r2, [r3, #16]
          break;
 8002816:	e009      	b.n	800282c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002818:	2308      	movs	r3, #8
 800281a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	615a      	str	r2, [r3, #20]
          break;
 8002822:	e003      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
          break;
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x130>
          break;
 800282a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d801      	bhi.n	8002836 <HAL_GPIO_Init+0x13a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e001      	b.n	800283a <HAL_GPIO_Init+0x13e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d802      	bhi.n	8002848 <HAL_GPIO_Init+0x14c>
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_Init+0x152>
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	3b08      	subs	r3, #8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	210f      	movs	r1, #15
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80b1 	beq.w	80029de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a4c      	ldr	r2, [pc, #304]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002894:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a40      	ldr	r2, [pc, #256]	; (80029bc <HAL_GPIO_Init+0x2c0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_GPIO_Init+0x1ec>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <HAL_GPIO_Init+0x2c4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_GPIO_Init+0x1e8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <HAL_GPIO_Init+0x2c8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <HAL_GPIO_Init+0x1e4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_GPIO_Init+0x1e0>
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028dc:	2304      	movs	r3, #4
 80028de:	e004      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e8:	2300      	movs	r3, #0
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	f002 0203 	and.w	r2, r2, #3
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	4093      	lsls	r3, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028fa:	492f      	ldr	r1, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	492c      	ldr	r1, [pc, #176]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	4928      	ldr	r1, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800292c:	4013      	ands	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4922      	ldr	r1, [pc, #136]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	43db      	mvns	r3, r3
 8002952:	491e      	ldr	r1, [pc, #120]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002954:	4013      	ands	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4918      	ldr	r1, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	43db      	mvns	r3, r3
 800297a:	4914      	ldr	r1, [pc, #80]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800297c:	4013      	ands	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d021      	beq.n	80029d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	e021      	b.n	80029de <HAL_GPIO_Init+0x2e2>
 800299a:	bf00      	nop
 800299c:	10320000 	.word	0x10320000
 80029a0:	10310000 	.word	0x10310000
 80029a4:	10220000 	.word	0x10220000
 80029a8:	10210000 	.word	0x10210000
 80029ac:	10120000 	.word	0x10120000
 80029b0:	10110000 	.word	0x10110000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40010800 	.word	0x40010800
 80029c0:	40010c00 	.word	0x40010c00
 80029c4:	40011000 	.word	0x40011000
 80029c8:	40011400 	.word	0x40011400
 80029cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4909      	ldr	r1, [pc, #36]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029da:	4013      	ands	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f47f ae8e 	bne.w	8002710 <HAL_GPIO_Init+0x14>
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e12b      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fb5e 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a68:	f001 fbf0 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d807      	bhi.n	8002a88 <HAL_I2C_Init+0x84>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <HAL_I2C_Init+0x278>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e006      	b.n	8002a96 <HAL_I2C_Init+0x92>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <HAL_I2C_Init+0x27c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0e7      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a78      	ldr	r2, [pc, #480]	; (8002c84 <HAL_I2C_Init+0x280>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_I2C_Init+0xd4>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e009      	b.n	8002aec <HAL_I2C_Init+0xe8>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_I2C_Init+0x284>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	495c      	ldr	r1, [pc, #368]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d819      	bhi.n	8002b40 <HAL_I2C_Init+0x13c>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e59      	subs	r1, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b20:	400b      	ands	r3, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_I2C_Init+0x138>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e59      	subs	r1, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	e051      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e04f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_I2C_Init+0x168>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e012      	b.n	8002b92 <HAL_I2C_Init+0x18e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x196>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e022      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_I2C_Init+0x1bc>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e58      	subs	r0, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	0099      	lsls	r1, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6911      	ldr	r1, [r2, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	000186a0 	.word	0x000186a0
 8002c7c:	001e847f 	.word	0x001e847f
 8002c80:	003d08ff 	.word	0x003d08ff
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca6:	f7ff fc17 	bl	80024d8 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	f040 80d9 	bne.w	8002e6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2319      	movs	r3, #25
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	496d      	ldr	r1, [pc, #436]	; (8002e78 <HAL_I2C_Mem_Write+0x1ec>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fcc1 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e0cc      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Mem_Write+0x56>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0c5      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2221      	movs	r2, #33	; 0x21
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_I2C_Mem_Write+0x1f0>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d4a:	88f8      	ldrh	r0, [r7, #6]
 8002d4c:	893a      	ldrh	r2, [r7, #8]
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 faf8 	bl	8003350 <I2C_RequestMemoryWrite>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d052      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e081      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fd86 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d107      	bne.n	8002d92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06b      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d11b      	bne.n	8002e0c <HAL_I2C_Mem_Write+0x180>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d017      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1aa      	bne.n	8002d6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fd79 	bl	8003910 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e016      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000

08002e80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	460b      	mov	r3, r1
 8002e94:	813b      	strh	r3, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e9e:	f7ff fb1b 	bl	80024d8 <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	f040 8244 	bne.w	800333a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2319      	movs	r3, #25
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4982      	ldr	r1, [pc, #520]	; (80030c4 <HAL_I2C_Mem_Read+0x244>)
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fbc5 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e237      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Mem_Read+0x5a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e230      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d007      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2222      	movs	r2, #34	; 0x22
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a62      	ldr	r2, [pc, #392]	; (80030c8 <HAL_I2C_Mem_Read+0x248>)
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f42:	88f8      	ldrh	r0, [r7, #6]
 8002f44:	893a      	ldrh	r2, [r7, #8]
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4603      	mov	r3, r0
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa92 	bl	800347c <I2C_RequestMemoryRead>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1ec      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d113      	bne.n	8002f92 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e1c0      	b.n	8003314 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11e      	bne.n	8002fd8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002faa:	b672      	cpsid	i
}
 8002fac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fd4:	b662      	cpsie	i
}
 8002fd6:	e035      	b.n	8003044 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11e      	bne.n	800301e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff0:	b672      	cpsid	i
}
 8002ff2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800301a:	b662      	cpsie	i
}
 800301c:	e012      	b.n	8003044 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800302c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003044:	e166      	b.n	8003314 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	2b03      	cmp	r3, #3
 800304c:	f200 811f 	bhi.w	800328e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b01      	cmp	r3, #1
 8003056:	d123      	bne.n	80030a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fc9f 	bl	80039a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e167      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800309e:	e139      	b.n	8003314 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d152      	bne.n	800314e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	2200      	movs	r2, #0
 80030b0:	4906      	ldr	r1, [pc, #24]	; (80030cc <HAL_I2C_Mem_Read+0x24c>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 faca 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e13c      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
 80030c2:	bf00      	nop
 80030c4:	00100002 	.word	0x00100002
 80030c8:	ffff0000 	.word	0xffff0000
 80030cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030d0:	b672      	cpsid	i
}
 80030d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003116:	b662      	cpsie	i
}
 8003118:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314c:	e0e2      	b.n	8003314 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	2200      	movs	r2, #0
 8003156:	497b      	ldr	r1, [pc, #492]	; (8003344 <HAL_I2C_Mem_Read+0x4c4>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fa77 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0e9      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ae:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_I2C_Mem_Read+0x4c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	08db      	lsrs	r3, r3, #3
 80031b4:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_I2C_Mem_Read+0x4cc>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a1a      	lsrs	r2, r3, #8
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00da      	lsls	r2, r3, #3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d118      	bne.n	8003206 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80031f6:	b662      	cpsie	i
}
 80031f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e09a      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d1d9      	bne.n	80031c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003256:	b662      	cpsie	i
}
 8003258:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800328c:	e042      	b.n	8003314 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fb84 	bl	80039a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e04c      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d118      	bne.n	8003314 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae94 	bne.w	8003046 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00010004 	.word	0x00010004
 8003348:	20000000 	.word	0x20000000
 800334c:	14f8b589 	.word	0x14f8b589

08003350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2200      	movs	r2, #0
 8003382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f960 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d103      	bne.n	80033aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e05f      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	492d      	ldr	r1, [pc, #180]	; (8003478 <I2C_RequestMemoryWrite+0x128>)
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f9bb 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04c      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	6a39      	ldr	r1, [r7, #32]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa46 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02b      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e021      	b.n	800346c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	6a39      	ldr	r1, [r7, #32]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fa20 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b04      	cmp	r3, #4
 800344c:	d107      	bne.n	800345e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e005      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	00010002 	.word	0x00010002

0800347c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2200      	movs	r2, #0
 80034be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f8c2 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d103      	bne.n	80034e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0aa      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	4952      	ldr	r1, [pc, #328]	; (8003648 <I2C_RequestMemoryRead+0x1cc>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f91d 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e097      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f9a8 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b04      	cmp	r3, #4
 800353c:	d107      	bne.n	800354e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e076      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e021      	b.n	80035a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	b29b      	uxth	r3, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f982 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e050      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	6a39      	ldr	r1, [r7, #32]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f967 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d107      	bne.n	80035d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e035      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f82b 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d103      	bne.n	8003614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e013      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003618:	897b      	ldrh	r3, [r7, #10]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	4906      	ldr	r1, [pc, #24]	; (8003648 <I2C_RequestMemoryRead+0x1cc>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f886 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010002 	.word	0x00010002

0800364c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800365c:	e048      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d044      	beq.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe ff37 	bl	80024d8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d139      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10d      	bne.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	e00c      	b.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d116      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e023      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10d      	bne.n	8003716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	43da      	mvns	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	e00c      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	429a      	cmp	r2, r3
 8003734:	d093      	beq.n	800365e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800374e:	e071      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d123      	bne.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e067      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d041      	beq.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7fe fe92 	bl	80024d8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d136      	bne.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10c      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e00b      	b.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e021      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10c      	bne.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e00b      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af6d 	bne.w	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388c:	e034      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f8e3 	bl	8003a5a <I2C_IsAcknowledgeFailed>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e034      	b.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d028      	beq.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe fe17 	bl	80024d8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11d      	bne.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d016      	beq.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d1c3      	bne.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391c:	e034      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f89b 	bl	8003a5a <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e034      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d028      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fdcf 	bl	80024d8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d016      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e007      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d1c3      	bne.n	800391e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ac:	e049      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d119      	bne.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e030      	b.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7fe fd72 	bl	80024d8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d016      	beq.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d1ae      	bne.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d11b      	bne.n	8003aaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e272      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8087 	beq.w	8003be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d00c      	beq.n	8003afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d112      	bne.n	8003b16 <HAL_RCC_OscConfig+0x5e>
 8003af0:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d06c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x12c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d168      	bne.n	8003be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e24c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x76>
 8003b20:	4b80      	ldr	r3, [pc, #512]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7f      	ldr	r2, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e02e      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x98>
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7a      	ldr	r2, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e01d      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0xbc>
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a71      	ldr	r2, [pc, #452]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b74:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6a      	ldr	r2, [pc, #424]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fca0 	bl	80024d8 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fc9c 	bl	80024d8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e200      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe4>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fc8c 	bl	80024d8 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fc88 	bl	80024d8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1ec      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x10c>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bfe:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x18c>
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d116      	bne.n	8003c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x176>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1c0      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4939      	ldr	r1, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	e03a      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fc41 	bl	80024d8 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fc3d 	bl	80024d8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e1a1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4927      	ldr	r1, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_RCC_OscConfig+0x270>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fc20 	bl	80024d8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fc1c 	bl	80024d8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e180      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03a      	beq.n	8003d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d019      	beq.n	8003d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <HAL_RCC_OscConfig+0x274>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fc00 	bl	80024d8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fe fbfc 	bl	80024d8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e160      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f000 face 	bl	800429c <RCC_Delay>
 8003d00:	e01c      	b.n	8003d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_OscConfig+0x274>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fe fbe6 	bl	80024d8 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe fbe2 	bl	80024d8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d908      	bls.n	8003d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e146      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	42420000 	.word	0x42420000
 8003d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e9      	bne.n	8003d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a6 	beq.w	8003e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4a87      	ldr	r2, [pc, #540]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	61d3      	str	r3, [r2, #28]
 8003d66:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b82      	ldr	r3, [pc, #520]	; (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b7f      	ldr	r3, [pc, #508]	; (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7e      	ldr	r2, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fe fba3 	bl	80024d8 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fe fb9f 	bl	80024d8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e103      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x312>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	e02d      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x334>
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6213      	str	r3, [r2, #32]
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	6213      	str	r3, [r2, #32]
 8003dea:	e01c      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCC_OscConfig+0x356>
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4a60      	ldr	r2, [pc, #384]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	6213      	str	r3, [r2, #32]
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a5d      	ldr	r2, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6213      	str	r3, [r2, #32]
 8003e0c:	e00b      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003e0e:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a57      	ldr	r2, [pc, #348]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d015      	beq.n	8003e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fb53 	bl	80024d8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fe fb4f 	bl	80024d8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0b1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ee      	beq.n	8003e36 <HAL_RCC_OscConfig+0x37e>
 8003e58:	e014      	b.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5a:	f7fe fb3d 	bl	80024d8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe fb39 	bl	80024d8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e09b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ee      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8087 	beq.w	8003fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d061      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d146      	bne.n	8003f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb4:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fe fb0d 	bl	80024d8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe fb09 	bl	80024d8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e06d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d108      	bne.n	8003efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4921      	ldr	r1, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003efc:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a19      	ldr	r1, [r3, #32]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	491b      	ldr	r1, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe fadd 	bl	80024d8 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe fad9 	bl	80024d8 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e03d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x46a>
 8003f40:	e035      	b.n	8003fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe fac6 	bl	80024d8 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe fac2 	bl	80024d8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e026      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x498>
 8003f6e:	e01e      	b.n	8003fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e019      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x500>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0d0      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b67      	ldr	r3, [pc, #412]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	4965      	ldr	r1, [pc, #404]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b63      	ldr	r3, [pc, #396]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b8      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a58      	ldr	r2, [pc, #352]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800403a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b50      	ldr	r3, [pc, #320]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	494d      	ldr	r1, [pc, #308]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d040      	beq.n	80040dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d115      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e073      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06b      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4936      	ldr	r1, [pc, #216]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fe fa14 	bl	80024d8 <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b4:	f7fe fa10 	bl	80024d8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e053      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 020c 	and.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1eb      	bne.n	80040b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d210      	bcs.n	800410c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	4922      	ldr	r1, [pc, #136]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e032      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4916      	ldr	r1, [pc, #88]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	490e      	ldr	r1, [pc, #56]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414a:	f000 f821 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490a      	ldr	r1, [pc, #40]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1cc>)
 8004164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1d0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe f972 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
 8004184:	08007520 	.word	0x08007520
 8004188:	20000000 	.word	0x20000000
 800418c:	20000004 	.word	0x20000004

08004190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCC_GetSysClockFreq+0x94>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x30>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x36>
 80041be:	e027      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 80041c2:	613b      	str	r3, [r7, #16]
      break;
 80041c4:	e027      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_RCC_GetSysClockFreq+0x9c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_RCC_GetSysClockFreq+0x94>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0c5b      	lsrs	r3, r3, #17
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ea:	5cd3      	ldrb	r3, [r2, r3]
 80041ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 80041f2:	fb03 f202 	mul.w	r2, r3, r2
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e004      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	613b      	str	r3, [r7, #16]
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 8004212:	613b      	str	r3, [r7, #16]
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	693b      	ldr	r3, [r7, #16]
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	08007538 	.word	0x08007538
 8004230:	08007548 	.word	0x08007548
 8004234:	003d0900 	.word	0x003d0900

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b02      	ldr	r3, [pc, #8]	; (8004248 <HAL_RCC_GetHCLKFreq+0x10>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff2 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	08007530 	.word	0x08007530

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffde 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	08007530 	.word	0x08007530

0800429c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <RCC_Delay+0x34>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <RCC_Delay+0x38>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0a5b      	lsrs	r3, r3, #9
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042b8:	bf00      	nop
  }
  while (Delay --);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	60fa      	str	r2, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <RCC_Delay+0x1c>
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000000 	.word	0x20000000
 80042d4:	10624dd3 	.word	0x10624dd3

080042d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e042      	b.n	8004370 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd ff32 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f91d 	bl	800455c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b20      	cmp	r3, #32
 8004396:	d16d      	bne.n	8004474 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Transmit+0x2c>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e066      	b.n	8004476 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b6:	f7fe f88f 	bl	80024d8 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d108      	bne.n	80043e4 <HAL_UART_Transmit+0x6c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e003      	b.n	80043ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043ec:	e02a      	b.n	8004444 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f840 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e036      	b.n	8004476 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	3302      	adds	r3, #2
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	e007      	b.n	8004436 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1cf      	bne.n	80043ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f810 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e006      	b.n	8004476 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b090      	sub	sp, #64	; 0x40
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	e050      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d04c      	beq.n	8004532 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x30>
 800449e:	f7fe f81b 	bl	80024d8 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d241      	bcs.n	8004532 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ce:	637a      	str	r2, [r7, #52]	; 0x34
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	613b      	str	r3, [r7, #16]
   return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004502:	623a      	str	r2, [r7, #32]
 8004504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00f      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	429a      	cmp	r2, r3
 800454e:	d09f      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3740      	adds	r7, #64	; 0x40
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004596:	f023 030c 	bic.w	r3, r3, #12
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <UART_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7ff fe56 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	e002      	b.n	80045d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7ff fe3e 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	4a22      	ldr	r2, [pc, #136]	; (8004674 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	0119      	lsls	r1, r3, #4
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fbb2 f2f3 	udiv	r2, r2, r3
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <UART_SetConfig+0x118>)
 800460a:	fba3 0302 	umull	r0, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	3332      	adds	r3, #50	; 0x32
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <UART_SetConfig+0x118>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004628:	4419      	add	r1, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <UART_SetConfig+0x118>)
 8004642:	fba3 0302 	umull	r0, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2064      	movs	r0, #100	; 0x64
 800464a:	fb00 f303 	mul.w	r3, r0, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	3332      	adds	r3, #50	; 0x32
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <UART_SetConfig+0x118>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	440a      	add	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40013800 	.word	0x40013800
 8004674:	51eb851f 	.word	0x51eb851f

08004678 <__errno>:
 8004678:	4b01      	ldr	r3, [pc, #4]	; (8004680 <__errno+0x8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	2000000c 	.word	0x2000000c

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	2600      	movs	r6, #0
 8004688:	4d0c      	ldr	r5, [pc, #48]	; (80046bc <__libc_init_array+0x38>)
 800468a:	4c0d      	ldr	r4, [pc, #52]	; (80046c0 <__libc_init_array+0x3c>)
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	f002 fefc 	bl	8007490 <_init>
 8004698:	2600      	movs	r6, #0
 800469a:	4d0a      	ldr	r5, [pc, #40]	; (80046c4 <__libc_init_array+0x40>)
 800469c:	4c0a      	ldr	r4, [pc, #40]	; (80046c8 <__libc_init_array+0x44>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	4798      	blx	r3
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	4798      	blx	r3
 80046b8:	3601      	adds	r6, #1
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	08007924 	.word	0x08007924
 80046c0:	08007924 	.word	0x08007924
 80046c4:	08007924 	.word	0x08007924
 80046c8:	08007928 	.word	0x08007928

080046cc <memset>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	4402      	add	r2, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <__cvt>:
 80046dc:	2b00      	cmp	r3, #0
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	461f      	mov	r7, r3
 80046e4:	bfbb      	ittet	lt
 80046e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	461f      	movlt	r7, r3
 80046ec:	2300      	movge	r3, #0
 80046ee:	232d      	movlt	r3, #45	; 0x2d
 80046f0:	b088      	sub	sp, #32
 80046f2:	4614      	mov	r4, r2
 80046f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046f8:	7013      	strb	r3, [r2, #0]
 80046fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004700:	f023 0820 	bic.w	r8, r3, #32
 8004704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004708:	d005      	beq.n	8004716 <__cvt+0x3a>
 800470a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800470e:	d100      	bne.n	8004712 <__cvt+0x36>
 8004710:	3501      	adds	r5, #1
 8004712:	2302      	movs	r3, #2
 8004714:	e000      	b.n	8004718 <__cvt+0x3c>
 8004716:	2303      	movs	r3, #3
 8004718:	aa07      	add	r2, sp, #28
 800471a:	9204      	str	r2, [sp, #16]
 800471c:	aa06      	add	r2, sp, #24
 800471e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004722:	e9cd 3500 	strd	r3, r5, [sp]
 8004726:	4622      	mov	r2, r4
 8004728:	463b      	mov	r3, r7
 800472a:	f000 fce5 	bl	80050f8 <_dtoa_r>
 800472e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004732:	4606      	mov	r6, r0
 8004734:	d102      	bne.n	800473c <__cvt+0x60>
 8004736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004738:	07db      	lsls	r3, r3, #31
 800473a:	d522      	bpl.n	8004782 <__cvt+0xa6>
 800473c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004740:	eb06 0905 	add.w	r9, r6, r5
 8004744:	d110      	bne.n	8004768 <__cvt+0x8c>
 8004746:	7833      	ldrb	r3, [r6, #0]
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d10a      	bne.n	8004762 <__cvt+0x86>
 800474c:	2200      	movs	r2, #0
 800474e:	2300      	movs	r3, #0
 8004750:	4620      	mov	r0, r4
 8004752:	4639      	mov	r1, r7
 8004754:	f7fc f928 	bl	80009a8 <__aeabi_dcmpeq>
 8004758:	b918      	cbnz	r0, 8004762 <__cvt+0x86>
 800475a:	f1c5 0501 	rsb	r5, r5, #1
 800475e:	f8ca 5000 	str.w	r5, [sl]
 8004762:	f8da 3000 	ldr.w	r3, [sl]
 8004766:	4499      	add	r9, r3
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	4620      	mov	r0, r4
 800476e:	4639      	mov	r1, r7
 8004770:	f7fc f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8004774:	b108      	cbz	r0, 800477a <__cvt+0x9e>
 8004776:	f8cd 901c 	str.w	r9, [sp, #28]
 800477a:	2230      	movs	r2, #48	; 0x30
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	454b      	cmp	r3, r9
 8004780:	d307      	bcc.n	8004792 <__cvt+0xb6>
 8004782:	4630      	mov	r0, r6
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004788:	1b9b      	subs	r3, r3, r6
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	b008      	add	sp, #32
 800478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	9107      	str	r1, [sp, #28]
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e7f0      	b.n	800477c <__cvt+0xa0>

0800479a <__exponent>:
 800479a:	4603      	mov	r3, r0
 800479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800479e:	2900      	cmp	r1, #0
 80047a0:	f803 2b02 	strb.w	r2, [r3], #2
 80047a4:	bfb6      	itet	lt
 80047a6:	222d      	movlt	r2, #45	; 0x2d
 80047a8:	222b      	movge	r2, #43	; 0x2b
 80047aa:	4249      	neglt	r1, r1
 80047ac:	2909      	cmp	r1, #9
 80047ae:	7042      	strb	r2, [r0, #1]
 80047b0:	dd2b      	ble.n	800480a <__exponent+0x70>
 80047b2:	f10d 0407 	add.w	r4, sp, #7
 80047b6:	46a4      	mov	ip, r4
 80047b8:	270a      	movs	r7, #10
 80047ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80047be:	460a      	mov	r2, r1
 80047c0:	46a6      	mov	lr, r4
 80047c2:	fb07 1516 	mls	r5, r7, r6, r1
 80047c6:	2a63      	cmp	r2, #99	; 0x63
 80047c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047cc:	4631      	mov	r1, r6
 80047ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80047d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047d6:	dcf0      	bgt.n	80047ba <__exponent+0x20>
 80047d8:	3130      	adds	r1, #48	; 0x30
 80047da:	f1ae 0502 	sub.w	r5, lr, #2
 80047de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047e2:	4629      	mov	r1, r5
 80047e4:	1c44      	adds	r4, r0, #1
 80047e6:	4561      	cmp	r1, ip
 80047e8:	d30a      	bcc.n	8004800 <__exponent+0x66>
 80047ea:	f10d 0209 	add.w	r2, sp, #9
 80047ee:	eba2 020e 	sub.w	r2, r2, lr
 80047f2:	4565      	cmp	r5, ip
 80047f4:	bf88      	it	hi
 80047f6:	2200      	movhi	r2, #0
 80047f8:	4413      	add	r3, r2
 80047fa:	1a18      	subs	r0, r3, r0
 80047fc:	b003      	add	sp, #12
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004804:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004808:	e7ed      	b.n	80047e6 <__exponent+0x4c>
 800480a:	2330      	movs	r3, #48	; 0x30
 800480c:	3130      	adds	r1, #48	; 0x30
 800480e:	7083      	strb	r3, [r0, #2]
 8004810:	70c1      	strb	r1, [r0, #3]
 8004812:	1d03      	adds	r3, r0, #4
 8004814:	e7f1      	b.n	80047fa <__exponent+0x60>
	...

08004818 <_printf_float>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b091      	sub	sp, #68	; 0x44
 800481e:	460c      	mov	r4, r1
 8004820:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004824:	4616      	mov	r6, r2
 8004826:	461f      	mov	r7, r3
 8004828:	4605      	mov	r5, r0
 800482a:	f001 fa53 	bl	8005cd4 <_localeconv_r>
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	f7fb fc8c 	bl	8000150 <strlen>
 8004838:	2300      	movs	r3, #0
 800483a:	930e      	str	r3, [sp, #56]	; 0x38
 800483c:	f8d8 3000 	ldr.w	r3, [r8]
 8004840:	900a      	str	r0, [sp, #40]	; 0x28
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004850:	f8d4 b000 	ldr.w	fp, [r4]
 8004854:	f8c8 2000 	str.w	r2, [r8]
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004860:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004864:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004868:	930b      	str	r3, [sp, #44]	; 0x2c
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	4640      	mov	r0, r8
 8004870:	4b9c      	ldr	r3, [pc, #624]	; (8004ae4 <_printf_float+0x2cc>)
 8004872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004874:	f7fc f8ca 	bl	8000a0c <__aeabi_dcmpun>
 8004878:	bb70      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	4640      	mov	r0, r8
 8004880:	4b98      	ldr	r3, [pc, #608]	; (8004ae4 <_printf_float+0x2cc>)
 8004882:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004884:	f7fc f8a4 	bl	80009d0 <__aeabi_dcmple>
 8004888:	bb30      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	4640      	mov	r0, r8
 8004890:	4651      	mov	r1, sl
 8004892:	f7fc f893 	bl	80009bc <__aeabi_dcmplt>
 8004896:	b110      	cbz	r0, 800489e <_printf_float+0x86>
 8004898:	232d      	movs	r3, #45	; 0x2d
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	4b92      	ldr	r3, [pc, #584]	; (8004ae8 <_printf_float+0x2d0>)
 80048a0:	4892      	ldr	r0, [pc, #584]	; (8004aec <_printf_float+0x2d4>)
 80048a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048a6:	bf94      	ite	ls
 80048a8:	4698      	movls	r8, r3
 80048aa:	4680      	movhi	r8, r0
 80048ac:	2303      	movs	r3, #3
 80048ae:	f04f 0a00 	mov.w	sl, #0
 80048b2:	6123      	str	r3, [r4, #16]
 80048b4:	f02b 0304 	bic.w	r3, fp, #4
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	4633      	mov	r3, r6
 80048bc:	4621      	mov	r1, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	9700      	str	r7, [sp, #0]
 80048c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80048c4:	f000 f9d4 	bl	8004c70 <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f040 8090 	bne.w	80049ee <_printf_float+0x1d6>
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	b011      	add	sp, #68	; 0x44
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d8:	4642      	mov	r2, r8
 80048da:	4653      	mov	r3, sl
 80048dc:	4640      	mov	r0, r8
 80048de:	4651      	mov	r1, sl
 80048e0:	f7fc f894 	bl	8000a0c <__aeabi_dcmpun>
 80048e4:	b148      	cbz	r0, 80048fa <_printf_float+0xe2>
 80048e6:	f1ba 0f00 	cmp.w	sl, #0
 80048ea:	bfb8      	it	lt
 80048ec:	232d      	movlt	r3, #45	; 0x2d
 80048ee:	4880      	ldr	r0, [pc, #512]	; (8004af0 <_printf_float+0x2d8>)
 80048f0:	bfb8      	it	lt
 80048f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048f6:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <_printf_float+0x2dc>)
 80048f8:	e7d3      	b.n	80048a2 <_printf_float+0x8a>
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	d142      	bne.n	800498a <_printf_float+0x172>
 8004904:	2306      	movs	r3, #6
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	9206      	str	r2, [sp, #24]
 800490c:	aa0e      	add	r2, sp, #56	; 0x38
 800490e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004912:	aa0d      	add	r2, sp, #52	; 0x34
 8004914:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004918:	9203      	str	r2, [sp, #12]
 800491a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800491e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	4642      	mov	r2, r8
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4628      	mov	r0, r5
 800492c:	4653      	mov	r3, sl
 800492e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004930:	f7ff fed4 	bl	80046dc <__cvt>
 8004934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004936:	4680      	mov	r8, r0
 8004938:	2947      	cmp	r1, #71	; 0x47
 800493a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800493c:	d108      	bne.n	8004950 <_printf_float+0x138>
 800493e:	1cc8      	adds	r0, r1, #3
 8004940:	db02      	blt.n	8004948 <_printf_float+0x130>
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	4299      	cmp	r1, r3
 8004946:	dd40      	ble.n	80049ca <_printf_float+0x1b2>
 8004948:	f1a9 0902 	sub.w	r9, r9, #2
 800494c:	fa5f f989 	uxtb.w	r9, r9
 8004950:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004954:	d81f      	bhi.n	8004996 <_printf_float+0x17e>
 8004956:	464a      	mov	r2, r9
 8004958:	3901      	subs	r1, #1
 800495a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800495e:	910d      	str	r1, [sp, #52]	; 0x34
 8004960:	f7ff ff1b 	bl	800479a <__exponent>
 8004964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004966:	4682      	mov	sl, r0
 8004968:	1813      	adds	r3, r2, r0
 800496a:	2a01      	cmp	r2, #1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	dc02      	bgt.n	8004976 <_printf_float+0x15e>
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	07d2      	lsls	r2, r2, #31
 8004974:	d501      	bpl.n	800497a <_printf_float+0x162>
 8004976:	3301      	adds	r3, #1
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800497e:	2b00      	cmp	r3, #0
 8004980:	d09b      	beq.n	80048ba <_printf_float+0xa2>
 8004982:	232d      	movs	r3, #45	; 0x2d
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	e797      	b.n	80048ba <_printf_float+0xa2>
 800498a:	2947      	cmp	r1, #71	; 0x47
 800498c:	d1bc      	bne.n	8004908 <_printf_float+0xf0>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ba      	bne.n	8004908 <_printf_float+0xf0>
 8004992:	2301      	movs	r3, #1
 8004994:	e7b7      	b.n	8004906 <_printf_float+0xee>
 8004996:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800499a:	d118      	bne.n	80049ce <_printf_float+0x1b6>
 800499c:	2900      	cmp	r1, #0
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	dd0b      	ble.n	80049ba <_printf_float+0x1a2>
 80049a2:	6121      	str	r1, [r4, #16]
 80049a4:	b913      	cbnz	r3, 80049ac <_printf_float+0x194>
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	07d0      	lsls	r0, r2, #31
 80049aa:	d502      	bpl.n	80049b2 <_printf_float+0x19a>
 80049ac:	3301      	adds	r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	f04f 0a00 	mov.w	sl, #0
 80049b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80049b8:	e7df      	b.n	800497a <_printf_float+0x162>
 80049ba:	b913      	cbnz	r3, 80049c2 <_printf_float+0x1aa>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	07d2      	lsls	r2, r2, #31
 80049c0:	d501      	bpl.n	80049c6 <_printf_float+0x1ae>
 80049c2:	3302      	adds	r3, #2
 80049c4:	e7f4      	b.n	80049b0 <_printf_float+0x198>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e7f2      	b.n	80049b0 <_printf_float+0x198>
 80049ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049d0:	4299      	cmp	r1, r3
 80049d2:	db05      	blt.n	80049e0 <_printf_float+0x1c8>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	6121      	str	r1, [r4, #16]
 80049d8:	07d8      	lsls	r0, r3, #31
 80049da:	d5ea      	bpl.n	80049b2 <_printf_float+0x19a>
 80049dc:	1c4b      	adds	r3, r1, #1
 80049de:	e7e7      	b.n	80049b0 <_printf_float+0x198>
 80049e0:	2900      	cmp	r1, #0
 80049e2:	bfcc      	ite	gt
 80049e4:	2201      	movgt	r2, #1
 80049e6:	f1c1 0202 	rsble	r2, r1, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	e7e0      	b.n	80049b0 <_printf_float+0x198>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	055a      	lsls	r2, r3, #21
 80049f2:	d407      	bmi.n	8004a04 <_printf_float+0x1ec>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	4642      	mov	r2, r8
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	d12b      	bne.n	8004a5a <_printf_float+0x242>
 8004a02:	e764      	b.n	80048ce <_printf_float+0xb6>
 8004a04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a08:	f240 80dd 	bls.w	8004bc6 <_printf_float+0x3ae>
 8004a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	f7fb ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d033      	beq.n	8004a84 <_printf_float+0x26c>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <_printf_float+0x2e0>)
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f af51 	beq.w	80048ce <_printf_float+0xb6>
 8004a2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a30:	429a      	cmp	r2, r3
 8004a32:	db02      	blt.n	8004a3a <_printf_float+0x222>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07d8      	lsls	r0, r3, #31
 8004a38:	d50f      	bpl.n	8004a5a <_printf_float+0x242>
 8004a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f af42 	beq.w	80048ce <_printf_float+0xb6>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	f104 091a 	add.w	r9, r4, #26
 8004a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a54:	3b01      	subs	r3, #1
 8004a56:	4543      	cmp	r3, r8
 8004a58:	dc09      	bgt.n	8004a6e <_printf_float+0x256>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	079b      	lsls	r3, r3, #30
 8004a5e:	f100 8102 	bmi.w	8004c66 <_printf_float+0x44e>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e731      	b.n	80048d2 <_printf_float+0xba>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f af28 	beq.w	80048ce <_printf_float+0xb6>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	e7e6      	b.n	8004a52 <_printf_float+0x23a>
 8004a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dc38      	bgt.n	8004afc <_printf_float+0x2e4>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <_printf_float+0x2e0>)
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af1a 	beq.w	80048ce <_printf_float+0xb6>
 8004a9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d102      	bne.n	8004aa8 <_printf_float+0x290>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	d5d8      	bpl.n	8004a5a <_printf_float+0x242>
 8004aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af0b 	beq.w	80048ce <_printf_float+0xb6>
 8004ab8:	f04f 0900 	mov.w	r9, #0
 8004abc:	f104 0a1a 	add.w	sl, r4, #26
 8004ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	454b      	cmp	r3, r9
 8004ac6:	dc01      	bgt.n	8004acc <_printf_float+0x2b4>
 8004ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aca:	e794      	b.n	80049f6 <_printf_float+0x1de>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4652      	mov	r2, sl
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f aef9 	beq.w	80048ce <_printf_float+0xb6>
 8004adc:	f109 0901 	add.w	r9, r9, #1
 8004ae0:	e7ee      	b.n	8004ac0 <_printf_float+0x2a8>
 8004ae2:	bf00      	nop
 8004ae4:	7fefffff 	.word	0x7fefffff
 8004ae8:	08007550 	.word	0x08007550
 8004aec:	08007554 	.word	0x08007554
 8004af0:	0800755c 	.word	0x0800755c
 8004af4:	08007558 	.word	0x08007558
 8004af8:	08007560 	.word	0x08007560
 8004afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bfa8      	it	ge
 8004b04:	461a      	movge	r2, r3
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	4691      	mov	r9, r2
 8004b0a:	dc37      	bgt.n	8004b7c <_printf_float+0x364>
 8004b0c:	f04f 0b00 	mov.w	fp, #0
 8004b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b14:	f104 021a 	add.w	r2, r4, #26
 8004b18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b1c:	ebaa 0309 	sub.w	r3, sl, r9
 8004b20:	455b      	cmp	r3, fp
 8004b22:	dc33      	bgt.n	8004b8c <_printf_float+0x374>
 8004b24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	db3b      	blt.n	8004ba4 <_printf_float+0x38c>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	07da      	lsls	r2, r3, #31
 8004b30:	d438      	bmi.n	8004ba4 <_printf_float+0x38c>
 8004b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b36:	eba3 020a 	sub.w	r2, r3, sl
 8004b3a:	eba3 0901 	sub.w	r9, r3, r1
 8004b3e:	4591      	cmp	r9, r2
 8004b40:	bfa8      	it	ge
 8004b42:	4691      	movge	r9, r2
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	dc34      	bgt.n	8004bb4 <_printf_float+0x39c>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b52:	f104 0a1a 	add.w	sl, r4, #26
 8004b56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	eba3 0309 	sub.w	r3, r3, r9
 8004b60:	4543      	cmp	r3, r8
 8004b62:	f77f af7a 	ble.w	8004a5a <_printf_float+0x242>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4652      	mov	r2, sl
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f aeac 	beq.w	80048ce <_printf_float+0xb6>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	e7ec      	b.n	8004b56 <_printf_float+0x33e>
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4642      	mov	r2, r8
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	d1c0      	bne.n	8004b0c <_printf_float+0x2f4>
 8004b8a:	e6a0      	b.n	80048ce <_printf_float+0xb6>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f ae99 	beq.w	80048ce <_printf_float+0xb6>
 8004b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b9e:	f10b 0b01 	add.w	fp, fp, #1
 8004ba2:	e7b9      	b.n	8004b18 <_printf_float+0x300>
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d1bf      	bne.n	8004b32 <_printf_float+0x31a>
 8004bb2:	e68c      	b.n	80048ce <_printf_float+0xb6>
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	eb08 020a 	add.w	r2, r8, sl
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d1c2      	bne.n	8004b4a <_printf_float+0x332>
 8004bc4:	e683      	b.n	80048ce <_printf_float+0xb6>
 8004bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc8:	2a01      	cmp	r2, #1
 8004bca:	dc01      	bgt.n	8004bd0 <_printf_float+0x3b8>
 8004bcc:	07db      	lsls	r3, r3, #31
 8004bce:	d537      	bpl.n	8004c40 <_printf_float+0x428>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f ae77 	beq.w	80048ce <_printf_float+0xb6>
 8004be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	f43f ae6f 	beq.w	80048ce <_printf_float+0xb6>
 8004bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	b9d8      	cbnz	r0, 8004c36 <_printf_float+0x41e>
 8004bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c00:	f108 0201 	add.w	r2, r8, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d10e      	bne.n	8004c2e <_printf_float+0x416>
 8004c10:	e65d      	b.n	80048ce <_printf_float+0xb6>
 8004c12:	2301      	movs	r3, #1
 8004c14:	464a      	mov	r2, r9
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f ae56 	beq.w	80048ce <_printf_float+0xb6>
 8004c22:	f108 0801 	add.w	r8, r8, #1
 8004c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	4543      	cmp	r3, r8
 8004c2c:	dcf1      	bgt.n	8004c12 <_printf_float+0x3fa>
 8004c2e:	4653      	mov	r3, sl
 8004c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c34:	e6e0      	b.n	80049f8 <_printf_float+0x1e0>
 8004c36:	f04f 0800 	mov.w	r8, #0
 8004c3a:	f104 091a 	add.w	r9, r4, #26
 8004c3e:	e7f2      	b.n	8004c26 <_printf_float+0x40e>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4642      	mov	r2, r8
 8004c44:	e7df      	b.n	8004c06 <_printf_float+0x3ee>
 8004c46:	2301      	movs	r3, #1
 8004c48:	464a      	mov	r2, r9
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f ae3c 	beq.w	80048ce <_printf_float+0xb6>
 8004c56:	f108 0801 	add.w	r8, r8, #1
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c5e:	1a5b      	subs	r3, r3, r1
 8004c60:	4543      	cmp	r3, r8
 8004c62:	dcf0      	bgt.n	8004c46 <_printf_float+0x42e>
 8004c64:	e6fd      	b.n	8004a62 <_printf_float+0x24a>
 8004c66:	f04f 0800 	mov.w	r8, #0
 8004c6a:	f104 0919 	add.w	r9, r4, #25
 8004c6e:	e7f4      	b.n	8004c5a <_printf_float+0x442>

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4616      	mov	r6, r2
 8004c76:	4699      	mov	r9, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfb8      	it	lt
 8004c82:	4613      	movlt	r3, r2
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c90:	b10a      	cbz	r2, 8004c96 <_printf_common+0x26>
 8004c92:	3301      	adds	r3, #1
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	0699      	lsls	r1, r3, #26
 8004c9a:	bf42      	ittt	mi
 8004c9c:	6833      	ldrmi	r3, [r6, #0]
 8004c9e:	3302      	addmi	r3, #2
 8004ca0:	6033      	strmi	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	f015 0506 	ands.w	r5, r5, #6
 8004ca8:	d106      	bne.n	8004cb8 <_printf_common+0x48>
 8004caa:	f104 0a19 	add.w	sl, r4, #25
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	6832      	ldr	r2, [r6, #0]
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dc28      	bgt.n	8004d0a <_printf_common+0x9a>
 8004cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cbc:	1e13      	subs	r3, r2, #0
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	bf18      	it	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	0692      	lsls	r2, r2, #26
 8004cc6:	d42d      	bmi.n	8004d24 <_printf_common+0xb4>
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd0:	47c0      	blx	r8
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d020      	beq.n	8004d18 <_printf_common+0xa8>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	68e5      	ldr	r5, [r4, #12]
 8004cda:	f003 0306 	and.w	r3, r3, #6
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf18      	it	ne
 8004ce2:	2500      	movne	r5, #0
 8004ce4:	6832      	ldr	r2, [r6, #0]
 8004ce6:	f04f 0600 	mov.w	r6, #0
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	bf08      	it	eq
 8004cee:	1aad      	subeq	r5, r5, r2
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	bf08      	it	eq
 8004cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfc4      	itt	gt
 8004cfc:	1a9b      	subgt	r3, r3, r2
 8004cfe:	18ed      	addgt	r5, r5, r3
 8004d00:	341a      	adds	r4, #26
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	d11a      	bne.n	8004d3c <_printf_common+0xcc>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e008      	b.n	8004d1c <_printf_common+0xac>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4638      	mov	r0, r7
 8004d12:	47c0      	blx	r8
 8004d14:	3001      	adds	r0, #1
 8004d16:	d103      	bne.n	8004d20 <_printf_common+0xb0>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	3501      	adds	r5, #1
 8004d22:	e7c4      	b.n	8004cae <_printf_common+0x3e>
 8004d24:	2030      	movs	r0, #48	; 0x30
 8004d26:	18e1      	adds	r1, r4, r3
 8004d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d32:	4422      	add	r2, r4
 8004d34:	3302      	adds	r3, #2
 8004d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d3a:	e7c5      	b.n	8004cc8 <_printf_common+0x58>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4649      	mov	r1, r9
 8004d42:	4638      	mov	r0, r7
 8004d44:	47c0      	blx	r8
 8004d46:	3001      	adds	r0, #1
 8004d48:	d0e6      	beq.n	8004d18 <_printf_common+0xa8>
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7d9      	b.n	8004d02 <_printf_common+0x92>
	...

08004d50 <_printf_i>:
 8004d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	7e0f      	ldrb	r7, [r1, #24]
 8004d56:	4691      	mov	r9, r2
 8004d58:	2f78      	cmp	r7, #120	; 0x78
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	469a      	mov	sl, r3
 8004d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d66:	d807      	bhi.n	8004d78 <_printf_i+0x28>
 8004d68:	2f62      	cmp	r7, #98	; 0x62
 8004d6a:	d80a      	bhi.n	8004d82 <_printf_i+0x32>
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	f000 80d9 	beq.w	8004f24 <_printf_i+0x1d4>
 8004d72:	2f58      	cmp	r7, #88	; 0x58
 8004d74:	f000 80a4 	beq.w	8004ec0 <_printf_i+0x170>
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d80:	e03a      	b.n	8004df8 <_printf_i+0xa8>
 8004d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d86:	2b15      	cmp	r3, #21
 8004d88:	d8f6      	bhi.n	8004d78 <_printf_i+0x28>
 8004d8a:	a101      	add	r1, pc, #4	; (adr r1, 8004d90 <_printf_i+0x40>)
 8004d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004d79 	.word	0x08004d79
 8004d9c:	08004d79 	.word	0x08004d79
 8004da0:	08004d79 	.word	0x08004d79
 8004da4:	08004d79 	.word	0x08004d79
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004d79 	.word	0x08004d79
 8004db0:	08004d79 	.word	0x08004d79
 8004db4:	08004d79 	.word	0x08004d79
 8004db8:	08004d79 	.word	0x08004d79
 8004dbc:	08004f0b 	.word	0x08004f0b
 8004dc0:	08004e2d 	.word	0x08004e2d
 8004dc4:	08004eed 	.word	0x08004eed
 8004dc8:	08004d79 	.word	0x08004d79
 8004dcc:	08004d79 	.word	0x08004d79
 8004dd0:	08004f2d 	.word	0x08004f2d
 8004dd4:	08004d79 	.word	0x08004d79
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004d79 	.word	0x08004d79
 8004de0:	08004d79 	.word	0x08004d79
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0a4      	b.n	8004f46 <_printf_i+0x1f6>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	6829      	ldr	r1, [r5, #0]
 8004e00:	0606      	lsls	r6, r0, #24
 8004e02:	f101 0304 	add.w	r3, r1, #4
 8004e06:	d50a      	bpl.n	8004e1e <_printf_i+0xce>
 8004e08:	680e      	ldr	r6, [r1, #0]
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	da03      	bge.n	8004e18 <_printf_i+0xc8>
 8004e10:	232d      	movs	r3, #45	; 0x2d
 8004e12:	4276      	negs	r6, r6
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e18:	230a      	movs	r3, #10
 8004e1a:	485e      	ldr	r0, [pc, #376]	; (8004f94 <_printf_i+0x244>)
 8004e1c:	e019      	b.n	8004e52 <_printf_i+0x102>
 8004e1e:	680e      	ldr	r6, [r1, #0]
 8004e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	bf18      	it	ne
 8004e28:	b236      	sxthne	r6, r6
 8004e2a:	e7ef      	b.n	8004e0c <_printf_i+0xbc>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	6029      	str	r1, [r5, #0]
 8004e34:	0601      	lsls	r1, r0, #24
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0xec>
 8004e38:	681e      	ldr	r6, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0xf2>
 8004e3c:	0646      	lsls	r6, r0, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0xe8>
 8004e40:	881e      	ldrh	r6, [r3, #0]
 8004e42:	2f6f      	cmp	r7, #111	; 0x6f
 8004e44:	bf0c      	ite	eq
 8004e46:	2308      	moveq	r3, #8
 8004e48:	230a      	movne	r3, #10
 8004e4a:	4852      	ldr	r0, [pc, #328]	; (8004f94 <_printf_i+0x244>)
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e52:	6865      	ldr	r5, [r4, #4]
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	bfa8      	it	ge
 8004e58:	6821      	ldrge	r1, [r4, #0]
 8004e5a:	60a5      	str	r5, [r4, #8]
 8004e5c:	bfa4      	itt	ge
 8004e5e:	f021 0104 	bicge.w	r1, r1, #4
 8004e62:	6021      	strge	r1, [r4, #0]
 8004e64:	b90e      	cbnz	r6, 8004e6a <_printf_i+0x11a>
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	d04d      	beq.n	8004f06 <_printf_i+0x1b6>
 8004e6a:	4615      	mov	r5, r2
 8004e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e70:	fb03 6711 	mls	r7, r3, r1, r6
 8004e74:	5dc7      	ldrb	r7, [r0, r7]
 8004e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e7a:	4637      	mov	r7, r6
 8004e7c:	42bb      	cmp	r3, r7
 8004e7e:	460e      	mov	r6, r1
 8004e80:	d9f4      	bls.n	8004e6c <_printf_i+0x11c>
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d10b      	bne.n	8004e9e <_printf_i+0x14e>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	07de      	lsls	r6, r3, #31
 8004e8a:	d508      	bpl.n	8004e9e <_printf_i+0x14e>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	6861      	ldr	r1, [r4, #4]
 8004e90:	4299      	cmp	r1, r3
 8004e92:	bfde      	ittt	le
 8004e94:	2330      	movle	r3, #48	; 0x30
 8004e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9e:	1b52      	subs	r2, r2, r5
 8004ea0:	6122      	str	r2, [r4, #16]
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f8cd a000 	str.w	sl, [sp]
 8004eac:	aa03      	add	r2, sp, #12
 8004eae:	f7ff fedf 	bl	8004c70 <_printf_common>
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d14c      	bne.n	8004f50 <_printf_i+0x200>
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	b004      	add	sp, #16
 8004ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec0:	4834      	ldr	r0, [pc, #208]	; (8004f94 <_printf_i+0x244>)
 8004ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ec6:	6829      	ldr	r1, [r5, #0]
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ece:	6029      	str	r1, [r5, #0]
 8004ed0:	061d      	lsls	r5, r3, #24
 8004ed2:	d514      	bpl.n	8004efe <_printf_i+0x1ae>
 8004ed4:	07df      	lsls	r7, r3, #31
 8004ed6:	bf44      	itt	mi
 8004ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8004edc:	6023      	strmi	r3, [r4, #0]
 8004ede:	b91e      	cbnz	r6, 8004ee8 <_printf_i+0x198>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	f023 0320 	bic.w	r3, r3, #32
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	2310      	movs	r3, #16
 8004eea:	e7af      	b.n	8004e4c <_printf_i+0xfc>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f043 0320 	orr.w	r3, r3, #32
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	2378      	movs	r3, #120	; 0x78
 8004ef6:	4828      	ldr	r0, [pc, #160]	; (8004f98 <_printf_i+0x248>)
 8004ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efc:	e7e3      	b.n	8004ec6 <_printf_i+0x176>
 8004efe:	0659      	lsls	r1, r3, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2b6      	uxthmi	r6, r6
 8004f04:	e7e6      	b.n	8004ed4 <_printf_i+0x184>
 8004f06:	4615      	mov	r5, r2
 8004f08:	e7bb      	b.n	8004e82 <_printf_i+0x132>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	6826      	ldr	r6, [r4, #0]
 8004f0e:	1d18      	adds	r0, r3, #4
 8004f10:	6961      	ldr	r1, [r4, #20]
 8004f12:	6028      	str	r0, [r5, #0]
 8004f14:	0635      	lsls	r5, r6, #24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	d501      	bpl.n	8004f1e <_printf_i+0x1ce>
 8004f1a:	6019      	str	r1, [r3, #0]
 8004f1c:	e002      	b.n	8004f24 <_printf_i+0x1d4>
 8004f1e:	0670      	lsls	r0, r6, #25
 8004f20:	d5fb      	bpl.n	8004f1a <_printf_i+0x1ca>
 8004f22:	8019      	strh	r1, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	4615      	mov	r5, r2
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	e7ba      	b.n	8004ea2 <_printf_i+0x152>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	1d1a      	adds	r2, r3, #4
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	6862      	ldr	r2, [r4, #4]
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 fed7 	bl	8005cec <memchr>
 8004f3e:	b108      	cbz	r0, 8004f44 <_printf_i+0x1f4>
 8004f40:	1b40      	subs	r0, r0, r5
 8004f42:	6060      	str	r0, [r4, #4]
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4e:	e7a8      	b.n	8004ea2 <_printf_i+0x152>
 8004f50:	462a      	mov	r2, r5
 8004f52:	4649      	mov	r1, r9
 8004f54:	4640      	mov	r0, r8
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	47d0      	blx	sl
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d0ab      	beq.n	8004eb6 <_printf_i+0x166>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	079b      	lsls	r3, r3, #30
 8004f62:	d413      	bmi.n	8004f8c <_printf_i+0x23c>
 8004f64:	68e0      	ldr	r0, [r4, #12]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	bfb8      	it	lt
 8004f6c:	4618      	movlt	r0, r3
 8004f6e:	e7a4      	b.n	8004eba <_printf_i+0x16a>
 8004f70:	2301      	movs	r3, #1
 8004f72:	4632      	mov	r2, r6
 8004f74:	4649      	mov	r1, r9
 8004f76:	4640      	mov	r0, r8
 8004f78:	47d0      	blx	sl
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d09b      	beq.n	8004eb6 <_printf_i+0x166>
 8004f7e:	3501      	adds	r5, #1
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	9903      	ldr	r1, [sp, #12]
 8004f84:	1a5b      	subs	r3, r3, r1
 8004f86:	42ab      	cmp	r3, r5
 8004f88:	dcf2      	bgt.n	8004f70 <_printf_i+0x220>
 8004f8a:	e7eb      	b.n	8004f64 <_printf_i+0x214>
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	f104 0619 	add.w	r6, r4, #25
 8004f92:	e7f5      	b.n	8004f80 <_printf_i+0x230>
 8004f94:	08007562 	.word	0x08007562
 8004f98:	08007573 	.word	0x08007573

08004f9c <siprintf>:
 8004f9c:	b40e      	push	{r1, r2, r3}
 8004f9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fa2:	b500      	push	{lr}
 8004fa4:	b09c      	sub	sp, #112	; 0x70
 8004fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fa8:	9002      	str	r0, [sp, #8]
 8004faa:	9006      	str	r0, [sp, #24]
 8004fac:	9107      	str	r1, [sp, #28]
 8004fae:	9104      	str	r1, [sp, #16]
 8004fb0:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <siprintf+0x38>)
 8004fb2:	4909      	ldr	r1, [pc, #36]	; (8004fd8 <siprintf+0x3c>)
 8004fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb8:	9105      	str	r1, [sp, #20]
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	a902      	add	r1, sp, #8
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	f001 fb7e 	bl	80066c0 <_svfiprintf_r>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	9b02      	ldr	r3, [sp, #8]
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	b01c      	add	sp, #112	; 0x70
 8004fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd0:	b003      	add	sp, #12
 8004fd2:	4770      	bx	lr
 8004fd4:	2000000c 	.word	0x2000000c
 8004fd8:	ffff0208 	.word	0xffff0208

08004fdc <quorem>:
 8004fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	6903      	ldr	r3, [r0, #16]
 8004fe2:	690c      	ldr	r4, [r1, #16]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	f2c0 8082 	blt.w	80050f0 <quorem+0x114>
 8004fec:	3c01      	subs	r4, #1
 8004fee:	f100 0514 	add.w	r5, r0, #20
 8004ff2:	f101 0814 	add.w	r8, r1, #20
 8004ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005004:	3301      	adds	r3, #1
 8005006:	429a      	cmp	r2, r3
 8005008:	fbb2 f6f3 	udiv	r6, r2, r3
 800500c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005014:	d331      	bcc.n	800507a <quorem+0x9e>
 8005016:	f04f 0e00 	mov.w	lr, #0
 800501a:	4640      	mov	r0, r8
 800501c:	46ac      	mov	ip, r5
 800501e:	46f2      	mov	sl, lr
 8005020:	f850 2b04 	ldr.w	r2, [r0], #4
 8005024:	b293      	uxth	r3, r2
 8005026:	fb06 e303 	mla	r3, r6, r3, lr
 800502a:	0c12      	lsrs	r2, r2, #16
 800502c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005030:	b29b      	uxth	r3, r3
 8005032:	fb06 e202 	mla	r2, r6, r2, lr
 8005036:	ebaa 0303 	sub.w	r3, sl, r3
 800503a:	f8dc a000 	ldr.w	sl, [ip]
 800503e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005042:	fa1f fa8a 	uxth.w	sl, sl
 8005046:	4453      	add	r3, sl
 8005048:	f8dc a000 	ldr.w	sl, [ip]
 800504c:	b292      	uxth	r2, r2
 800504e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005052:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005056:	b29b      	uxth	r3, r3
 8005058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800505c:	4581      	cmp	r9, r0
 800505e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005062:	f84c 3b04 	str.w	r3, [ip], #4
 8005066:	d2db      	bcs.n	8005020 <quorem+0x44>
 8005068:	f855 300b 	ldr.w	r3, [r5, fp]
 800506c:	b92b      	cbnz	r3, 800507a <quorem+0x9e>
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	3b04      	subs	r3, #4
 8005072:	429d      	cmp	r5, r3
 8005074:	461a      	mov	r2, r3
 8005076:	d32f      	bcc.n	80050d8 <quorem+0xfc>
 8005078:	613c      	str	r4, [r7, #16]
 800507a:	4638      	mov	r0, r7
 800507c:	f001 f8d0 	bl	8006220 <__mcmp>
 8005080:	2800      	cmp	r0, #0
 8005082:	db25      	blt.n	80050d0 <quorem+0xf4>
 8005084:	4628      	mov	r0, r5
 8005086:	f04f 0c00 	mov.w	ip, #0
 800508a:	3601      	adds	r6, #1
 800508c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005090:	f8d0 e000 	ldr.w	lr, [r0]
 8005094:	b28b      	uxth	r3, r1
 8005096:	ebac 0303 	sub.w	r3, ip, r3
 800509a:	fa1f f28e 	uxth.w	r2, lr
 800509e:	4413      	add	r3, r2
 80050a0:	0c0a      	lsrs	r2, r1, #16
 80050a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b0:	45c1      	cmp	r9, r8
 80050b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050b6:	f840 3b04 	str.w	r3, [r0], #4
 80050ba:	d2e7      	bcs.n	800508c <quorem+0xb0>
 80050bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050c4:	b922      	cbnz	r2, 80050d0 <quorem+0xf4>
 80050c6:	3b04      	subs	r3, #4
 80050c8:	429d      	cmp	r5, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	d30a      	bcc.n	80050e4 <quorem+0x108>
 80050ce:	613c      	str	r4, [r7, #16]
 80050d0:	4630      	mov	r0, r6
 80050d2:	b003      	add	sp, #12
 80050d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	3b04      	subs	r3, #4
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d1cb      	bne.n	8005078 <quorem+0x9c>
 80050e0:	3c01      	subs	r4, #1
 80050e2:	e7c6      	b.n	8005072 <quorem+0x96>
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	3b04      	subs	r3, #4
 80050e8:	2a00      	cmp	r2, #0
 80050ea:	d1f0      	bne.n	80050ce <quorem+0xf2>
 80050ec:	3c01      	subs	r4, #1
 80050ee:	e7eb      	b.n	80050c8 <quorem+0xec>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e7ee      	b.n	80050d2 <quorem+0xf6>
 80050f4:	0000      	movs	r0, r0
	...

080050f8 <_dtoa_r>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	4616      	mov	r6, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005102:	b099      	sub	sp, #100	; 0x64
 8005104:	4605      	mov	r5, r0
 8005106:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800510a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800510e:	b974      	cbnz	r4, 800512e <_dtoa_r+0x36>
 8005110:	2010      	movs	r0, #16
 8005112:	f000 fde3 	bl	8005cdc <malloc>
 8005116:	4602      	mov	r2, r0
 8005118:	6268      	str	r0, [r5, #36]	; 0x24
 800511a:	b920      	cbnz	r0, 8005126 <_dtoa_r+0x2e>
 800511c:	21ea      	movs	r1, #234	; 0xea
 800511e:	4ba8      	ldr	r3, [pc, #672]	; (80053c0 <_dtoa_r+0x2c8>)
 8005120:	48a8      	ldr	r0, [pc, #672]	; (80053c4 <_dtoa_r+0x2cc>)
 8005122:	f001 fbdd 	bl	80068e0 <__assert_func>
 8005126:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800512a:	6004      	str	r4, [r0, #0]
 800512c:	60c4      	str	r4, [r0, #12]
 800512e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	b151      	cbz	r1, 800514a <_dtoa_r+0x52>
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	2301      	movs	r3, #1
 8005138:	4093      	lsls	r3, r2
 800513a:	604a      	str	r2, [r1, #4]
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fe30 	bl	8005da4 <_Bfree>
 8005144:	2200      	movs	r2, #0
 8005146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	1e3b      	subs	r3, r7, #0
 800514c:	bfaf      	iteee	ge
 800514e:	2300      	movge	r3, #0
 8005150:	2201      	movlt	r2, #1
 8005152:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005156:	9305      	strlt	r3, [sp, #20]
 8005158:	bfa8      	it	ge
 800515a:	f8c8 3000 	strge.w	r3, [r8]
 800515e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005162:	4b99      	ldr	r3, [pc, #612]	; (80053c8 <_dtoa_r+0x2d0>)
 8005164:	bfb8      	it	lt
 8005166:	f8c8 2000 	strlt.w	r2, [r8]
 800516a:	ea33 0309 	bics.w	r3, r3, r9
 800516e:	d119      	bne.n	80051a4 <_dtoa_r+0xac>
 8005170:	f242 730f 	movw	r3, #9999	; 0x270f
 8005174:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800517c:	4333      	orrs	r3, r6
 800517e:	f000 857f 	beq.w	8005c80 <_dtoa_r+0xb88>
 8005182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005184:	b953      	cbnz	r3, 800519c <_dtoa_r+0xa4>
 8005186:	4b91      	ldr	r3, [pc, #580]	; (80053cc <_dtoa_r+0x2d4>)
 8005188:	e022      	b.n	80051d0 <_dtoa_r+0xd8>
 800518a:	4b91      	ldr	r3, [pc, #580]	; (80053d0 <_dtoa_r+0x2d8>)
 800518c:	9303      	str	r3, [sp, #12]
 800518e:	3308      	adds	r3, #8
 8005190:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	9803      	ldr	r0, [sp, #12]
 8005196:	b019      	add	sp, #100	; 0x64
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	4b8b      	ldr	r3, [pc, #556]	; (80053cc <_dtoa_r+0x2d4>)
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	3303      	adds	r3, #3
 80051a2:	e7f5      	b.n	8005190 <_dtoa_r+0x98>
 80051a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	f7fb fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80051b8:	4680      	mov	r8, r0
 80051ba:	b158      	cbz	r0, 80051d4 <_dtoa_r+0xdc>
 80051bc:	2301      	movs	r3, #1
 80051be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8558 	beq.w	8005c7a <_dtoa_r+0xb82>
 80051ca:	4882      	ldr	r0, [pc, #520]	; (80053d4 <_dtoa_r+0x2dc>)
 80051cc:	6018      	str	r0, [r3, #0]
 80051ce:	1e43      	subs	r3, r0, #1
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	e7df      	b.n	8005194 <_dtoa_r+0x9c>
 80051d4:	ab16      	add	r3, sp, #88	; 0x58
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	ab17      	add	r3, sp, #92	; 0x5c
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4628      	mov	r0, r5
 80051de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051e2:	f001 f8c5 	bl	8006370 <__d2b>
 80051e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80051ea:	4683      	mov	fp, r0
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	d07f      	beq.n	80052f0 <_dtoa_r+0x1f8>
 80051f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80051fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005202:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005206:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800520a:	2200      	movs	r2, #0
 800520c:	4b72      	ldr	r3, [pc, #456]	; (80053d8 <_dtoa_r+0x2e0>)
 800520e:	f7fa ffab 	bl	8000168 <__aeabi_dsub>
 8005212:	a365      	add	r3, pc, #404	; (adr r3, 80053a8 <_dtoa_r+0x2b0>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f95e 	bl	80004d8 <__aeabi_dmul>
 800521c:	a364      	add	r3, pc, #400	; (adr r3, 80053b0 <_dtoa_r+0x2b8>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fa ffa3 	bl	800016c <__adddf3>
 8005226:	4606      	mov	r6, r0
 8005228:	4620      	mov	r0, r4
 800522a:	460f      	mov	r7, r1
 800522c:	f7fb f8ea 	bl	8000404 <__aeabi_i2d>
 8005230:	a361      	add	r3, pc, #388	; (adr r3, 80053b8 <_dtoa_r+0x2c0>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f7fb f94f 	bl	80004d8 <__aeabi_dmul>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fa ff93 	bl	800016c <__adddf3>
 8005246:	4606      	mov	r6, r0
 8005248:	460f      	mov	r7, r1
 800524a:	f7fb fbf5 	bl	8000a38 <__aeabi_d2iz>
 800524e:	2200      	movs	r2, #0
 8005250:	4682      	mov	sl, r0
 8005252:	2300      	movs	r3, #0
 8005254:	4630      	mov	r0, r6
 8005256:	4639      	mov	r1, r7
 8005258:	f7fb fbb0 	bl	80009bc <__aeabi_dcmplt>
 800525c:	b148      	cbz	r0, 8005272 <_dtoa_r+0x17a>
 800525e:	4650      	mov	r0, sl
 8005260:	f7fb f8d0 	bl	8000404 <__aeabi_i2d>
 8005264:	4632      	mov	r2, r6
 8005266:	463b      	mov	r3, r7
 8005268:	f7fb fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800526c:	b908      	cbnz	r0, 8005272 <_dtoa_r+0x17a>
 800526e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005272:	f1ba 0f16 	cmp.w	sl, #22
 8005276:	d858      	bhi.n	800532a <_dtoa_r+0x232>
 8005278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800527c:	4b57      	ldr	r3, [pc, #348]	; (80053dc <_dtoa_r+0x2e4>)
 800527e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fb fb99 	bl	80009bc <__aeabi_dcmplt>
 800528a:	2800      	cmp	r0, #0
 800528c:	d04f      	beq.n	800532e <_dtoa_r+0x236>
 800528e:	2300      	movs	r3, #0
 8005290:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005294:	930f      	str	r3, [sp, #60]	; 0x3c
 8005296:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005298:	1b1c      	subs	r4, r3, r4
 800529a:	1e63      	subs	r3, r4, #1
 800529c:	9309      	str	r3, [sp, #36]	; 0x24
 800529e:	bf49      	itett	mi
 80052a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80052a4:	2300      	movpl	r3, #0
 80052a6:	9306      	strmi	r3, [sp, #24]
 80052a8:	2300      	movmi	r3, #0
 80052aa:	bf54      	ite	pl
 80052ac:	9306      	strpl	r3, [sp, #24]
 80052ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052b0:	f1ba 0f00 	cmp.w	sl, #0
 80052b4:	db3d      	blt.n	8005332 <_dtoa_r+0x23a>
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80052bc:	4453      	add	r3, sl
 80052be:	9309      	str	r3, [sp, #36]	; 0x24
 80052c0:	2300      	movs	r3, #0
 80052c2:	930a      	str	r3, [sp, #40]	; 0x28
 80052c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	f200 808c 	bhi.w	80053e4 <_dtoa_r+0x2ec>
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	bfc4      	itt	gt
 80052d0:	3b04      	subgt	r3, #4
 80052d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80052d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d6:	bfc8      	it	gt
 80052d8:	2400      	movgt	r4, #0
 80052da:	f1a3 0302 	sub.w	r3, r3, #2
 80052de:	bfd8      	it	le
 80052e0:	2401      	movle	r4, #1
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	f200 808a 	bhi.w	80053fc <_dtoa_r+0x304>
 80052e8:	e8df f003 	tbb	[pc, r3]
 80052ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80052f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80052f4:	441c      	add	r4, r3
 80052f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	bfc3      	ittte	gt
 80052fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005302:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005306:	fa09 f303 	lslgt.w	r3, r9, r3
 800530a:	f1c3 0320 	rsble	r3, r3, #32
 800530e:	bfc6      	itte	gt
 8005310:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005314:	4318      	orrgt	r0, r3
 8005316:	fa06 f003 	lslle.w	r0, r6, r3
 800531a:	f7fb f863 	bl	80003e4 <__aeabi_ui2d>
 800531e:	2301      	movs	r3, #1
 8005320:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005324:	3c01      	subs	r4, #1
 8005326:	9313      	str	r3, [sp, #76]	; 0x4c
 8005328:	e76f      	b.n	800520a <_dtoa_r+0x112>
 800532a:	2301      	movs	r3, #1
 800532c:	e7b2      	b.n	8005294 <_dtoa_r+0x19c>
 800532e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005330:	e7b1      	b.n	8005296 <_dtoa_r+0x19e>
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	eba3 030a 	sub.w	r3, r3, sl
 8005338:	9306      	str	r3, [sp, #24]
 800533a:	f1ca 0300 	rsb	r3, sl, #0
 800533e:	930a      	str	r3, [sp, #40]	; 0x28
 8005340:	2300      	movs	r3, #0
 8005342:	930e      	str	r3, [sp, #56]	; 0x38
 8005344:	e7be      	b.n	80052c4 <_dtoa_r+0x1cc>
 8005346:	2300      	movs	r3, #0
 8005348:	930b      	str	r3, [sp, #44]	; 0x2c
 800534a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800534c:	2b00      	cmp	r3, #0
 800534e:	dc58      	bgt.n	8005402 <_dtoa_r+0x30a>
 8005350:	f04f 0901 	mov.w	r9, #1
 8005354:	464b      	mov	r3, r9
 8005356:	f8cd 9020 	str.w	r9, [sp, #32]
 800535a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800535e:	2200      	movs	r2, #0
 8005360:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005362:	6042      	str	r2, [r0, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	f102 0614 	add.w	r6, r2, #20
 800536a:	429e      	cmp	r6, r3
 800536c:	6841      	ldr	r1, [r0, #4]
 800536e:	d94e      	bls.n	800540e <_dtoa_r+0x316>
 8005370:	4628      	mov	r0, r5
 8005372:	f000 fcd7 	bl	8005d24 <_Balloc>
 8005376:	9003      	str	r0, [sp, #12]
 8005378:	2800      	cmp	r0, #0
 800537a:	d14c      	bne.n	8005416 <_dtoa_r+0x31e>
 800537c:	4602      	mov	r2, r0
 800537e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <_dtoa_r+0x2e8>)
 8005384:	e6cc      	b.n	8005120 <_dtoa_r+0x28>
 8005386:	2301      	movs	r3, #1
 8005388:	e7de      	b.n	8005348 <_dtoa_r+0x250>
 800538a:	2300      	movs	r3, #0
 800538c:	930b      	str	r3, [sp, #44]	; 0x2c
 800538e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005390:	eb0a 0903 	add.w	r9, sl, r3
 8005394:	f109 0301 	add.w	r3, r9, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	9308      	str	r3, [sp, #32]
 800539c:	bfb8      	it	lt
 800539e:	2301      	movlt	r3, #1
 80053a0:	e7dd      	b.n	800535e <_dtoa_r+0x266>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7f2      	b.n	800538c <_dtoa_r+0x294>
 80053a6:	bf00      	nop
 80053a8:	636f4361 	.word	0x636f4361
 80053ac:	3fd287a7 	.word	0x3fd287a7
 80053b0:	8b60c8b3 	.word	0x8b60c8b3
 80053b4:	3fc68a28 	.word	0x3fc68a28
 80053b8:	509f79fb 	.word	0x509f79fb
 80053bc:	3fd34413 	.word	0x3fd34413
 80053c0:	08007591 	.word	0x08007591
 80053c4:	080075a8 	.word	0x080075a8
 80053c8:	7ff00000 	.word	0x7ff00000
 80053cc:	0800758d 	.word	0x0800758d
 80053d0:	08007584 	.word	0x08007584
 80053d4:	08007561 	.word	0x08007561
 80053d8:	3ff80000 	.word	0x3ff80000
 80053dc:	08007698 	.word	0x08007698
 80053e0:	08007603 	.word	0x08007603
 80053e4:	2401      	movs	r4, #1
 80053e6:	2300      	movs	r3, #0
 80053e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80053ea:	9322      	str	r3, [sp, #136]	; 0x88
 80053ec:	f04f 39ff 	mov.w	r9, #4294967295
 80053f0:	2200      	movs	r2, #0
 80053f2:	2312      	movs	r3, #18
 80053f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80053f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80053fa:	e7b0      	b.n	800535e <_dtoa_r+0x266>
 80053fc:	2301      	movs	r3, #1
 80053fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005400:	e7f4      	b.n	80053ec <_dtoa_r+0x2f4>
 8005402:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005406:	464b      	mov	r3, r9
 8005408:	f8cd 9020 	str.w	r9, [sp, #32]
 800540c:	e7a7      	b.n	800535e <_dtoa_r+0x266>
 800540e:	3101      	adds	r1, #1
 8005410:	6041      	str	r1, [r0, #4]
 8005412:	0052      	lsls	r2, r2, #1
 8005414:	e7a7      	b.n	8005366 <_dtoa_r+0x26e>
 8005416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005418:	9a03      	ldr	r2, [sp, #12]
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	2b0e      	cmp	r3, #14
 8005420:	f200 80a8 	bhi.w	8005574 <_dtoa_r+0x47c>
 8005424:	2c00      	cmp	r4, #0
 8005426:	f000 80a5 	beq.w	8005574 <_dtoa_r+0x47c>
 800542a:	f1ba 0f00 	cmp.w	sl, #0
 800542e:	dd34      	ble.n	800549a <_dtoa_r+0x3a2>
 8005430:	4a9a      	ldr	r2, [pc, #616]	; (800569c <_dtoa_r+0x5a4>)
 8005432:	f00a 030f 	and.w	r3, sl, #15
 8005436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800543a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800543e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005442:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005446:	ea4f 142a 	mov.w	r4, sl, asr #4
 800544a:	d016      	beq.n	800547a <_dtoa_r+0x382>
 800544c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005450:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <_dtoa_r+0x5a8>)
 8005452:	2703      	movs	r7, #3
 8005454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005458:	f7fb f968 	bl	800072c <__aeabi_ddiv>
 800545c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005460:	f004 040f 	and.w	r4, r4, #15
 8005464:	4e8e      	ldr	r6, [pc, #568]	; (80056a0 <_dtoa_r+0x5a8>)
 8005466:	b954      	cbnz	r4, 800547e <_dtoa_r+0x386>
 8005468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800546c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005470:	f7fb f95c 	bl	800072c <__aeabi_ddiv>
 8005474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005478:	e029      	b.n	80054ce <_dtoa_r+0x3d6>
 800547a:	2702      	movs	r7, #2
 800547c:	e7f2      	b.n	8005464 <_dtoa_r+0x36c>
 800547e:	07e1      	lsls	r1, r4, #31
 8005480:	d508      	bpl.n	8005494 <_dtoa_r+0x39c>
 8005482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800548a:	f7fb f825 	bl	80004d8 <__aeabi_dmul>
 800548e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005492:	3701      	adds	r7, #1
 8005494:	1064      	asrs	r4, r4, #1
 8005496:	3608      	adds	r6, #8
 8005498:	e7e5      	b.n	8005466 <_dtoa_r+0x36e>
 800549a:	f000 80a5 	beq.w	80055e8 <_dtoa_r+0x4f0>
 800549e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054a2:	f1ca 0400 	rsb	r4, sl, #0
 80054a6:	4b7d      	ldr	r3, [pc, #500]	; (800569c <_dtoa_r+0x5a4>)
 80054a8:	f004 020f 	and.w	r2, r4, #15
 80054ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f7fb f810 	bl	80004d8 <__aeabi_dmul>
 80054b8:	2702      	movs	r7, #2
 80054ba:	2300      	movs	r3, #0
 80054bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c0:	4e77      	ldr	r6, [pc, #476]	; (80056a0 <_dtoa_r+0x5a8>)
 80054c2:	1124      	asrs	r4, r4, #4
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	f040 8084 	bne.w	80055d2 <_dtoa_r+0x4da>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1d2      	bne.n	8005474 <_dtoa_r+0x37c>
 80054ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 808b 	beq.w	80055ec <_dtoa_r+0x4f4>
 80054d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054e2:	2200      	movs	r2, #0
 80054e4:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <_dtoa_r+0x5ac>)
 80054e6:	f7fb fa69 	bl	80009bc <__aeabi_dcmplt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d07e      	beq.n	80055ec <_dtoa_r+0x4f4>
 80054ee:	9b08      	ldr	r3, [sp, #32]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07b      	beq.n	80055ec <_dtoa_r+0x4f4>
 80054f4:	f1b9 0f00 	cmp.w	r9, #0
 80054f8:	dd38      	ble.n	800556c <_dtoa_r+0x474>
 80054fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054fe:	2200      	movs	r2, #0
 8005500:	4b69      	ldr	r3, [pc, #420]	; (80056a8 <_dtoa_r+0x5b0>)
 8005502:	f7fa ffe9 	bl	80004d8 <__aeabi_dmul>
 8005506:	464c      	mov	r4, r9
 8005508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800550c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005510:	3701      	adds	r7, #1
 8005512:	4638      	mov	r0, r7
 8005514:	f7fa ff76 	bl	8000404 <__aeabi_i2d>
 8005518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800551c:	f7fa ffdc 	bl	80004d8 <__aeabi_dmul>
 8005520:	2200      	movs	r2, #0
 8005522:	4b62      	ldr	r3, [pc, #392]	; (80056ac <_dtoa_r+0x5b4>)
 8005524:	f7fa fe22 	bl	800016c <__adddf3>
 8005528:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800552c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005530:	9611      	str	r6, [sp, #68]	; 0x44
 8005532:	2c00      	cmp	r4, #0
 8005534:	d15d      	bne.n	80055f2 <_dtoa_r+0x4fa>
 8005536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553a:	2200      	movs	r2, #0
 800553c:	4b5c      	ldr	r3, [pc, #368]	; (80056b0 <_dtoa_r+0x5b8>)
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800554a:	4633      	mov	r3, r6
 800554c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800554e:	f7fb fa53 	bl	80009f8 <__aeabi_dcmpgt>
 8005552:	2800      	cmp	r0, #0
 8005554:	f040 829c 	bne.w	8005a90 <_dtoa_r+0x998>
 8005558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800555c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800555e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005562:	f7fb fa2b 	bl	80009bc <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	f040 8290 	bne.w	8005a8c <_dtoa_r+0x994>
 800556c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005576:	2b00      	cmp	r3, #0
 8005578:	f2c0 8152 	blt.w	8005820 <_dtoa_r+0x728>
 800557c:	f1ba 0f0e 	cmp.w	sl, #14
 8005580:	f300 814e 	bgt.w	8005820 <_dtoa_r+0x728>
 8005584:	4b45      	ldr	r3, [pc, #276]	; (800569c <_dtoa_r+0x5a4>)
 8005586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800558a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800558e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005594:	2b00      	cmp	r3, #0
 8005596:	f280 80db 	bge.w	8005750 <_dtoa_r+0x658>
 800559a:	9b08      	ldr	r3, [sp, #32]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f300 80d7 	bgt.w	8005750 <_dtoa_r+0x658>
 80055a2:	f040 8272 	bne.w	8005a8a <_dtoa_r+0x992>
 80055a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055aa:	2200      	movs	r2, #0
 80055ac:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <_dtoa_r+0x5b8>)
 80055ae:	f7fa ff93 	bl	80004d8 <__aeabi_dmul>
 80055b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b6:	f7fb fa15 	bl	80009e4 <__aeabi_dcmpge>
 80055ba:	9c08      	ldr	r4, [sp, #32]
 80055bc:	4626      	mov	r6, r4
 80055be:	2800      	cmp	r0, #0
 80055c0:	f040 8248 	bne.w	8005a54 <_dtoa_r+0x95c>
 80055c4:	2331      	movs	r3, #49	; 0x31
 80055c6:	9f03      	ldr	r7, [sp, #12]
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	f807 3b01 	strb.w	r3, [r7], #1
 80055d0:	e244      	b.n	8005a5c <_dtoa_r+0x964>
 80055d2:	07e2      	lsls	r2, r4, #31
 80055d4:	d505      	bpl.n	80055e2 <_dtoa_r+0x4ea>
 80055d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	2301      	movs	r3, #1
 80055e0:	3701      	adds	r7, #1
 80055e2:	1064      	asrs	r4, r4, #1
 80055e4:	3608      	adds	r6, #8
 80055e6:	e76d      	b.n	80054c4 <_dtoa_r+0x3cc>
 80055e8:	2702      	movs	r7, #2
 80055ea:	e770      	b.n	80054ce <_dtoa_r+0x3d6>
 80055ec:	46d0      	mov	r8, sl
 80055ee:	9c08      	ldr	r4, [sp, #32]
 80055f0:	e78f      	b.n	8005512 <_dtoa_r+0x41a>
 80055f2:	9903      	ldr	r1, [sp, #12]
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <_dtoa_r+0x5a4>)
 80055f6:	4421      	add	r1, r4
 80055f8:	9112      	str	r1, [sp, #72]	; 0x48
 80055fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005600:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005604:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005608:	2900      	cmp	r1, #0
 800560a:	d055      	beq.n	80056b8 <_dtoa_r+0x5c0>
 800560c:	2000      	movs	r0, #0
 800560e:	4929      	ldr	r1, [pc, #164]	; (80056b4 <_dtoa_r+0x5bc>)
 8005610:	f7fb f88c 	bl	800072c <__aeabi_ddiv>
 8005614:	463b      	mov	r3, r7
 8005616:	4632      	mov	r2, r6
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_dsub>
 800561c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005620:	9f03      	ldr	r7, [sp, #12]
 8005622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005626:	f7fb fa07 	bl	8000a38 <__aeabi_d2iz>
 800562a:	4604      	mov	r4, r0
 800562c:	f7fa feea 	bl	8000404 <__aeabi_i2d>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005638:	f7fa fd96 	bl	8000168 <__aeabi_dsub>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	3430      	adds	r4, #48	; 0x30
 8005642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800564a:	f807 4b01 	strb.w	r4, [r7], #1
 800564e:	f7fb f9b5 	bl	80009bc <__aeabi_dcmplt>
 8005652:	2800      	cmp	r0, #0
 8005654:	d174      	bne.n	8005740 <_dtoa_r+0x648>
 8005656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565a:	2000      	movs	r0, #0
 800565c:	4911      	ldr	r1, [pc, #68]	; (80056a4 <_dtoa_r+0x5ac>)
 800565e:	f7fa fd83 	bl	8000168 <__aeabi_dsub>
 8005662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005666:	f7fb f9a9 	bl	80009bc <__aeabi_dcmplt>
 800566a:	2800      	cmp	r0, #0
 800566c:	f040 80b7 	bne.w	80057de <_dtoa_r+0x6e6>
 8005670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005672:	429f      	cmp	r7, r3
 8005674:	f43f af7a 	beq.w	800556c <_dtoa_r+0x474>
 8005678:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800567c:	2200      	movs	r2, #0
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <_dtoa_r+0x5b0>)
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	2200      	movs	r2, #0
 8005686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800568a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <_dtoa_r+0x5b0>)
 8005690:	f7fa ff22 	bl	80004d8 <__aeabi_dmul>
 8005694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005698:	e7c3      	b.n	8005622 <_dtoa_r+0x52a>
 800569a:	bf00      	nop
 800569c:	08007698 	.word	0x08007698
 80056a0:	08007670 	.word	0x08007670
 80056a4:	3ff00000 	.word	0x3ff00000
 80056a8:	40240000 	.word	0x40240000
 80056ac:	401c0000 	.word	0x401c0000
 80056b0:	40140000 	.word	0x40140000
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	4630      	mov	r0, r6
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7fa ff0c 	bl	80004d8 <__aeabi_dmul>
 80056c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056c6:	9c03      	ldr	r4, [sp, #12]
 80056c8:	9314      	str	r3, [sp, #80]	; 0x50
 80056ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ce:	f7fb f9b3 	bl	8000a38 <__aeabi_d2iz>
 80056d2:	9015      	str	r0, [sp, #84]	; 0x54
 80056d4:	f7fa fe96 	bl	8000404 <__aeabi_i2d>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056e0:	f7fa fd42 	bl	8000168 <__aeabi_dsub>
 80056e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056e6:	4606      	mov	r6, r0
 80056e8:	3330      	adds	r3, #48	; 0x30
 80056ea:	f804 3b01 	strb.w	r3, [r4], #1
 80056ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056f0:	460f      	mov	r7, r1
 80056f2:	429c      	cmp	r4, r3
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	d124      	bne.n	8005744 <_dtoa_r+0x64c>
 80056fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056fe:	4bb0      	ldr	r3, [pc, #704]	; (80059c0 <_dtoa_r+0x8c8>)
 8005700:	f7fa fd34 	bl	800016c <__adddf3>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb f974 	bl	80009f8 <__aeabi_dcmpgt>
 8005710:	2800      	cmp	r0, #0
 8005712:	d163      	bne.n	80057dc <_dtoa_r+0x6e4>
 8005714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005718:	2000      	movs	r0, #0
 800571a:	49a9      	ldr	r1, [pc, #676]	; (80059c0 <_dtoa_r+0x8c8>)
 800571c:	f7fa fd24 	bl	8000168 <__aeabi_dsub>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4630      	mov	r0, r6
 8005726:	4639      	mov	r1, r7
 8005728:	f7fb f948 	bl	80009bc <__aeabi_dcmplt>
 800572c:	2800      	cmp	r0, #0
 800572e:	f43f af1d 	beq.w	800556c <_dtoa_r+0x474>
 8005732:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005734:	1e7b      	subs	r3, r7, #1
 8005736:	9314      	str	r3, [sp, #80]	; 0x50
 8005738:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d0f8      	beq.n	8005732 <_dtoa_r+0x63a>
 8005740:	46c2      	mov	sl, r8
 8005742:	e03b      	b.n	80057bc <_dtoa_r+0x6c4>
 8005744:	4b9f      	ldr	r3, [pc, #636]	; (80059c4 <_dtoa_r+0x8cc>)
 8005746:	f7fa fec7 	bl	80004d8 <__aeabi_dmul>
 800574a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574e:	e7bc      	b.n	80056ca <_dtoa_r+0x5d2>
 8005750:	9f03      	ldr	r7, [sp, #12]
 8005752:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa ffe5 	bl	800072c <__aeabi_ddiv>
 8005762:	f7fb f969 	bl	8000a38 <__aeabi_d2iz>
 8005766:	4604      	mov	r4, r0
 8005768:	f7fa fe4c 	bl	8000404 <__aeabi_i2d>
 800576c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005770:	f7fa feb2 	bl	80004d8 <__aeabi_dmul>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4640      	mov	r0, r8
 800577a:	4649      	mov	r1, r9
 800577c:	f7fa fcf4 	bl	8000168 <__aeabi_dsub>
 8005780:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005784:	f807 6b01 	strb.w	r6, [r7], #1
 8005788:	9e03      	ldr	r6, [sp, #12]
 800578a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800578e:	1bbe      	subs	r6, r7, r6
 8005790:	45b4      	cmp	ip, r6
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	d136      	bne.n	8005806 <_dtoa_r+0x70e>
 8005798:	f7fa fce8 	bl	800016c <__adddf3>
 800579c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057a0:	4680      	mov	r8, r0
 80057a2:	4689      	mov	r9, r1
 80057a4:	f7fb f928 	bl	80009f8 <__aeabi_dcmpgt>
 80057a8:	bb58      	cbnz	r0, 8005802 <_dtoa_r+0x70a>
 80057aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fb f8f9 	bl	80009a8 <__aeabi_dcmpeq>
 80057b6:	b108      	cbz	r0, 80057bc <_dtoa_r+0x6c4>
 80057b8:	07e1      	lsls	r1, r4, #31
 80057ba:	d422      	bmi.n	8005802 <_dtoa_r+0x70a>
 80057bc:	4628      	mov	r0, r5
 80057be:	4659      	mov	r1, fp
 80057c0:	f000 faf0 	bl	8005da4 <_Bfree>
 80057c4:	2300      	movs	r3, #0
 80057c6:	703b      	strb	r3, [r7, #0]
 80057c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057ca:	f10a 0001 	add.w	r0, sl, #1
 80057ce:	6018      	str	r0, [r3, #0]
 80057d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f43f acde 	beq.w	8005194 <_dtoa_r+0x9c>
 80057d8:	601f      	str	r7, [r3, #0]
 80057da:	e4db      	b.n	8005194 <_dtoa_r+0x9c>
 80057dc:	4627      	mov	r7, r4
 80057de:	463b      	mov	r3, r7
 80057e0:	461f      	mov	r7, r3
 80057e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057e6:	2a39      	cmp	r2, #57	; 0x39
 80057e8:	d107      	bne.n	80057fa <_dtoa_r+0x702>
 80057ea:	9a03      	ldr	r2, [sp, #12]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d1f7      	bne.n	80057e0 <_dtoa_r+0x6e8>
 80057f0:	2230      	movs	r2, #48	; 0x30
 80057f2:	9903      	ldr	r1, [sp, #12]
 80057f4:	f108 0801 	add.w	r8, r8, #1
 80057f8:	700a      	strb	r2, [r1, #0]
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	3201      	adds	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e79e      	b.n	8005740 <_dtoa_r+0x648>
 8005802:	46d0      	mov	r8, sl
 8005804:	e7eb      	b.n	80057de <_dtoa_r+0x6e6>
 8005806:	2200      	movs	r2, #0
 8005808:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <_dtoa_r+0x8cc>)
 800580a:	f7fa fe65 	bl	80004d8 <__aeabi_dmul>
 800580e:	2200      	movs	r2, #0
 8005810:	2300      	movs	r3, #0
 8005812:	4680      	mov	r8, r0
 8005814:	4689      	mov	r9, r1
 8005816:	f7fb f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800581a:	2800      	cmp	r0, #0
 800581c:	d09b      	beq.n	8005756 <_dtoa_r+0x65e>
 800581e:	e7cd      	b.n	80057bc <_dtoa_r+0x6c4>
 8005820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005822:	2a00      	cmp	r2, #0
 8005824:	f000 80d0 	beq.w	80059c8 <_dtoa_r+0x8d0>
 8005828:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800582a:	2a01      	cmp	r2, #1
 800582c:	f300 80ae 	bgt.w	800598c <_dtoa_r+0x894>
 8005830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005832:	2a00      	cmp	r2, #0
 8005834:	f000 80a6 	beq.w	8005984 <_dtoa_r+0x88c>
 8005838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800583c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800583e:	9f06      	ldr	r7, [sp, #24]
 8005840:	9a06      	ldr	r2, [sp, #24]
 8005842:	2101      	movs	r1, #1
 8005844:	441a      	add	r2, r3
 8005846:	9206      	str	r2, [sp, #24]
 8005848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584a:	4628      	mov	r0, r5
 800584c:	441a      	add	r2, r3
 800584e:	9209      	str	r2, [sp, #36]	; 0x24
 8005850:	f000 fb5e 	bl	8005f10 <__i2b>
 8005854:	4606      	mov	r6, r0
 8005856:	2f00      	cmp	r7, #0
 8005858:	dd0c      	ble.n	8005874 <_dtoa_r+0x77c>
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd09      	ble.n	8005874 <_dtoa_r+0x77c>
 8005860:	42bb      	cmp	r3, r7
 8005862:	bfa8      	it	ge
 8005864:	463b      	movge	r3, r7
 8005866:	9a06      	ldr	r2, [sp, #24]
 8005868:	1aff      	subs	r7, r7, r3
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	9206      	str	r2, [sp, #24]
 800586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	9309      	str	r3, [sp, #36]	; 0x24
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	b1f3      	cbz	r3, 80058b6 <_dtoa_r+0x7be>
 8005878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80a8 	beq.w	80059d0 <_dtoa_r+0x8d8>
 8005880:	2c00      	cmp	r4, #0
 8005882:	dd10      	ble.n	80058a6 <_dtoa_r+0x7ae>
 8005884:	4631      	mov	r1, r6
 8005886:	4622      	mov	r2, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 fbff 	bl	800608c <__pow5mult>
 800588e:	465a      	mov	r2, fp
 8005890:	4601      	mov	r1, r0
 8005892:	4606      	mov	r6, r0
 8005894:	4628      	mov	r0, r5
 8005896:	f000 fb51 	bl	8005f3c <__multiply>
 800589a:	4680      	mov	r8, r0
 800589c:	4659      	mov	r1, fp
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 fa80 	bl	8005da4 <_Bfree>
 80058a4:	46c3      	mov	fp, r8
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a8:	1b1a      	subs	r2, r3, r4
 80058aa:	d004      	beq.n	80058b6 <_dtoa_r+0x7be>
 80058ac:	4659      	mov	r1, fp
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 fbec 	bl	800608c <__pow5mult>
 80058b4:	4683      	mov	fp, r0
 80058b6:	2101      	movs	r1, #1
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fb29 	bl	8005f10 <__i2b>
 80058be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c0:	4604      	mov	r4, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f340 8086 	ble.w	80059d4 <_dtoa_r+0x8dc>
 80058c8:	461a      	mov	r2, r3
 80058ca:	4601      	mov	r1, r0
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 fbdd 	bl	800608c <__pow5mult>
 80058d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d4:	4604      	mov	r4, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	dd7f      	ble.n	80059da <_dtoa_r+0x8e2>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058e4:	6918      	ldr	r0, [r3, #16]
 80058e6:	f000 fac5 	bl	8005e74 <__hi0bits>
 80058ea:	f1c0 0020 	rsb	r0, r0, #32
 80058ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f0:	4418      	add	r0, r3
 80058f2:	f010 001f 	ands.w	r0, r0, #31
 80058f6:	f000 8092 	beq.w	8005a1e <_dtoa_r+0x926>
 80058fa:	f1c0 0320 	rsb	r3, r0, #32
 80058fe:	2b04      	cmp	r3, #4
 8005900:	f340 808a 	ble.w	8005a18 <_dtoa_r+0x920>
 8005904:	f1c0 001c 	rsb	r0, r0, #28
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	4407      	add	r7, r0
 800590c:	4403      	add	r3, r0
 800590e:	9306      	str	r3, [sp, #24]
 8005910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005912:	4403      	add	r3, r0
 8005914:	9309      	str	r3, [sp, #36]	; 0x24
 8005916:	9b06      	ldr	r3, [sp, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dd05      	ble.n	8005928 <_dtoa_r+0x830>
 800591c:	4659      	mov	r1, fp
 800591e:	461a      	mov	r2, r3
 8005920:	4628      	mov	r0, r5
 8005922:	f000 fc0d 	bl	8006140 <__lshift>
 8005926:	4683      	mov	fp, r0
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd05      	ble.n	800593a <_dtoa_r+0x842>
 800592e:	4621      	mov	r1, r4
 8005930:	461a      	mov	r2, r3
 8005932:	4628      	mov	r0, r5
 8005934:	f000 fc04 	bl	8006140 <__lshift>
 8005938:	4604      	mov	r4, r0
 800593a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d070      	beq.n	8005a22 <_dtoa_r+0x92a>
 8005940:	4621      	mov	r1, r4
 8005942:	4658      	mov	r0, fp
 8005944:	f000 fc6c 	bl	8006220 <__mcmp>
 8005948:	2800      	cmp	r0, #0
 800594a:	da6a      	bge.n	8005a22 <_dtoa_r+0x92a>
 800594c:	2300      	movs	r3, #0
 800594e:	4659      	mov	r1, fp
 8005950:	220a      	movs	r2, #10
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fa48 	bl	8005de8 <__multadd>
 8005958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595a:	4683      	mov	fp, r0
 800595c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8194 	beq.w	8005c8e <_dtoa_r+0xb96>
 8005966:	4631      	mov	r1, r6
 8005968:	2300      	movs	r3, #0
 800596a:	220a      	movs	r2, #10
 800596c:	4628      	mov	r0, r5
 800596e:	f000 fa3b 	bl	8005de8 <__multadd>
 8005972:	f1b9 0f00 	cmp.w	r9, #0
 8005976:	4606      	mov	r6, r0
 8005978:	f300 8093 	bgt.w	8005aa2 <_dtoa_r+0x9aa>
 800597c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800597e:	2b02      	cmp	r3, #2
 8005980:	dc57      	bgt.n	8005a32 <_dtoa_r+0x93a>
 8005982:	e08e      	b.n	8005aa2 <_dtoa_r+0x9aa>
 8005984:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800598a:	e757      	b.n	800583c <_dtoa_r+0x744>
 800598c:	9b08      	ldr	r3, [sp, #32]
 800598e:	1e5c      	subs	r4, r3, #1
 8005990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005992:	42a3      	cmp	r3, r4
 8005994:	bfb7      	itett	lt
 8005996:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005998:	1b1c      	subge	r4, r3, r4
 800599a:	1ae2      	sublt	r2, r4, r3
 800599c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800599e:	bfbe      	ittt	lt
 80059a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80059a2:	189b      	addlt	r3, r3, r2
 80059a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	bfb8      	it	lt
 80059aa:	2400      	movlt	r4, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbb      	ittet	lt
 80059b0:	9b06      	ldrlt	r3, [sp, #24]
 80059b2:	9a08      	ldrlt	r2, [sp, #32]
 80059b4:	9f06      	ldrge	r7, [sp, #24]
 80059b6:	1a9f      	sublt	r7, r3, r2
 80059b8:	bfac      	ite	ge
 80059ba:	9b08      	ldrge	r3, [sp, #32]
 80059bc:	2300      	movlt	r3, #0
 80059be:	e73f      	b.n	8005840 <_dtoa_r+0x748>
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	40240000 	.word	0x40240000
 80059c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059ca:	9f06      	ldr	r7, [sp, #24]
 80059cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059ce:	e742      	b.n	8005856 <_dtoa_r+0x75e>
 80059d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d2:	e76b      	b.n	80058ac <_dtoa_r+0x7b4>
 80059d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	dc19      	bgt.n	8005a0e <_dtoa_r+0x916>
 80059da:	9b04      	ldr	r3, [sp, #16]
 80059dc:	b9bb      	cbnz	r3, 8005a0e <_dtoa_r+0x916>
 80059de:	9b05      	ldr	r3, [sp, #20]
 80059e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e4:	b99b      	cbnz	r3, 8005a0e <_dtoa_r+0x916>
 80059e6:	9b05      	ldr	r3, [sp, #20]
 80059e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ec:	0d1b      	lsrs	r3, r3, #20
 80059ee:	051b      	lsls	r3, r3, #20
 80059f0:	b183      	cbz	r3, 8005a14 <_dtoa_r+0x91c>
 80059f2:	f04f 0801 	mov.w	r8, #1
 80059f6:	9b06      	ldr	r3, [sp, #24]
 80059f8:	3301      	adds	r3, #1
 80059fa:	9306      	str	r3, [sp, #24]
 80059fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fe:	3301      	adds	r3, #1
 8005a00:	9309      	str	r3, [sp, #36]	; 0x24
 8005a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f af6a 	bne.w	80058de <_dtoa_r+0x7e6>
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e76f      	b.n	80058ee <_dtoa_r+0x7f6>
 8005a0e:	f04f 0800 	mov.w	r8, #0
 8005a12:	e7f6      	b.n	8005a02 <_dtoa_r+0x90a>
 8005a14:	4698      	mov	r8, r3
 8005a16:	e7f4      	b.n	8005a02 <_dtoa_r+0x90a>
 8005a18:	f43f af7d 	beq.w	8005916 <_dtoa_r+0x81e>
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	301c      	adds	r0, #28
 8005a20:	e772      	b.n	8005908 <_dtoa_r+0x810>
 8005a22:	9b08      	ldr	r3, [sp, #32]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dc36      	bgt.n	8005a96 <_dtoa_r+0x99e>
 8005a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	dd33      	ble.n	8005a96 <_dtoa_r+0x99e>
 8005a2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a32:	f1b9 0f00 	cmp.w	r9, #0
 8005a36:	d10d      	bne.n	8005a54 <_dtoa_r+0x95c>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f9d2 	bl	8005de8 <__multadd>
 8005a44:	4601      	mov	r1, r0
 8005a46:	4604      	mov	r4, r0
 8005a48:	4658      	mov	r0, fp
 8005a4a:	f000 fbe9 	bl	8006220 <__mcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f73f adb8 	bgt.w	80055c4 <_dtoa_r+0x4cc>
 8005a54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a56:	9f03      	ldr	r7, [sp, #12]
 8005a58:	ea6f 0a03 	mvn.w	sl, r3
 8005a5c:	f04f 0800 	mov.w	r8, #0
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f99e 	bl	8005da4 <_Bfree>
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	f43f aea7 	beq.w	80057bc <_dtoa_r+0x6c4>
 8005a6e:	f1b8 0f00 	cmp.w	r8, #0
 8005a72:	d005      	beq.n	8005a80 <_dtoa_r+0x988>
 8005a74:	45b0      	cmp	r8, r6
 8005a76:	d003      	beq.n	8005a80 <_dtoa_r+0x988>
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f992 	bl	8005da4 <_Bfree>
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 f98e 	bl	8005da4 <_Bfree>
 8005a88:	e698      	b.n	80057bc <_dtoa_r+0x6c4>
 8005a8a:	2400      	movs	r4, #0
 8005a8c:	4626      	mov	r6, r4
 8005a8e:	e7e1      	b.n	8005a54 <_dtoa_r+0x95c>
 8005a90:	46c2      	mov	sl, r8
 8005a92:	4626      	mov	r6, r4
 8005a94:	e596      	b.n	80055c4 <_dtoa_r+0x4cc>
 8005a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80fd 	beq.w	8005c9c <_dtoa_r+0xba4>
 8005aa2:	2f00      	cmp	r7, #0
 8005aa4:	dd05      	ble.n	8005ab2 <_dtoa_r+0x9ba>
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	463a      	mov	r2, r7
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fb48 	bl	8006140 <__lshift>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	f1b8 0f00 	cmp.w	r8, #0
 8005ab6:	d05c      	beq.n	8005b72 <_dtoa_r+0xa7a>
 8005ab8:	4628      	mov	r0, r5
 8005aba:	6871      	ldr	r1, [r6, #4]
 8005abc:	f000 f932 	bl	8005d24 <_Balloc>
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	b928      	cbnz	r0, 8005ad0 <_dtoa_r+0x9d8>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <_dtoa_r+0xbd0>)
 8005acc:	f7ff bb28 	b.w	8005120 <_dtoa_r+0x28>
 8005ad0:	6932      	ldr	r2, [r6, #16]
 8005ad2:	f106 010c 	add.w	r1, r6, #12
 8005ad6:	3202      	adds	r2, #2
 8005ad8:	0092      	lsls	r2, r2, #2
 8005ada:	300c      	adds	r0, #12
 8005adc:	f000 f914 	bl	8005d08 <memcpy>
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 fb2b 	bl	8006140 <__lshift>
 8005aea:	46b0      	mov	r8, r6
 8005aec:	4606      	mov	r6, r0
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9308      	str	r3, [sp, #32]
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	444b      	add	r3, r9
 8005af8:	930a      	str	r3, [sp, #40]	; 0x28
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	9309      	str	r3, [sp, #36]	; 0x24
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	4621      	mov	r1, r4
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4658      	mov	r0, fp
 8005b0a:	9304      	str	r3, [sp, #16]
 8005b0c:	f7ff fa66 	bl	8004fdc <quorem>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4641      	mov	r1, r8
 8005b14:	3330      	adds	r3, #48	; 0x30
 8005b16:	9006      	str	r0, [sp, #24]
 8005b18:	4658      	mov	r0, fp
 8005b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1c:	f000 fb80 	bl	8006220 <__mcmp>
 8005b20:	4632      	mov	r2, r6
 8005b22:	4681      	mov	r9, r0
 8005b24:	4621      	mov	r1, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fb96 	bl	8006258 <__mdiff>
 8005b2c:	68c2      	ldr	r2, [r0, #12]
 8005b2e:	4607      	mov	r7, r0
 8005b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b32:	bb02      	cbnz	r2, 8005b76 <_dtoa_r+0xa7e>
 8005b34:	4601      	mov	r1, r0
 8005b36:	4658      	mov	r0, fp
 8005b38:	f000 fb72 	bl	8006220 <__mcmp>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b40:	4639      	mov	r1, r7
 8005b42:	4628      	mov	r0, r5
 8005b44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005b48:	f000 f92c 	bl	8005da4 <_Bfree>
 8005b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b50:	9f08      	ldr	r7, [sp, #32]
 8005b52:	ea43 0102 	orr.w	r1, r3, r2
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5c:	d10d      	bne.n	8005b7a <_dtoa_r+0xa82>
 8005b5e:	2b39      	cmp	r3, #57	; 0x39
 8005b60:	d029      	beq.n	8005bb6 <_dtoa_r+0xabe>
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	dd01      	ble.n	8005b6c <_dtoa_r+0xa74>
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	3331      	adds	r3, #49	; 0x31
 8005b6c:	9a04      	ldr	r2, [sp, #16]
 8005b6e:	7013      	strb	r3, [r2, #0]
 8005b70:	e776      	b.n	8005a60 <_dtoa_r+0x968>
 8005b72:	4630      	mov	r0, r6
 8005b74:	e7b9      	b.n	8005aea <_dtoa_r+0x9f2>
 8005b76:	2201      	movs	r2, #1
 8005b78:	e7e2      	b.n	8005b40 <_dtoa_r+0xa48>
 8005b7a:	f1b9 0f00 	cmp.w	r9, #0
 8005b7e:	db06      	blt.n	8005b8e <_dtoa_r+0xa96>
 8005b80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005b82:	ea41 0909 	orr.w	r9, r1, r9
 8005b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b88:	ea59 0101 	orrs.w	r1, r9, r1
 8005b8c:	d120      	bne.n	8005bd0 <_dtoa_r+0xad8>
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	ddec      	ble.n	8005b6c <_dtoa_r+0xa74>
 8005b92:	4659      	mov	r1, fp
 8005b94:	2201      	movs	r2, #1
 8005b96:	4628      	mov	r0, r5
 8005b98:	9308      	str	r3, [sp, #32]
 8005b9a:	f000 fad1 	bl	8006140 <__lshift>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4683      	mov	fp, r0
 8005ba2:	f000 fb3d 	bl	8006220 <__mcmp>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	9b08      	ldr	r3, [sp, #32]
 8005baa:	dc02      	bgt.n	8005bb2 <_dtoa_r+0xaba>
 8005bac:	d1de      	bne.n	8005b6c <_dtoa_r+0xa74>
 8005bae:	07da      	lsls	r2, r3, #31
 8005bb0:	d5dc      	bpl.n	8005b6c <_dtoa_r+0xa74>
 8005bb2:	2b39      	cmp	r3, #57	; 0x39
 8005bb4:	d1d8      	bne.n	8005b68 <_dtoa_r+0xa70>
 8005bb6:	2339      	movs	r3, #57	; 0x39
 8005bb8:	9a04      	ldr	r2, [sp, #16]
 8005bba:	7013      	strb	r3, [r2, #0]
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	2a39      	cmp	r2, #57	; 0x39
 8005bc8:	d050      	beq.n	8005c6c <_dtoa_r+0xb74>
 8005bca:	3201      	adds	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e747      	b.n	8005a60 <_dtoa_r+0x968>
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	dd03      	ble.n	8005bdc <_dtoa_r+0xae4>
 8005bd4:	2b39      	cmp	r3, #57	; 0x39
 8005bd6:	d0ee      	beq.n	8005bb6 <_dtoa_r+0xabe>
 8005bd8:	3301      	adds	r3, #1
 8005bda:	e7c7      	b.n	8005b6c <_dtoa_r+0xa74>
 8005bdc:	9a08      	ldr	r2, [sp, #32]
 8005bde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005be0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005be4:	428a      	cmp	r2, r1
 8005be6:	d02a      	beq.n	8005c3e <_dtoa_r+0xb46>
 8005be8:	4659      	mov	r1, fp
 8005bea:	2300      	movs	r3, #0
 8005bec:	220a      	movs	r2, #10
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f8fa 	bl	8005de8 <__multadd>
 8005bf4:	45b0      	cmp	r8, r6
 8005bf6:	4683      	mov	fp, r0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	f04f 020a 	mov.w	r2, #10
 8005c00:	4641      	mov	r1, r8
 8005c02:	4628      	mov	r0, r5
 8005c04:	d107      	bne.n	8005c16 <_dtoa_r+0xb1e>
 8005c06:	f000 f8ef 	bl	8005de8 <__multadd>
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	9b08      	ldr	r3, [sp, #32]
 8005c10:	3301      	adds	r3, #1
 8005c12:	9308      	str	r3, [sp, #32]
 8005c14:	e775      	b.n	8005b02 <_dtoa_r+0xa0a>
 8005c16:	f000 f8e7 	bl	8005de8 <__multadd>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	220a      	movs	r2, #10
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f8e0 	bl	8005de8 <__multadd>
 8005c28:	4606      	mov	r6, r0
 8005c2a:	e7f0      	b.n	8005c0e <_dtoa_r+0xb16>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	bfcc      	ite	gt
 8005c32:	464f      	movgt	r7, r9
 8005c34:	2701      	movle	r7, #1
 8005c36:	f04f 0800 	mov.w	r8, #0
 8005c3a:	9a03      	ldr	r2, [sp, #12]
 8005c3c:	4417      	add	r7, r2
 8005c3e:	4659      	mov	r1, fp
 8005c40:	2201      	movs	r2, #1
 8005c42:	4628      	mov	r0, r5
 8005c44:	9308      	str	r3, [sp, #32]
 8005c46:	f000 fa7b 	bl	8006140 <__lshift>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4683      	mov	fp, r0
 8005c4e:	f000 fae7 	bl	8006220 <__mcmp>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dcb2      	bgt.n	8005bbc <_dtoa_r+0xac4>
 8005c56:	d102      	bne.n	8005c5e <_dtoa_r+0xb66>
 8005c58:	9b08      	ldr	r3, [sp, #32]
 8005c5a:	07db      	lsls	r3, r3, #31
 8005c5c:	d4ae      	bmi.n	8005bbc <_dtoa_r+0xac4>
 8005c5e:	463b      	mov	r3, r7
 8005c60:	461f      	mov	r7, r3
 8005c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c66:	2a30      	cmp	r2, #48	; 0x30
 8005c68:	d0fa      	beq.n	8005c60 <_dtoa_r+0xb68>
 8005c6a:	e6f9      	b.n	8005a60 <_dtoa_r+0x968>
 8005c6c:	9a03      	ldr	r2, [sp, #12]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d1a5      	bne.n	8005bbe <_dtoa_r+0xac6>
 8005c72:	2331      	movs	r3, #49	; 0x31
 8005c74:	f10a 0a01 	add.w	sl, sl, #1
 8005c78:	e779      	b.n	8005b6e <_dtoa_r+0xa76>
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <_dtoa_r+0xbd4>)
 8005c7c:	f7ff baa8 	b.w	80051d0 <_dtoa_r+0xd8>
 8005c80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f47f aa81 	bne.w	800518a <_dtoa_r+0x92>
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <_dtoa_r+0xbd8>)
 8005c8a:	f7ff baa1 	b.w	80051d0 <_dtoa_r+0xd8>
 8005c8e:	f1b9 0f00 	cmp.w	r9, #0
 8005c92:	dc03      	bgt.n	8005c9c <_dtoa_r+0xba4>
 8005c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	f73f aecb 	bgt.w	8005a32 <_dtoa_r+0x93a>
 8005c9c:	9f03      	ldr	r7, [sp, #12]
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4658      	mov	r0, fp
 8005ca2:	f7ff f99b 	bl	8004fdc <quorem>
 8005ca6:	9a03      	ldr	r2, [sp, #12]
 8005ca8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005cac:	f807 3b01 	strb.w	r3, [r7], #1
 8005cb0:	1aba      	subs	r2, r7, r2
 8005cb2:	4591      	cmp	r9, r2
 8005cb4:	ddba      	ble.n	8005c2c <_dtoa_r+0xb34>
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	2300      	movs	r3, #0
 8005cba:	220a      	movs	r2, #10
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 f893 	bl	8005de8 <__multadd>
 8005cc2:	4683      	mov	fp, r0
 8005cc4:	e7eb      	b.n	8005c9e <_dtoa_r+0xba6>
 8005cc6:	bf00      	nop
 8005cc8:	08007603 	.word	0x08007603
 8005ccc:	08007560 	.word	0x08007560
 8005cd0:	08007584 	.word	0x08007584

08005cd4 <_localeconv_r>:
 8005cd4:	4800      	ldr	r0, [pc, #0]	; (8005cd8 <_localeconv_r+0x4>)
 8005cd6:	4770      	bx	lr
 8005cd8:	20000160 	.word	0x20000160

08005cdc <malloc>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <malloc+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f000 bc1d 	b.w	8006520 <_malloc_r>
 8005ce6:	bf00      	nop
 8005ce8:	2000000c 	.word	0x2000000c

08005cec <memchr>:
 8005cec:	4603      	mov	r3, r0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	b2c9      	uxtb	r1, r1
 8005cf2:	4402      	add	r2, r0
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	d101      	bne.n	8005cfe <memchr+0x12>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e003      	b.n	8005d06 <memchr+0x1a>
 8005cfe:	7804      	ldrb	r4, [r0, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	428c      	cmp	r4, r1
 8005d04:	d1f6      	bne.n	8005cf4 <memchr+0x8>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <memcpy>:
 8005d08:	440a      	add	r2, r1
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d10:	d100      	bne.n	8005d14 <memcpy+0xc>
 8005d12:	4770      	bx	lr
 8005d14:	b510      	push	{r4, lr}
 8005d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d20:	d1f9      	bne.n	8005d16 <memcpy+0xe>
 8005d22:	bd10      	pop	{r4, pc}

08005d24 <_Balloc>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	b976      	cbnz	r6, 8005d4c <_Balloc+0x28>
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f7ff ffd4 	bl	8005cdc <malloc>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6260      	str	r0, [r4, #36]	; 0x24
 8005d38:	b920      	cbnz	r0, 8005d44 <_Balloc+0x20>
 8005d3a:	2166      	movs	r1, #102	; 0x66
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <_Balloc+0x78>)
 8005d3e:	4818      	ldr	r0, [pc, #96]	; (8005da0 <_Balloc+0x7c>)
 8005d40:	f000 fdce 	bl	80068e0 <__assert_func>
 8005d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d48:	6006      	str	r6, [r0, #0]
 8005d4a:	60c6      	str	r6, [r0, #12]
 8005d4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d4e:	68f3      	ldr	r3, [r6, #12]
 8005d50:	b183      	cbz	r3, 8005d74 <_Balloc+0x50>
 8005d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d5a:	b9b8      	cbnz	r0, 8005d8c <_Balloc+0x68>
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d62:	1d72      	adds	r2, r6, #5
 8005d64:	4620      	mov	r0, r4
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	f000 fb5e 	bl	8006428 <_calloc_r>
 8005d6c:	b160      	cbz	r0, 8005d88 <_Balloc+0x64>
 8005d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d72:	e00e      	b.n	8005d92 <_Balloc+0x6e>
 8005d74:	2221      	movs	r2, #33	; 0x21
 8005d76:	2104      	movs	r1, #4
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fb55 	bl	8006428 <_calloc_r>
 8005d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d80:	60f0      	str	r0, [r6, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <_Balloc+0x2e>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	6802      	ldr	r2, [r0, #0]
 8005d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d92:	2300      	movs	r3, #0
 8005d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d98:	e7f7      	b.n	8005d8a <_Balloc+0x66>
 8005d9a:	bf00      	nop
 8005d9c:	08007591 	.word	0x08007591
 8005da0:	08007614 	.word	0x08007614

08005da4 <_Bfree>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005da8:	4605      	mov	r5, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	b976      	cbnz	r6, 8005dcc <_Bfree+0x28>
 8005dae:	2010      	movs	r0, #16
 8005db0:	f7ff ff94 	bl	8005cdc <malloc>
 8005db4:	4602      	mov	r2, r0
 8005db6:	6268      	str	r0, [r5, #36]	; 0x24
 8005db8:	b920      	cbnz	r0, 8005dc4 <_Bfree+0x20>
 8005dba:	218a      	movs	r1, #138	; 0x8a
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <_Bfree+0x3c>)
 8005dbe:	4809      	ldr	r0, [pc, #36]	; (8005de4 <_Bfree+0x40>)
 8005dc0:	f000 fd8e 	bl	80068e0 <__assert_func>
 8005dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dc8:	6006      	str	r6, [r0, #0]
 8005dca:	60c6      	str	r6, [r0, #12]
 8005dcc:	b13c      	cbz	r4, 8005dde <_Bfree+0x3a>
 8005dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dd0:	6862      	ldr	r2, [r4, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dd8:	6021      	str	r1, [r4, #0]
 8005dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	08007591 	.word	0x08007591
 8005de4:	08007614 	.word	0x08007614

08005de8 <__multadd>:
 8005de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	4607      	mov	r7, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	461e      	mov	r6, r3
 8005df2:	2000      	movs	r0, #0
 8005df4:	690d      	ldr	r5, [r1, #16]
 8005df6:	f101 0c14 	add.w	ip, r1, #20
 8005dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8005dfe:	3001      	adds	r0, #1
 8005e00:	b299      	uxth	r1, r3
 8005e02:	fb02 6101 	mla	r1, r2, r1, r6
 8005e06:	0c1e      	lsrs	r6, r3, #16
 8005e08:	0c0b      	lsrs	r3, r1, #16
 8005e0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e0e:	b289      	uxth	r1, r1
 8005e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e14:	4285      	cmp	r5, r0
 8005e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e1e:	dcec      	bgt.n	8005dfa <__multadd+0x12>
 8005e20:	b30e      	cbz	r6, 8005e66 <__multadd+0x7e>
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc19      	bgt.n	8005e5c <__multadd+0x74>
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	3101      	adds	r1, #1
 8005e2e:	f7ff ff79 	bl	8005d24 <_Balloc>
 8005e32:	4680      	mov	r8, r0
 8005e34:	b928      	cbnz	r0, 8005e42 <__multadd+0x5a>
 8005e36:	4602      	mov	r2, r0
 8005e38:	21b5      	movs	r1, #181	; 0xb5
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <__multadd+0x84>)
 8005e3c:	480c      	ldr	r0, [pc, #48]	; (8005e70 <__multadd+0x88>)
 8005e3e:	f000 fd4f 	bl	80068e0 <__assert_func>
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	f104 010c 	add.w	r1, r4, #12
 8005e48:	3202      	adds	r2, #2
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	300c      	adds	r0, #12
 8005e4e:	f7ff ff5b 	bl	8005d08 <memcpy>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4638      	mov	r0, r7
 8005e56:	f7ff ffa5 	bl	8005da4 <_Bfree>
 8005e5a:	4644      	mov	r4, r8
 8005e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e60:	3501      	adds	r5, #1
 8005e62:	615e      	str	r6, [r3, #20]
 8005e64:	6125      	str	r5, [r4, #16]
 8005e66:	4620      	mov	r0, r4
 8005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e6c:	08007603 	.word	0x08007603
 8005e70:	08007614 	.word	0x08007614

08005e74 <__hi0bits>:
 8005e74:	0c02      	lsrs	r2, r0, #16
 8005e76:	0412      	lsls	r2, r2, #16
 8005e78:	4603      	mov	r3, r0
 8005e7a:	b9ca      	cbnz	r2, 8005eb0 <__hi0bits+0x3c>
 8005e7c:	0403      	lsls	r3, r0, #16
 8005e7e:	2010      	movs	r0, #16
 8005e80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e84:	bf04      	itt	eq
 8005e86:	021b      	lsleq	r3, r3, #8
 8005e88:	3008      	addeq	r0, #8
 8005e8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e8e:	bf04      	itt	eq
 8005e90:	011b      	lsleq	r3, r3, #4
 8005e92:	3004      	addeq	r0, #4
 8005e94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e98:	bf04      	itt	eq
 8005e9a:	009b      	lsleq	r3, r3, #2
 8005e9c:	3002      	addeq	r0, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db05      	blt.n	8005eae <__hi0bits+0x3a>
 8005ea2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ea6:	f100 0001 	add.w	r0, r0, #1
 8005eaa:	bf08      	it	eq
 8005eac:	2020      	moveq	r0, #32
 8005eae:	4770      	bx	lr
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e7e5      	b.n	8005e80 <__hi0bits+0xc>

08005eb4 <__lo0bits>:
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	f013 0007 	ands.w	r0, r3, #7
 8005ebc:	d00b      	beq.n	8005ed6 <__lo0bits+0x22>
 8005ebe:	07d9      	lsls	r1, r3, #31
 8005ec0:	d421      	bmi.n	8005f06 <__lo0bits+0x52>
 8005ec2:	0798      	lsls	r0, r3, #30
 8005ec4:	bf49      	itett	mi
 8005ec6:	085b      	lsrmi	r3, r3, #1
 8005ec8:	089b      	lsrpl	r3, r3, #2
 8005eca:	2001      	movmi	r0, #1
 8005ecc:	6013      	strmi	r3, [r2, #0]
 8005ece:	bf5c      	itt	pl
 8005ed0:	2002      	movpl	r0, #2
 8005ed2:	6013      	strpl	r3, [r2, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	b299      	uxth	r1, r3
 8005ed8:	b909      	cbnz	r1, 8005ede <__lo0bits+0x2a>
 8005eda:	2010      	movs	r0, #16
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	b2d9      	uxtb	r1, r3
 8005ee0:	b909      	cbnz	r1, 8005ee6 <__lo0bits+0x32>
 8005ee2:	3008      	adds	r0, #8
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	0719      	lsls	r1, r3, #28
 8005ee8:	bf04      	itt	eq
 8005eea:	091b      	lsreq	r3, r3, #4
 8005eec:	3004      	addeq	r0, #4
 8005eee:	0799      	lsls	r1, r3, #30
 8005ef0:	bf04      	itt	eq
 8005ef2:	089b      	lsreq	r3, r3, #2
 8005ef4:	3002      	addeq	r0, #2
 8005ef6:	07d9      	lsls	r1, r3, #31
 8005ef8:	d403      	bmi.n	8005f02 <__lo0bits+0x4e>
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	f100 0001 	add.w	r0, r0, #1
 8005f00:	d003      	beq.n	8005f0a <__lo0bits+0x56>
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	4770      	bx	lr
 8005f06:	2000      	movs	r0, #0
 8005f08:	4770      	bx	lr
 8005f0a:	2020      	movs	r0, #32
 8005f0c:	4770      	bx	lr
	...

08005f10 <__i2b>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	2101      	movs	r1, #1
 8005f16:	f7ff ff05 	bl	8005d24 <_Balloc>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	b928      	cbnz	r0, 8005f2a <__i2b+0x1a>
 8005f1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <__i2b+0x24>)
 8005f24:	4804      	ldr	r0, [pc, #16]	; (8005f38 <__i2b+0x28>)
 8005f26:	f000 fcdb 	bl	80068e0 <__assert_func>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	6144      	str	r4, [r0, #20]
 8005f2e:	6103      	str	r3, [r0, #16]
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	bf00      	nop
 8005f34:	08007603 	.word	0x08007603
 8005f38:	08007614 	.word	0x08007614

08005f3c <__multiply>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	4691      	mov	r9, r2
 8005f42:	690a      	ldr	r2, [r1, #16]
 8005f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f48:	460c      	mov	r4, r1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bfbe      	ittt	lt
 8005f4e:	460b      	movlt	r3, r1
 8005f50:	464c      	movlt	r4, r9
 8005f52:	4699      	movlt	r9, r3
 8005f54:	6927      	ldr	r7, [r4, #16]
 8005f56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	6861      	ldr	r1, [r4, #4]
 8005f5e:	eb07 060a 	add.w	r6, r7, sl
 8005f62:	42b3      	cmp	r3, r6
 8005f64:	b085      	sub	sp, #20
 8005f66:	bfb8      	it	lt
 8005f68:	3101      	addlt	r1, #1
 8005f6a:	f7ff fedb 	bl	8005d24 <_Balloc>
 8005f6e:	b930      	cbnz	r0, 8005f7e <__multiply+0x42>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f240 115d 	movw	r1, #349	; 0x15d
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <__multiply+0x148>)
 8005f78:	4843      	ldr	r0, [pc, #268]	; (8006088 <__multiply+0x14c>)
 8005f7a:	f000 fcb1 	bl	80068e0 <__assert_func>
 8005f7e:	f100 0514 	add.w	r5, r0, #20
 8005f82:	462b      	mov	r3, r5
 8005f84:	2200      	movs	r2, #0
 8005f86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f8a:	4543      	cmp	r3, r8
 8005f8c:	d321      	bcc.n	8005fd2 <__multiply+0x96>
 8005f8e:	f104 0314 	add.w	r3, r4, #20
 8005f92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f96:	f109 0314 	add.w	r3, r9, #20
 8005f9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f9e:	9202      	str	r2, [sp, #8]
 8005fa0:	1b3a      	subs	r2, r7, r4
 8005fa2:	3a15      	subs	r2, #21
 8005fa4:	f022 0203 	bic.w	r2, r2, #3
 8005fa8:	3204      	adds	r2, #4
 8005faa:	f104 0115 	add.w	r1, r4, #21
 8005fae:	428f      	cmp	r7, r1
 8005fb0:	bf38      	it	cc
 8005fb2:	2204      	movcc	r2, #4
 8005fb4:	9201      	str	r2, [sp, #4]
 8005fb6:	9a02      	ldr	r2, [sp, #8]
 8005fb8:	9303      	str	r3, [sp, #12]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d80c      	bhi.n	8005fd8 <__multiply+0x9c>
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	dd03      	ble.n	8005fca <__multiply+0x8e>
 8005fc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d059      	beq.n	800607e <__multiply+0x142>
 8005fca:	6106      	str	r6, [r0, #16]
 8005fcc:	b005      	add	sp, #20
 8005fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd2:	f843 2b04 	str.w	r2, [r3], #4
 8005fd6:	e7d8      	b.n	8005f8a <__multiply+0x4e>
 8005fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fdc:	f1ba 0f00 	cmp.w	sl, #0
 8005fe0:	d023      	beq.n	800602a <__multiply+0xee>
 8005fe2:	46a9      	mov	r9, r5
 8005fe4:	f04f 0c00 	mov.w	ip, #0
 8005fe8:	f104 0e14 	add.w	lr, r4, #20
 8005fec:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ff0:	f8d9 1000 	ldr.w	r1, [r9]
 8005ff4:	fa1f fb82 	uxth.w	fp, r2
 8005ff8:	b289      	uxth	r1, r1
 8005ffa:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ffe:	4461      	add	r1, ip
 8006000:	f8d9 c000 	ldr.w	ip, [r9]
 8006004:	0c12      	lsrs	r2, r2, #16
 8006006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800600a:	fb0a c202 	mla	r2, sl, r2, ip
 800600e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006012:	b289      	uxth	r1, r1
 8006014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006018:	4577      	cmp	r7, lr
 800601a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800601e:	f849 1b04 	str.w	r1, [r9], #4
 8006022:	d8e3      	bhi.n	8005fec <__multiply+0xb0>
 8006024:	9a01      	ldr	r2, [sp, #4]
 8006026:	f845 c002 	str.w	ip, [r5, r2]
 800602a:	9a03      	ldr	r2, [sp, #12]
 800602c:	3304      	adds	r3, #4
 800602e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006032:	f1b9 0f00 	cmp.w	r9, #0
 8006036:	d020      	beq.n	800607a <__multiply+0x13e>
 8006038:	46ae      	mov	lr, r5
 800603a:	f04f 0a00 	mov.w	sl, #0
 800603e:	6829      	ldr	r1, [r5, #0]
 8006040:	f104 0c14 	add.w	ip, r4, #20
 8006044:	f8bc b000 	ldrh.w	fp, [ip]
 8006048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800604c:	b289      	uxth	r1, r1
 800604e:	fb09 220b 	mla	r2, r9, fp, r2
 8006052:	4492      	add	sl, r2
 8006054:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006058:	f84e 1b04 	str.w	r1, [lr], #4
 800605c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006060:	f8be 1000 	ldrh.w	r1, [lr]
 8006064:	0c12      	lsrs	r2, r2, #16
 8006066:	fb09 1102 	mla	r1, r9, r2, r1
 800606a:	4567      	cmp	r7, ip
 800606c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006074:	d8e6      	bhi.n	8006044 <__multiply+0x108>
 8006076:	9a01      	ldr	r2, [sp, #4]
 8006078:	50a9      	str	r1, [r5, r2]
 800607a:	3504      	adds	r5, #4
 800607c:	e79b      	b.n	8005fb6 <__multiply+0x7a>
 800607e:	3e01      	subs	r6, #1
 8006080:	e79d      	b.n	8005fbe <__multiply+0x82>
 8006082:	bf00      	nop
 8006084:	08007603 	.word	0x08007603
 8006088:	08007614 	.word	0x08007614

0800608c <__pow5mult>:
 800608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006090:	4615      	mov	r5, r2
 8006092:	f012 0203 	ands.w	r2, r2, #3
 8006096:	4606      	mov	r6, r0
 8006098:	460f      	mov	r7, r1
 800609a:	d007      	beq.n	80060ac <__pow5mult+0x20>
 800609c:	4c25      	ldr	r4, [pc, #148]	; (8006134 <__pow5mult+0xa8>)
 800609e:	3a01      	subs	r2, #1
 80060a0:	2300      	movs	r3, #0
 80060a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060a6:	f7ff fe9f 	bl	8005de8 <__multadd>
 80060aa:	4607      	mov	r7, r0
 80060ac:	10ad      	asrs	r5, r5, #2
 80060ae:	d03d      	beq.n	800612c <__pow5mult+0xa0>
 80060b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060b2:	b97c      	cbnz	r4, 80060d4 <__pow5mult+0x48>
 80060b4:	2010      	movs	r0, #16
 80060b6:	f7ff fe11 	bl	8005cdc <malloc>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6270      	str	r0, [r6, #36]	; 0x24
 80060be:	b928      	cbnz	r0, 80060cc <__pow5mult+0x40>
 80060c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060c4:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <__pow5mult+0xac>)
 80060c6:	481d      	ldr	r0, [pc, #116]	; (800613c <__pow5mult+0xb0>)
 80060c8:	f000 fc0a 	bl	80068e0 <__assert_func>
 80060cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d0:	6004      	str	r4, [r0, #0]
 80060d2:	60c4      	str	r4, [r0, #12]
 80060d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060dc:	b94c      	cbnz	r4, 80060f2 <__pow5mult+0x66>
 80060de:	f240 2171 	movw	r1, #625	; 0x271
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff ff14 	bl	8005f10 <__i2b>
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	f04f 0900 	mov.w	r9, #0
 80060f6:	07eb      	lsls	r3, r5, #31
 80060f8:	d50a      	bpl.n	8006110 <__pow5mult+0x84>
 80060fa:	4639      	mov	r1, r7
 80060fc:	4622      	mov	r2, r4
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff1c 	bl	8005f3c <__multiply>
 8006104:	4680      	mov	r8, r0
 8006106:	4639      	mov	r1, r7
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff fe4b 	bl	8005da4 <_Bfree>
 800610e:	4647      	mov	r7, r8
 8006110:	106d      	asrs	r5, r5, #1
 8006112:	d00b      	beq.n	800612c <__pow5mult+0xa0>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	b938      	cbnz	r0, 8006128 <__pow5mult+0x9c>
 8006118:	4622      	mov	r2, r4
 800611a:	4621      	mov	r1, r4
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff ff0d 	bl	8005f3c <__multiply>
 8006122:	6020      	str	r0, [r4, #0]
 8006124:	f8c0 9000 	str.w	r9, [r0]
 8006128:	4604      	mov	r4, r0
 800612a:	e7e4      	b.n	80060f6 <__pow5mult+0x6a>
 800612c:	4638      	mov	r0, r7
 800612e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006132:	bf00      	nop
 8006134:	08007760 	.word	0x08007760
 8006138:	08007591 	.word	0x08007591
 800613c:	08007614 	.word	0x08007614

08006140 <__lshift>:
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	4607      	mov	r7, r0
 8006148:	4691      	mov	r9, r2
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6849      	ldr	r1, [r1, #4]
 800614e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006158:	f108 0601 	add.w	r6, r8, #1
 800615c:	42b3      	cmp	r3, r6
 800615e:	db0b      	blt.n	8006178 <__lshift+0x38>
 8006160:	4638      	mov	r0, r7
 8006162:	f7ff fddf 	bl	8005d24 <_Balloc>
 8006166:	4605      	mov	r5, r0
 8006168:	b948      	cbnz	r0, 800617e <__lshift+0x3e>
 800616a:	4602      	mov	r2, r0
 800616c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006170:	4b29      	ldr	r3, [pc, #164]	; (8006218 <__lshift+0xd8>)
 8006172:	482a      	ldr	r0, [pc, #168]	; (800621c <__lshift+0xdc>)
 8006174:	f000 fbb4 	bl	80068e0 <__assert_func>
 8006178:	3101      	adds	r1, #1
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	e7ee      	b.n	800615c <__lshift+0x1c>
 800617e:	2300      	movs	r3, #0
 8006180:	f100 0114 	add.w	r1, r0, #20
 8006184:	f100 0210 	add.w	r2, r0, #16
 8006188:	4618      	mov	r0, r3
 800618a:	4553      	cmp	r3, sl
 800618c:	db37      	blt.n	80061fe <__lshift+0xbe>
 800618e:	6920      	ldr	r0, [r4, #16]
 8006190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006194:	f104 0314 	add.w	r3, r4, #20
 8006198:	f019 091f 	ands.w	r9, r9, #31
 800619c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061a4:	d02f      	beq.n	8006206 <__lshift+0xc6>
 80061a6:	468a      	mov	sl, r1
 80061a8:	f04f 0c00 	mov.w	ip, #0
 80061ac:	f1c9 0e20 	rsb	lr, r9, #32
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	fa02 f209 	lsl.w	r2, r2, r9
 80061b6:	ea42 020c 	orr.w	r2, r2, ip
 80061ba:	f84a 2b04 	str.w	r2, [sl], #4
 80061be:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c2:	4298      	cmp	r0, r3
 80061c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80061c8:	d8f2      	bhi.n	80061b0 <__lshift+0x70>
 80061ca:	1b03      	subs	r3, r0, r4
 80061cc:	3b15      	subs	r3, #21
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	3304      	adds	r3, #4
 80061d4:	f104 0215 	add.w	r2, r4, #21
 80061d8:	4290      	cmp	r0, r2
 80061da:	bf38      	it	cc
 80061dc:	2304      	movcc	r3, #4
 80061de:	f841 c003 	str.w	ip, [r1, r3]
 80061e2:	f1bc 0f00 	cmp.w	ip, #0
 80061e6:	d001      	beq.n	80061ec <__lshift+0xac>
 80061e8:	f108 0602 	add.w	r6, r8, #2
 80061ec:	3e01      	subs	r6, #1
 80061ee:	4638      	mov	r0, r7
 80061f0:	4621      	mov	r1, r4
 80061f2:	612e      	str	r6, [r5, #16]
 80061f4:	f7ff fdd6 	bl	8005da4 <_Bfree>
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006202:	3301      	adds	r3, #1
 8006204:	e7c1      	b.n	800618a <__lshift+0x4a>
 8006206:	3904      	subs	r1, #4
 8006208:	f853 2b04 	ldr.w	r2, [r3], #4
 800620c:	4298      	cmp	r0, r3
 800620e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006212:	d8f9      	bhi.n	8006208 <__lshift+0xc8>
 8006214:	e7ea      	b.n	80061ec <__lshift+0xac>
 8006216:	bf00      	nop
 8006218:	08007603 	.word	0x08007603
 800621c:	08007614 	.word	0x08007614

08006220 <__mcmp>:
 8006220:	4603      	mov	r3, r0
 8006222:	690a      	ldr	r2, [r1, #16]
 8006224:	6900      	ldr	r0, [r0, #16]
 8006226:	b530      	push	{r4, r5, lr}
 8006228:	1a80      	subs	r0, r0, r2
 800622a:	d10d      	bne.n	8006248 <__mcmp+0x28>
 800622c:	3314      	adds	r3, #20
 800622e:	3114      	adds	r1, #20
 8006230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800623c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006240:	4295      	cmp	r5, r2
 8006242:	d002      	beq.n	800624a <__mcmp+0x2a>
 8006244:	d304      	bcc.n	8006250 <__mcmp+0x30>
 8006246:	2001      	movs	r0, #1
 8006248:	bd30      	pop	{r4, r5, pc}
 800624a:	42a3      	cmp	r3, r4
 800624c:	d3f4      	bcc.n	8006238 <__mcmp+0x18>
 800624e:	e7fb      	b.n	8006248 <__mcmp+0x28>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	e7f8      	b.n	8006248 <__mcmp+0x28>
	...

08006258 <__mdiff>:
 8006258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	460d      	mov	r5, r1
 800625e:	4607      	mov	r7, r0
 8006260:	4611      	mov	r1, r2
 8006262:	4628      	mov	r0, r5
 8006264:	4614      	mov	r4, r2
 8006266:	f7ff ffdb 	bl	8006220 <__mcmp>
 800626a:	1e06      	subs	r6, r0, #0
 800626c:	d111      	bne.n	8006292 <__mdiff+0x3a>
 800626e:	4631      	mov	r1, r6
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff fd57 	bl	8005d24 <_Balloc>
 8006276:	4602      	mov	r2, r0
 8006278:	b928      	cbnz	r0, 8006286 <__mdiff+0x2e>
 800627a:	f240 2132 	movw	r1, #562	; 0x232
 800627e:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <__mdiff+0x110>)
 8006280:	483a      	ldr	r0, [pc, #232]	; (800636c <__mdiff+0x114>)
 8006282:	f000 fb2d 	bl	80068e0 <__assert_func>
 8006286:	2301      	movs	r3, #1
 8006288:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800628c:	4610      	mov	r0, r2
 800628e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	bfa4      	itt	ge
 8006294:	4623      	movge	r3, r4
 8006296:	462c      	movge	r4, r5
 8006298:	4638      	mov	r0, r7
 800629a:	6861      	ldr	r1, [r4, #4]
 800629c:	bfa6      	itte	ge
 800629e:	461d      	movge	r5, r3
 80062a0:	2600      	movge	r6, #0
 80062a2:	2601      	movlt	r6, #1
 80062a4:	f7ff fd3e 	bl	8005d24 <_Balloc>
 80062a8:	4602      	mov	r2, r0
 80062aa:	b918      	cbnz	r0, 80062b4 <__mdiff+0x5c>
 80062ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062b0:	4b2d      	ldr	r3, [pc, #180]	; (8006368 <__mdiff+0x110>)
 80062b2:	e7e5      	b.n	8006280 <__mdiff+0x28>
 80062b4:	f102 0814 	add.w	r8, r2, #20
 80062b8:	46c2      	mov	sl, r8
 80062ba:	f04f 0c00 	mov.w	ip, #0
 80062be:	6927      	ldr	r7, [r4, #16]
 80062c0:	60c6      	str	r6, [r0, #12]
 80062c2:	692e      	ldr	r6, [r5, #16]
 80062c4:	f104 0014 	add.w	r0, r4, #20
 80062c8:	f105 0914 	add.w	r9, r5, #20
 80062cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80062d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062d4:	3410      	adds	r4, #16
 80062d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062da:	f859 3b04 	ldr.w	r3, [r9], #4
 80062de:	fa1f f18b 	uxth.w	r1, fp
 80062e2:	448c      	add	ip, r1
 80062e4:	b299      	uxth	r1, r3
 80062e6:	0c1b      	lsrs	r3, r3, #16
 80062e8:	ebac 0101 	sub.w	r1, ip, r1
 80062ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062f4:	b289      	uxth	r1, r1
 80062f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062fa:	454e      	cmp	r6, r9
 80062fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006300:	f84a 3b04 	str.w	r3, [sl], #4
 8006304:	d8e7      	bhi.n	80062d6 <__mdiff+0x7e>
 8006306:	1b73      	subs	r3, r6, r5
 8006308:	3b15      	subs	r3, #21
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	3515      	adds	r5, #21
 8006310:	3304      	adds	r3, #4
 8006312:	42ae      	cmp	r6, r5
 8006314:	bf38      	it	cc
 8006316:	2304      	movcc	r3, #4
 8006318:	4418      	add	r0, r3
 800631a:	4443      	add	r3, r8
 800631c:	461e      	mov	r6, r3
 800631e:	4605      	mov	r5, r0
 8006320:	4575      	cmp	r5, lr
 8006322:	d30e      	bcc.n	8006342 <__mdiff+0xea>
 8006324:	f10e 0103 	add.w	r1, lr, #3
 8006328:	1a09      	subs	r1, r1, r0
 800632a:	f021 0103 	bic.w	r1, r1, #3
 800632e:	3803      	subs	r0, #3
 8006330:	4586      	cmp	lr, r0
 8006332:	bf38      	it	cc
 8006334:	2100      	movcc	r1, #0
 8006336:	4419      	add	r1, r3
 8006338:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800633c:	b18b      	cbz	r3, 8006362 <__mdiff+0x10a>
 800633e:	6117      	str	r7, [r2, #16]
 8006340:	e7a4      	b.n	800628c <__mdiff+0x34>
 8006342:	f855 8b04 	ldr.w	r8, [r5], #4
 8006346:	fa1f f188 	uxth.w	r1, r8
 800634a:	4461      	add	r1, ip
 800634c:	140c      	asrs	r4, r1, #16
 800634e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006352:	b289      	uxth	r1, r1
 8006354:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006358:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800635c:	f846 1b04 	str.w	r1, [r6], #4
 8006360:	e7de      	b.n	8006320 <__mdiff+0xc8>
 8006362:	3f01      	subs	r7, #1
 8006364:	e7e8      	b.n	8006338 <__mdiff+0xe0>
 8006366:	bf00      	nop
 8006368:	08007603 	.word	0x08007603
 800636c:	08007614 	.word	0x08007614

08006370 <__d2b>:
 8006370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006374:	2101      	movs	r1, #1
 8006376:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800637a:	4690      	mov	r8, r2
 800637c:	461d      	mov	r5, r3
 800637e:	f7ff fcd1 	bl	8005d24 <_Balloc>
 8006382:	4604      	mov	r4, r0
 8006384:	b930      	cbnz	r0, 8006394 <__d2b+0x24>
 8006386:	4602      	mov	r2, r0
 8006388:	f240 310a 	movw	r1, #778	; 0x30a
 800638c:	4b24      	ldr	r3, [pc, #144]	; (8006420 <__d2b+0xb0>)
 800638e:	4825      	ldr	r0, [pc, #148]	; (8006424 <__d2b+0xb4>)
 8006390:	f000 faa6 	bl	80068e0 <__assert_func>
 8006394:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006398:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800639c:	bb2d      	cbnz	r5, 80063ea <__d2b+0x7a>
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	f1b8 0300 	subs.w	r3, r8, #0
 80063a4:	d026      	beq.n	80063f4 <__d2b+0x84>
 80063a6:	4668      	mov	r0, sp
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	f7ff fd83 	bl	8005eb4 <__lo0bits>
 80063ae:	9900      	ldr	r1, [sp, #0]
 80063b0:	b1f0      	cbz	r0, 80063f0 <__d2b+0x80>
 80063b2:	9a01      	ldr	r2, [sp, #4]
 80063b4:	f1c0 0320 	rsb	r3, r0, #32
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	430b      	orrs	r3, r1
 80063be:	40c2      	lsrs	r2, r0
 80063c0:	6163      	str	r3, [r4, #20]
 80063c2:	9201      	str	r2, [sp, #4]
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf14      	ite	ne
 80063ca:	2102      	movne	r1, #2
 80063cc:	2101      	moveq	r1, #1
 80063ce:	61a3      	str	r3, [r4, #24]
 80063d0:	6121      	str	r1, [r4, #16]
 80063d2:	b1c5      	cbz	r5, 8006406 <__d2b+0x96>
 80063d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063d8:	4405      	add	r5, r0
 80063da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063de:	603d      	str	r5, [r7, #0]
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	b002      	add	sp, #8
 80063e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ee:	e7d6      	b.n	800639e <__d2b+0x2e>
 80063f0:	6161      	str	r1, [r4, #20]
 80063f2:	e7e7      	b.n	80063c4 <__d2b+0x54>
 80063f4:	a801      	add	r0, sp, #4
 80063f6:	f7ff fd5d 	bl	8005eb4 <__lo0bits>
 80063fa:	2101      	movs	r1, #1
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	6121      	str	r1, [r4, #16]
 8006400:	6163      	str	r3, [r4, #20]
 8006402:	3020      	adds	r0, #32
 8006404:	e7e5      	b.n	80063d2 <__d2b+0x62>
 8006406:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800640a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800640e:	6038      	str	r0, [r7, #0]
 8006410:	6918      	ldr	r0, [r3, #16]
 8006412:	f7ff fd2f 	bl	8005e74 <__hi0bits>
 8006416:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800641a:	6031      	str	r1, [r6, #0]
 800641c:	e7e1      	b.n	80063e2 <__d2b+0x72>
 800641e:	bf00      	nop
 8006420:	08007603 	.word	0x08007603
 8006424:	08007614 	.word	0x08007614

08006428 <_calloc_r>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	fba1 5402 	umull	r5, r4, r1, r2
 800642e:	b934      	cbnz	r4, 800643e <_calloc_r+0x16>
 8006430:	4629      	mov	r1, r5
 8006432:	f000 f875 	bl	8006520 <_malloc_r>
 8006436:	4606      	mov	r6, r0
 8006438:	b928      	cbnz	r0, 8006446 <_calloc_r+0x1e>
 800643a:	4630      	mov	r0, r6
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	220c      	movs	r2, #12
 8006440:	2600      	movs	r6, #0
 8006442:	6002      	str	r2, [r0, #0]
 8006444:	e7f9      	b.n	800643a <_calloc_r+0x12>
 8006446:	462a      	mov	r2, r5
 8006448:	4621      	mov	r1, r4
 800644a:	f7fe f93f 	bl	80046cc <memset>
 800644e:	e7f4      	b.n	800643a <_calloc_r+0x12>

08006450 <_free_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	2900      	cmp	r1, #0
 8006456:	d040      	beq.n	80064da <_free_r+0x8a>
 8006458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645c:	1f0c      	subs	r4, r1, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	18e4      	addlt	r4, r4, r3
 8006464:	f000 fa98 	bl	8006998 <__malloc_lock>
 8006468:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <_free_r+0x8c>)
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	b933      	cbnz	r3, 800647c <_free_r+0x2c>
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	6014      	str	r4, [r2, #0]
 8006472:	4628      	mov	r0, r5
 8006474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006478:	f000 ba94 	b.w	80069a4 <__malloc_unlock>
 800647c:	42a3      	cmp	r3, r4
 800647e:	d908      	bls.n	8006492 <_free_r+0x42>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428b      	cmp	r3, r1
 8006486:	bf01      	itttt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	1809      	addeq	r1, r1, r0
 800648e:	6021      	streq	r1, [r4, #0]
 8006490:	e7ed      	b.n	800646e <_free_r+0x1e>
 8006492:	461a      	mov	r2, r3
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	b10b      	cbz	r3, 800649c <_free_r+0x4c>
 8006498:	42a3      	cmp	r3, r4
 800649a:	d9fa      	bls.n	8006492 <_free_r+0x42>
 800649c:	6811      	ldr	r1, [r2, #0]
 800649e:	1850      	adds	r0, r2, r1
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d10b      	bne.n	80064bc <_free_r+0x6c>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	4401      	add	r1, r0
 80064a8:	1850      	adds	r0, r2, r1
 80064aa:	4283      	cmp	r3, r0
 80064ac:	6011      	str	r1, [r2, #0]
 80064ae:	d1e0      	bne.n	8006472 <_free_r+0x22>
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4401      	add	r1, r0
 80064b6:	6011      	str	r1, [r2, #0]
 80064b8:	6053      	str	r3, [r2, #4]
 80064ba:	e7da      	b.n	8006472 <_free_r+0x22>
 80064bc:	d902      	bls.n	80064c4 <_free_r+0x74>
 80064be:	230c      	movs	r3, #12
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7d6      	b.n	8006472 <_free_r+0x22>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	bf01      	itttt	eq
 80064cc:	6819      	ldreq	r1, [r3, #0]
 80064ce:	685b      	ldreq	r3, [r3, #4]
 80064d0:	1809      	addeq	r1, r1, r0
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	6063      	str	r3, [r4, #4]
 80064d6:	6054      	str	r4, [r2, #4]
 80064d8:	e7cb      	b.n	8006472 <_free_r+0x22>
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	200006b4 	.word	0x200006b4

080064e0 <sbrk_aligned>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4e0e      	ldr	r6, [pc, #56]	; (800651c <sbrk_aligned+0x3c>)
 80064e4:	460c      	mov	r4, r1
 80064e6:	6831      	ldr	r1, [r6, #0]
 80064e8:	4605      	mov	r5, r0
 80064ea:	b911      	cbnz	r1, 80064f2 <sbrk_aligned+0x12>
 80064ec:	f000 f9e8 	bl	80068c0 <_sbrk_r>
 80064f0:	6030      	str	r0, [r6, #0]
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 f9e3 	bl	80068c0 <_sbrk_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d00a      	beq.n	8006514 <sbrk_aligned+0x34>
 80064fe:	1cc4      	adds	r4, r0, #3
 8006500:	f024 0403 	bic.w	r4, r4, #3
 8006504:	42a0      	cmp	r0, r4
 8006506:	d007      	beq.n	8006518 <sbrk_aligned+0x38>
 8006508:	1a21      	subs	r1, r4, r0
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f9d8 	bl	80068c0 <_sbrk_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d101      	bne.n	8006518 <sbrk_aligned+0x38>
 8006514:	f04f 34ff 	mov.w	r4, #4294967295
 8006518:	4620      	mov	r0, r4
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	200006b8 	.word	0x200006b8

08006520 <_malloc_r>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	1ccd      	adds	r5, r1, #3
 8006526:	f025 0503 	bic.w	r5, r5, #3
 800652a:	3508      	adds	r5, #8
 800652c:	2d0c      	cmp	r5, #12
 800652e:	bf38      	it	cc
 8006530:	250c      	movcc	r5, #12
 8006532:	2d00      	cmp	r5, #0
 8006534:	4607      	mov	r7, r0
 8006536:	db01      	blt.n	800653c <_malloc_r+0x1c>
 8006538:	42a9      	cmp	r1, r5
 800653a:	d905      	bls.n	8006548 <_malloc_r+0x28>
 800653c:	230c      	movs	r3, #12
 800653e:	2600      	movs	r6, #0
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4630      	mov	r0, r6
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	4e2e      	ldr	r6, [pc, #184]	; (8006604 <_malloc_r+0xe4>)
 800654a:	f000 fa25 	bl	8006998 <__malloc_lock>
 800654e:	6833      	ldr	r3, [r6, #0]
 8006550:	461c      	mov	r4, r3
 8006552:	bb34      	cbnz	r4, 80065a2 <_malloc_r+0x82>
 8006554:	4629      	mov	r1, r5
 8006556:	4638      	mov	r0, r7
 8006558:	f7ff ffc2 	bl	80064e0 <sbrk_aligned>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	4604      	mov	r4, r0
 8006560:	d14d      	bne.n	80065fe <_malloc_r+0xde>
 8006562:	6834      	ldr	r4, [r6, #0]
 8006564:	4626      	mov	r6, r4
 8006566:	2e00      	cmp	r6, #0
 8006568:	d140      	bne.n	80065ec <_malloc_r+0xcc>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	4631      	mov	r1, r6
 800656e:	4638      	mov	r0, r7
 8006570:	eb04 0803 	add.w	r8, r4, r3
 8006574:	f000 f9a4 	bl	80068c0 <_sbrk_r>
 8006578:	4580      	cmp	r8, r0
 800657a:	d13a      	bne.n	80065f2 <_malloc_r+0xd2>
 800657c:	6821      	ldr	r1, [r4, #0]
 800657e:	3503      	adds	r5, #3
 8006580:	1a6d      	subs	r5, r5, r1
 8006582:	f025 0503 	bic.w	r5, r5, #3
 8006586:	3508      	adds	r5, #8
 8006588:	2d0c      	cmp	r5, #12
 800658a:	bf38      	it	cc
 800658c:	250c      	movcc	r5, #12
 800658e:	4638      	mov	r0, r7
 8006590:	4629      	mov	r1, r5
 8006592:	f7ff ffa5 	bl	80064e0 <sbrk_aligned>
 8006596:	3001      	adds	r0, #1
 8006598:	d02b      	beq.n	80065f2 <_malloc_r+0xd2>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	442b      	add	r3, r5
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	e00e      	b.n	80065c0 <_malloc_r+0xa0>
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	1b52      	subs	r2, r2, r5
 80065a6:	d41e      	bmi.n	80065e6 <_malloc_r+0xc6>
 80065a8:	2a0b      	cmp	r2, #11
 80065aa:	d916      	bls.n	80065da <_malloc_r+0xba>
 80065ac:	1961      	adds	r1, r4, r5
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	6025      	str	r5, [r4, #0]
 80065b2:	bf18      	it	ne
 80065b4:	6059      	strne	r1, [r3, #4]
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	bf08      	it	eq
 80065ba:	6031      	streq	r1, [r6, #0]
 80065bc:	5162      	str	r2, [r4, r5]
 80065be:	604b      	str	r3, [r1, #4]
 80065c0:	4638      	mov	r0, r7
 80065c2:	f104 060b 	add.w	r6, r4, #11
 80065c6:	f000 f9ed 	bl	80069a4 <__malloc_unlock>
 80065ca:	f026 0607 	bic.w	r6, r6, #7
 80065ce:	1d23      	adds	r3, r4, #4
 80065d0:	1af2      	subs	r2, r6, r3
 80065d2:	d0b6      	beq.n	8006542 <_malloc_r+0x22>
 80065d4:	1b9b      	subs	r3, r3, r6
 80065d6:	50a3      	str	r3, [r4, r2]
 80065d8:	e7b3      	b.n	8006542 <_malloc_r+0x22>
 80065da:	6862      	ldr	r2, [r4, #4]
 80065dc:	42a3      	cmp	r3, r4
 80065de:	bf0c      	ite	eq
 80065e0:	6032      	streq	r2, [r6, #0]
 80065e2:	605a      	strne	r2, [r3, #4]
 80065e4:	e7ec      	b.n	80065c0 <_malloc_r+0xa0>
 80065e6:	4623      	mov	r3, r4
 80065e8:	6864      	ldr	r4, [r4, #4]
 80065ea:	e7b2      	b.n	8006552 <_malloc_r+0x32>
 80065ec:	4634      	mov	r4, r6
 80065ee:	6876      	ldr	r6, [r6, #4]
 80065f0:	e7b9      	b.n	8006566 <_malloc_r+0x46>
 80065f2:	230c      	movs	r3, #12
 80065f4:	4638      	mov	r0, r7
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	f000 f9d4 	bl	80069a4 <__malloc_unlock>
 80065fc:	e7a1      	b.n	8006542 <_malloc_r+0x22>
 80065fe:	6025      	str	r5, [r4, #0]
 8006600:	e7de      	b.n	80065c0 <_malloc_r+0xa0>
 8006602:	bf00      	nop
 8006604:	200006b4 	.word	0x200006b4

08006608 <__ssputs_r>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	688e      	ldr	r6, [r1, #8]
 800660e:	4682      	mov	sl, r0
 8006610:	429e      	cmp	r6, r3
 8006612:	460c      	mov	r4, r1
 8006614:	4690      	mov	r8, r2
 8006616:	461f      	mov	r7, r3
 8006618:	d838      	bhi.n	800668c <__ssputs_r+0x84>
 800661a:	898a      	ldrh	r2, [r1, #12]
 800661c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006620:	d032      	beq.n	8006688 <__ssputs_r+0x80>
 8006622:	6825      	ldr	r5, [r4, #0]
 8006624:	6909      	ldr	r1, [r1, #16]
 8006626:	3301      	adds	r3, #1
 8006628:	eba5 0901 	sub.w	r9, r5, r1
 800662c:	6965      	ldr	r5, [r4, #20]
 800662e:	444b      	add	r3, r9
 8006630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006638:	106d      	asrs	r5, r5, #1
 800663a:	429d      	cmp	r5, r3
 800663c:	bf38      	it	cc
 800663e:	461d      	movcc	r5, r3
 8006640:	0553      	lsls	r3, r2, #21
 8006642:	d531      	bpl.n	80066a8 <__ssputs_r+0xa0>
 8006644:	4629      	mov	r1, r5
 8006646:	f7ff ff6b 	bl	8006520 <_malloc_r>
 800664a:	4606      	mov	r6, r0
 800664c:	b950      	cbnz	r0, 8006664 <__ssputs_r+0x5c>
 800664e:	230c      	movs	r3, #12
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	f8ca 3000 	str.w	r3, [sl]
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	464a      	mov	r2, r9
 8006666:	6921      	ldr	r1, [r4, #16]
 8006668:	f7ff fb4e 	bl	8005d08 <memcpy>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	6126      	str	r6, [r4, #16]
 800667a:	444e      	add	r6, r9
 800667c:	6026      	str	r6, [r4, #0]
 800667e:	463e      	mov	r6, r7
 8006680:	6165      	str	r5, [r4, #20]
 8006682:	eba5 0509 	sub.w	r5, r5, r9
 8006686:	60a5      	str	r5, [r4, #8]
 8006688:	42be      	cmp	r6, r7
 800668a:	d900      	bls.n	800668e <__ssputs_r+0x86>
 800668c:	463e      	mov	r6, r7
 800668e:	4632      	mov	r2, r6
 8006690:	4641      	mov	r1, r8
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	f000 f966 	bl	8006964 <memmove>
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	2000      	movs	r0, #0
 800669c:	1b9b      	subs	r3, r3, r6
 800669e:	60a3      	str	r3, [r4, #8]
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	4433      	add	r3, r6
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	e7db      	b.n	8006660 <__ssputs_r+0x58>
 80066a8:	462a      	mov	r2, r5
 80066aa:	f000 f981 	bl	80069b0 <_realloc_r>
 80066ae:	4606      	mov	r6, r0
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d1e1      	bne.n	8006678 <__ssputs_r+0x70>
 80066b4:	4650      	mov	r0, sl
 80066b6:	6921      	ldr	r1, [r4, #16]
 80066b8:	f7ff feca 	bl	8006450 <_free_r>
 80066bc:	e7c7      	b.n	800664e <__ssputs_r+0x46>
	...

080066c0 <_svfiprintf_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	4698      	mov	r8, r3
 80066c6:	898b      	ldrh	r3, [r1, #12]
 80066c8:	4607      	mov	r7, r0
 80066ca:	061b      	lsls	r3, r3, #24
 80066cc:	460d      	mov	r5, r1
 80066ce:	4614      	mov	r4, r2
 80066d0:	b09d      	sub	sp, #116	; 0x74
 80066d2:	d50e      	bpl.n	80066f2 <_svfiprintf_r+0x32>
 80066d4:	690b      	ldr	r3, [r1, #16]
 80066d6:	b963      	cbnz	r3, 80066f2 <_svfiprintf_r+0x32>
 80066d8:	2140      	movs	r1, #64	; 0x40
 80066da:	f7ff ff21 	bl	8006520 <_malloc_r>
 80066de:	6028      	str	r0, [r5, #0]
 80066e0:	6128      	str	r0, [r5, #16]
 80066e2:	b920      	cbnz	r0, 80066ee <_svfiprintf_r+0x2e>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e0d1      	b.n	8006892 <_svfiprintf_r+0x1d2>
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	616b      	str	r3, [r5, #20]
 80066f2:	2300      	movs	r3, #0
 80066f4:	9309      	str	r3, [sp, #36]	; 0x24
 80066f6:	2320      	movs	r3, #32
 80066f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066fc:	2330      	movs	r3, #48	; 0x30
 80066fe:	f04f 0901 	mov.w	r9, #1
 8006702:	f8cd 800c 	str.w	r8, [sp, #12]
 8006706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068ac <_svfiprintf_r+0x1ec>
 800670a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800670e:	4623      	mov	r3, r4
 8006710:	469a      	mov	sl, r3
 8006712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006716:	b10a      	cbz	r2, 800671c <_svfiprintf_r+0x5c>
 8006718:	2a25      	cmp	r2, #37	; 0x25
 800671a:	d1f9      	bne.n	8006710 <_svfiprintf_r+0x50>
 800671c:	ebba 0b04 	subs.w	fp, sl, r4
 8006720:	d00b      	beq.n	800673a <_svfiprintf_r+0x7a>
 8006722:	465b      	mov	r3, fp
 8006724:	4622      	mov	r2, r4
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ff6d 	bl	8006608 <__ssputs_r>
 800672e:	3001      	adds	r0, #1
 8006730:	f000 80aa 	beq.w	8006888 <_svfiprintf_r+0x1c8>
 8006734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006736:	445a      	add	r2, fp
 8006738:	9209      	str	r2, [sp, #36]	; 0x24
 800673a:	f89a 3000 	ldrb.w	r3, [sl]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80a2 	beq.w	8006888 <_svfiprintf_r+0x1c8>
 8006744:	2300      	movs	r3, #0
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674e:	f10a 0a01 	add.w	sl, sl, #1
 8006752:	9304      	str	r3, [sp, #16]
 8006754:	9307      	str	r3, [sp, #28]
 8006756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675a:	931a      	str	r3, [sp, #104]	; 0x68
 800675c:	4654      	mov	r4, sl
 800675e:	2205      	movs	r2, #5
 8006760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006764:	4851      	ldr	r0, [pc, #324]	; (80068ac <_svfiprintf_r+0x1ec>)
 8006766:	f7ff fac1 	bl	8005cec <memchr>
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	b9d8      	cbnz	r0, 80067a6 <_svfiprintf_r+0xe6>
 800676e:	06d0      	lsls	r0, r2, #27
 8006770:	bf44      	itt	mi
 8006772:	2320      	movmi	r3, #32
 8006774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006778:	0711      	lsls	r1, r2, #28
 800677a:	bf44      	itt	mi
 800677c:	232b      	movmi	r3, #43	; 0x2b
 800677e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006782:	f89a 3000 	ldrb.w	r3, [sl]
 8006786:	2b2a      	cmp	r3, #42	; 0x2a
 8006788:	d015      	beq.n	80067b6 <_svfiprintf_r+0xf6>
 800678a:	4654      	mov	r4, sl
 800678c:	2000      	movs	r0, #0
 800678e:	f04f 0c0a 	mov.w	ip, #10
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	4621      	mov	r1, r4
 8006796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679a:	3b30      	subs	r3, #48	; 0x30
 800679c:	2b09      	cmp	r3, #9
 800679e:	d94e      	bls.n	800683e <_svfiprintf_r+0x17e>
 80067a0:	b1b0      	cbz	r0, 80067d0 <_svfiprintf_r+0x110>
 80067a2:	9207      	str	r2, [sp, #28]
 80067a4:	e014      	b.n	80067d0 <_svfiprintf_r+0x110>
 80067a6:	eba0 0308 	sub.w	r3, r0, r8
 80067aa:	fa09 f303 	lsl.w	r3, r9, r3
 80067ae:	4313      	orrs	r3, r2
 80067b0:	46a2      	mov	sl, r4
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	e7d2      	b.n	800675c <_svfiprintf_r+0x9c>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9103      	str	r1, [sp, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfbb      	ittet	lt
 80067c2:	425b      	neglt	r3, r3
 80067c4:	f042 0202 	orrlt.w	r2, r2, #2
 80067c8:	9307      	strge	r3, [sp, #28]
 80067ca:	9307      	strlt	r3, [sp, #28]
 80067cc:	bfb8      	it	lt
 80067ce:	9204      	strlt	r2, [sp, #16]
 80067d0:	7823      	ldrb	r3, [r4, #0]
 80067d2:	2b2e      	cmp	r3, #46	; 0x2e
 80067d4:	d10c      	bne.n	80067f0 <_svfiprintf_r+0x130>
 80067d6:	7863      	ldrb	r3, [r4, #1]
 80067d8:	2b2a      	cmp	r3, #42	; 0x2a
 80067da:	d135      	bne.n	8006848 <_svfiprintf_r+0x188>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3402      	adds	r4, #2
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9203      	str	r2, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80068b0 <_svfiprintf_r+0x1f0>
 80067f4:	2203      	movs	r2, #3
 80067f6:	4650      	mov	r0, sl
 80067f8:	7821      	ldrb	r1, [r4, #0]
 80067fa:	f7ff fa77 	bl	8005cec <memchr>
 80067fe:	b140      	cbz	r0, 8006812 <_svfiprintf_r+0x152>
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	eba0 000a 	sub.w	r0, r0, sl
 8006806:	fa03 f000 	lsl.w	r0, r3, r0
 800680a:	9b04      	ldr	r3, [sp, #16]
 800680c:	3401      	adds	r4, #1
 800680e:	4303      	orrs	r3, r0
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006816:	2206      	movs	r2, #6
 8006818:	4826      	ldr	r0, [pc, #152]	; (80068b4 <_svfiprintf_r+0x1f4>)
 800681a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800681e:	f7ff fa65 	bl	8005cec <memchr>
 8006822:	2800      	cmp	r0, #0
 8006824:	d038      	beq.n	8006898 <_svfiprintf_r+0x1d8>
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <_svfiprintf_r+0x1f8>)
 8006828:	bb1b      	cbnz	r3, 8006872 <_svfiprintf_r+0x1b2>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	3307      	adds	r3, #7
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	3308      	adds	r3, #8
 8006834:	9303      	str	r3, [sp, #12]
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	4433      	add	r3, r6
 800683a:	9309      	str	r3, [sp, #36]	; 0x24
 800683c:	e767      	b.n	800670e <_svfiprintf_r+0x4e>
 800683e:	460c      	mov	r4, r1
 8006840:	2001      	movs	r0, #1
 8006842:	fb0c 3202 	mla	r2, ip, r2, r3
 8006846:	e7a5      	b.n	8006794 <_svfiprintf_r+0xd4>
 8006848:	2300      	movs	r3, #0
 800684a:	f04f 0c0a 	mov.w	ip, #10
 800684e:	4619      	mov	r1, r3
 8006850:	3401      	adds	r4, #1
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	4620      	mov	r0, r4
 8006856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685a:	3a30      	subs	r2, #48	; 0x30
 800685c:	2a09      	cmp	r2, #9
 800685e:	d903      	bls.n	8006868 <_svfiprintf_r+0x1a8>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0c5      	beq.n	80067f0 <_svfiprintf_r+0x130>
 8006864:	9105      	str	r1, [sp, #20]
 8006866:	e7c3      	b.n	80067f0 <_svfiprintf_r+0x130>
 8006868:	4604      	mov	r4, r0
 800686a:	2301      	movs	r3, #1
 800686c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006870:	e7f0      	b.n	8006854 <_svfiprintf_r+0x194>
 8006872:	ab03      	add	r3, sp, #12
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	462a      	mov	r2, r5
 8006878:	4638      	mov	r0, r7
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <_svfiprintf_r+0x1fc>)
 800687c:	a904      	add	r1, sp, #16
 800687e:	f7fd ffcb 	bl	8004818 <_printf_float>
 8006882:	1c42      	adds	r2, r0, #1
 8006884:	4606      	mov	r6, r0
 8006886:	d1d6      	bne.n	8006836 <_svfiprintf_r+0x176>
 8006888:	89ab      	ldrh	r3, [r5, #12]
 800688a:	065b      	lsls	r3, r3, #25
 800688c:	f53f af2c 	bmi.w	80066e8 <_svfiprintf_r+0x28>
 8006890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006892:	b01d      	add	sp, #116	; 0x74
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	ab03      	add	r3, sp, #12
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	462a      	mov	r2, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <_svfiprintf_r+0x1fc>)
 80068a2:	a904      	add	r1, sp, #16
 80068a4:	f7fe fa54 	bl	8004d50 <_printf_i>
 80068a8:	e7eb      	b.n	8006882 <_svfiprintf_r+0x1c2>
 80068aa:	bf00      	nop
 80068ac:	0800776c 	.word	0x0800776c
 80068b0:	08007772 	.word	0x08007772
 80068b4:	08007776 	.word	0x08007776
 80068b8:	08004819 	.word	0x08004819
 80068bc:	08006609 	.word	0x08006609

080068c0 <_sbrk_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	2300      	movs	r3, #0
 80068c4:	4d05      	ldr	r5, [pc, #20]	; (80068dc <_sbrk_r+0x1c>)
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	f7fb fd4a 	bl	8002364 <_sbrk>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_sbrk_r+0x1a>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_sbrk_r+0x1a>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	200006bc 	.word	0x200006bc

080068e0 <__assert_func>:
 80068e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068e2:	4614      	mov	r4, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <__assert_func+0x2c>)
 80068e8:	4605      	mov	r5, r0
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68d8      	ldr	r0, [r3, #12]
 80068ee:	b14c      	cbz	r4, 8006904 <__assert_func+0x24>
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <__assert_func+0x30>)
 80068f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068f6:	9100      	str	r1, [sp, #0]
 80068f8:	462b      	mov	r3, r5
 80068fa:	4906      	ldr	r1, [pc, #24]	; (8006914 <__assert_func+0x34>)
 80068fc:	f000 f80e 	bl	800691c <fiprintf>
 8006900:	f000 faaa 	bl	8006e58 <abort>
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <__assert_func+0x38>)
 8006906:	461c      	mov	r4, r3
 8006908:	e7f3      	b.n	80068f2 <__assert_func+0x12>
 800690a:	bf00      	nop
 800690c:	2000000c 	.word	0x2000000c
 8006910:	0800777d 	.word	0x0800777d
 8006914:	0800778a 	.word	0x0800778a
 8006918:	080077b8 	.word	0x080077b8

0800691c <fiprintf>:
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b503      	push	{r0, r1, lr}
 8006920:	4601      	mov	r1, r0
 8006922:	ab03      	add	r3, sp, #12
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <fiprintf+0x20>)
 8006926:	f853 2b04 	ldr.w	r2, [r3], #4
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	f000 f895 	bl	8006a5c <_vfiprintf_r>
 8006932:	b002      	add	sp, #8
 8006934:	f85d eb04 	ldr.w	lr, [sp], #4
 8006938:	b003      	add	sp, #12
 800693a:	4770      	bx	lr
 800693c:	2000000c 	.word	0x2000000c

08006940 <__ascii_mbtowc>:
 8006940:	b082      	sub	sp, #8
 8006942:	b901      	cbnz	r1, 8006946 <__ascii_mbtowc+0x6>
 8006944:	a901      	add	r1, sp, #4
 8006946:	b142      	cbz	r2, 800695a <__ascii_mbtowc+0x1a>
 8006948:	b14b      	cbz	r3, 800695e <__ascii_mbtowc+0x1e>
 800694a:	7813      	ldrb	r3, [r2, #0]
 800694c:	600b      	str	r3, [r1, #0]
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	1e10      	subs	r0, r2, #0
 8006952:	bf18      	it	ne
 8006954:	2001      	movne	r0, #1
 8006956:	b002      	add	sp, #8
 8006958:	4770      	bx	lr
 800695a:	4610      	mov	r0, r2
 800695c:	e7fb      	b.n	8006956 <__ascii_mbtowc+0x16>
 800695e:	f06f 0001 	mvn.w	r0, #1
 8006962:	e7f8      	b.n	8006956 <__ascii_mbtowc+0x16>

08006964 <memmove>:
 8006964:	4288      	cmp	r0, r1
 8006966:	b510      	push	{r4, lr}
 8006968:	eb01 0402 	add.w	r4, r1, r2
 800696c:	d902      	bls.n	8006974 <memmove+0x10>
 800696e:	4284      	cmp	r4, r0
 8006970:	4623      	mov	r3, r4
 8006972:	d807      	bhi.n	8006984 <memmove+0x20>
 8006974:	1e43      	subs	r3, r0, #1
 8006976:	42a1      	cmp	r1, r4
 8006978:	d008      	beq.n	800698c <memmove+0x28>
 800697a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800697e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006982:	e7f8      	b.n	8006976 <memmove+0x12>
 8006984:	4601      	mov	r1, r0
 8006986:	4402      	add	r2, r0
 8006988:	428a      	cmp	r2, r1
 800698a:	d100      	bne.n	800698e <memmove+0x2a>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006996:	e7f7      	b.n	8006988 <memmove+0x24>

08006998 <__malloc_lock>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__malloc_lock+0x8>)
 800699a:	f000 bc19 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	200006c0 	.word	0x200006c0

080069a4 <__malloc_unlock>:
 80069a4:	4801      	ldr	r0, [pc, #4]	; (80069ac <__malloc_unlock+0x8>)
 80069a6:	f000 bc14 	b.w	80071d2 <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	200006c0 	.word	0x200006c0

080069b0 <_realloc_r>:
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	4680      	mov	r8, r0
 80069b6:	4614      	mov	r4, r2
 80069b8:	460e      	mov	r6, r1
 80069ba:	b921      	cbnz	r1, 80069c6 <_realloc_r+0x16>
 80069bc:	4611      	mov	r1, r2
 80069be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c2:	f7ff bdad 	b.w	8006520 <_malloc_r>
 80069c6:	b92a      	cbnz	r2, 80069d4 <_realloc_r+0x24>
 80069c8:	f7ff fd42 	bl	8006450 <_free_r>
 80069cc:	4625      	mov	r5, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	f000 fc64 	bl	80072a0 <_malloc_usable_size_r>
 80069d8:	4284      	cmp	r4, r0
 80069da:	4607      	mov	r7, r0
 80069dc:	d802      	bhi.n	80069e4 <_realloc_r+0x34>
 80069de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069e2:	d812      	bhi.n	8006a0a <_realloc_r+0x5a>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7ff fd9a 	bl	8006520 <_malloc_r>
 80069ec:	4605      	mov	r5, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d0ed      	beq.n	80069ce <_realloc_r+0x1e>
 80069f2:	42bc      	cmp	r4, r7
 80069f4:	4622      	mov	r2, r4
 80069f6:	4631      	mov	r1, r6
 80069f8:	bf28      	it	cs
 80069fa:	463a      	movcs	r2, r7
 80069fc:	f7ff f984 	bl	8005d08 <memcpy>
 8006a00:	4631      	mov	r1, r6
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fd24 	bl	8006450 <_free_r>
 8006a08:	e7e1      	b.n	80069ce <_realloc_r+0x1e>
 8006a0a:	4635      	mov	r5, r6
 8006a0c:	e7df      	b.n	80069ce <_realloc_r+0x1e>

08006a0e <__sfputc_r>:
 8006a0e:	6893      	ldr	r3, [r2, #8]
 8006a10:	b410      	push	{r4}
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	6093      	str	r3, [r2, #8]
 8006a18:	da07      	bge.n	8006a2a <__sfputc_r+0x1c>
 8006a1a:	6994      	ldr	r4, [r2, #24]
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	db01      	blt.n	8006a24 <__sfputc_r+0x16>
 8006a20:	290a      	cmp	r1, #10
 8006a22:	d102      	bne.n	8006a2a <__sfputc_r+0x1c>
 8006a24:	bc10      	pop	{r4}
 8006a26:	f000 b949 	b.w	8006cbc <__swbuf_r>
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	1c58      	adds	r0, r3, #1
 8006a2e:	6010      	str	r0, [r2, #0]
 8006a30:	7019      	strb	r1, [r3, #0]
 8006a32:	4608      	mov	r0, r1
 8006a34:	bc10      	pop	{r4}
 8006a36:	4770      	bx	lr

08006a38 <__sfputs_r>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	4614      	mov	r4, r2
 8006a40:	18d5      	adds	r5, r2, r3
 8006a42:	42ac      	cmp	r4, r5
 8006a44:	d101      	bne.n	8006a4a <__sfputs_r+0x12>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e007      	b.n	8006a5a <__sfputs_r+0x22>
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a52:	f7ff ffdc 	bl	8006a0e <__sfputc_r>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d1f3      	bne.n	8006a42 <__sfputs_r+0xa>
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a5c <_vfiprintf_r>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	460d      	mov	r5, r1
 8006a62:	4614      	mov	r4, r2
 8006a64:	4698      	mov	r8, r3
 8006a66:	4606      	mov	r6, r0
 8006a68:	b09d      	sub	sp, #116	; 0x74
 8006a6a:	b118      	cbz	r0, 8006a74 <_vfiprintf_r+0x18>
 8006a6c:	6983      	ldr	r3, [r0, #24]
 8006a6e:	b90b      	cbnz	r3, 8006a74 <_vfiprintf_r+0x18>
 8006a70:	f000 fb10 	bl	8007094 <__sinit>
 8006a74:	4b89      	ldr	r3, [pc, #548]	; (8006c9c <_vfiprintf_r+0x240>)
 8006a76:	429d      	cmp	r5, r3
 8006a78:	d11b      	bne.n	8006ab2 <_vfiprintf_r+0x56>
 8006a7a:	6875      	ldr	r5, [r6, #4]
 8006a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a7e:	07d9      	lsls	r1, r3, #31
 8006a80:	d405      	bmi.n	8006a8e <_vfiprintf_r+0x32>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	059a      	lsls	r2, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_vfiprintf_r+0x32>
 8006a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a8a:	f000 fba1 	bl	80071d0 <__retarget_lock_acquire_recursive>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	071b      	lsls	r3, r3, #28
 8006a92:	d501      	bpl.n	8006a98 <_vfiprintf_r+0x3c>
 8006a94:	692b      	ldr	r3, [r5, #16]
 8006a96:	b9eb      	cbnz	r3, 8006ad4 <_vfiprintf_r+0x78>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f96e 	bl	8006d7c <__swsetup_r>
 8006aa0:	b1c0      	cbz	r0, 8006ad4 <_vfiprintf_r+0x78>
 8006aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa4:	07dc      	lsls	r4, r3, #31
 8006aa6:	d50e      	bpl.n	8006ac6 <_vfiprintf_r+0x6a>
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	b01d      	add	sp, #116	; 0x74
 8006aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	; (8006ca0 <_vfiprintf_r+0x244>)
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	d101      	bne.n	8006abc <_vfiprintf_r+0x60>
 8006ab8:	68b5      	ldr	r5, [r6, #8]
 8006aba:	e7df      	b.n	8006a7c <_vfiprintf_r+0x20>
 8006abc:	4b79      	ldr	r3, [pc, #484]	; (8006ca4 <_vfiprintf_r+0x248>)
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	bf08      	it	eq
 8006ac2:	68f5      	ldreq	r5, [r6, #12]
 8006ac4:	e7da      	b.n	8006a7c <_vfiprintf_r+0x20>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	0598      	lsls	r0, r3, #22
 8006aca:	d4ed      	bmi.n	8006aa8 <_vfiprintf_r+0x4c>
 8006acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ace:	f000 fb80 	bl	80071d2 <__retarget_lock_release_recursive>
 8006ad2:	e7e9      	b.n	8006aa8 <_vfiprintf_r+0x4c>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ade:	2330      	movs	r3, #48	; 0x30
 8006ae0:	f04f 0901 	mov.w	r9, #1
 8006ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ca8 <_vfiprintf_r+0x24c>
 8006aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af0:	4623      	mov	r3, r4
 8006af2:	469a      	mov	sl, r3
 8006af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af8:	b10a      	cbz	r2, 8006afe <_vfiprintf_r+0xa2>
 8006afa:	2a25      	cmp	r2, #37	; 0x25
 8006afc:	d1f9      	bne.n	8006af2 <_vfiprintf_r+0x96>
 8006afe:	ebba 0b04 	subs.w	fp, sl, r4
 8006b02:	d00b      	beq.n	8006b1c <_vfiprintf_r+0xc0>
 8006b04:	465b      	mov	r3, fp
 8006b06:	4622      	mov	r2, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ff94 	bl	8006a38 <__sfputs_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	f000 80aa 	beq.w	8006c6a <_vfiprintf_r+0x20e>
 8006b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b18:	445a      	add	r2, fp
 8006b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80a2 	beq.w	8006c6a <_vfiprintf_r+0x20e>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b30:	f10a 0a01 	add.w	sl, sl, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	9307      	str	r3, [sp, #28]
 8006b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b3e:	4654      	mov	r4, sl
 8006b40:	2205      	movs	r2, #5
 8006b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b46:	4858      	ldr	r0, [pc, #352]	; (8006ca8 <_vfiprintf_r+0x24c>)
 8006b48:	f7ff f8d0 	bl	8005cec <memchr>
 8006b4c:	9a04      	ldr	r2, [sp, #16]
 8006b4e:	b9d8      	cbnz	r0, 8006b88 <_vfiprintf_r+0x12c>
 8006b50:	06d1      	lsls	r1, r2, #27
 8006b52:	bf44      	itt	mi
 8006b54:	2320      	movmi	r3, #32
 8006b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5a:	0713      	lsls	r3, r2, #28
 8006b5c:	bf44      	itt	mi
 8006b5e:	232b      	movmi	r3, #43	; 0x2b
 8006b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b64:	f89a 3000 	ldrb.w	r3, [sl]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d015      	beq.n	8006b98 <_vfiprintf_r+0x13c>
 8006b6c:	4654      	mov	r4, sl
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f04f 0c0a 	mov.w	ip, #10
 8006b74:	9a07      	ldr	r2, [sp, #28]
 8006b76:	4621      	mov	r1, r4
 8006b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d94e      	bls.n	8006c20 <_vfiprintf_r+0x1c4>
 8006b82:	b1b0      	cbz	r0, 8006bb2 <_vfiprintf_r+0x156>
 8006b84:	9207      	str	r2, [sp, #28]
 8006b86:	e014      	b.n	8006bb2 <_vfiprintf_r+0x156>
 8006b88:	eba0 0308 	sub.w	r3, r0, r8
 8006b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	46a2      	mov	sl, r4
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	e7d2      	b.n	8006b3e <_vfiprintf_r+0xe2>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	1d19      	adds	r1, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9103      	str	r1, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfbb      	ittet	lt
 8006ba4:	425b      	neglt	r3, r3
 8006ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8006baa:	9307      	strge	r3, [sp, #28]
 8006bac:	9307      	strlt	r3, [sp, #28]
 8006bae:	bfb8      	it	lt
 8006bb0:	9204      	strlt	r2, [sp, #16]
 8006bb2:	7823      	ldrb	r3, [r4, #0]
 8006bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb6:	d10c      	bne.n	8006bd2 <_vfiprintf_r+0x176>
 8006bb8:	7863      	ldrb	r3, [r4, #1]
 8006bba:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbc:	d135      	bne.n	8006c2a <_vfiprintf_r+0x1ce>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3402      	adds	r4, #2
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9203      	str	r2, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfb8      	it	lt
 8006bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006cac <_vfiprintf_r+0x250>
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	4650      	mov	r0, sl
 8006bda:	7821      	ldrb	r1, [r4, #0]
 8006bdc:	f7ff f886 	bl	8005cec <memchr>
 8006be0:	b140      	cbz	r0, 8006bf4 <_vfiprintf_r+0x198>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	eba0 000a 	sub.w	r0, r0, sl
 8006be8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	3401      	adds	r4, #1
 8006bf0:	4303      	orrs	r3, r0
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	2206      	movs	r2, #6
 8006bfa:	482d      	ldr	r0, [pc, #180]	; (8006cb0 <_vfiprintf_r+0x254>)
 8006bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c00:	f7ff f874 	bl	8005cec <memchr>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d03f      	beq.n	8006c88 <_vfiprintf_r+0x22c>
 8006c08:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <_vfiprintf_r+0x258>)
 8006c0a:	bb1b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x1f8>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	3307      	adds	r3, #7
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1a:	443b      	add	r3, r7
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	e767      	b.n	8006af0 <_vfiprintf_r+0x94>
 8006c20:	460c      	mov	r4, r1
 8006c22:	2001      	movs	r0, #1
 8006c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c28:	e7a5      	b.n	8006b76 <_vfiprintf_r+0x11a>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f04f 0c0a 	mov.w	ip, #10
 8006c30:	4619      	mov	r1, r3
 8006c32:	3401      	adds	r4, #1
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	4620      	mov	r0, r4
 8006c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3c:	3a30      	subs	r2, #48	; 0x30
 8006c3e:	2a09      	cmp	r2, #9
 8006c40:	d903      	bls.n	8006c4a <_vfiprintf_r+0x1ee>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0c5      	beq.n	8006bd2 <_vfiprintf_r+0x176>
 8006c46:	9105      	str	r1, [sp, #20]
 8006c48:	e7c3      	b.n	8006bd2 <_vfiprintf_r+0x176>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c52:	e7f0      	b.n	8006c36 <_vfiprintf_r+0x1da>
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <_vfiprintf_r+0x25c>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	f7fd fdda 	bl	8004818 <_printf_float>
 8006c64:	4607      	mov	r7, r0
 8006c66:	1c78      	adds	r0, r7, #1
 8006c68:	d1d6      	bne.n	8006c18 <_vfiprintf_r+0x1bc>
 8006c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	d405      	bmi.n	8006c7c <_vfiprintf_r+0x220>
 8006c70:	89ab      	ldrh	r3, [r5, #12]
 8006c72:	059a      	lsls	r2, r3, #22
 8006c74:	d402      	bmi.n	8006c7c <_vfiprintf_r+0x220>
 8006c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c78:	f000 faab 	bl	80071d2 <__retarget_lock_release_recursive>
 8006c7c:	89ab      	ldrh	r3, [r5, #12]
 8006c7e:	065b      	lsls	r3, r3, #25
 8006c80:	f53f af12 	bmi.w	8006aa8 <_vfiprintf_r+0x4c>
 8006c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c86:	e711      	b.n	8006aac <_vfiprintf_r+0x50>
 8006c88:	ab03      	add	r3, sp, #12
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	4630      	mov	r0, r6
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <_vfiprintf_r+0x25c>)
 8006c92:	a904      	add	r1, sp, #16
 8006c94:	f7fe f85c 	bl	8004d50 <_printf_i>
 8006c98:	e7e4      	b.n	8006c64 <_vfiprintf_r+0x208>
 8006c9a:	bf00      	nop
 8006c9c:	080078e4 	.word	0x080078e4
 8006ca0:	08007904 	.word	0x08007904
 8006ca4:	080078c4 	.word	0x080078c4
 8006ca8:	0800776c 	.word	0x0800776c
 8006cac:	08007772 	.word	0x08007772
 8006cb0:	08007776 	.word	0x08007776
 8006cb4:	08004819 	.word	0x08004819
 8006cb8:	08006a39 	.word	0x08006a39

08006cbc <__swbuf_r>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	460e      	mov	r6, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	b118      	cbz	r0, 8006cce <__swbuf_r+0x12>
 8006cc6:	6983      	ldr	r3, [r0, #24]
 8006cc8:	b90b      	cbnz	r3, 8006cce <__swbuf_r+0x12>
 8006cca:	f000 f9e3 	bl	8007094 <__sinit>
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <__swbuf_r+0x98>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	d12b      	bne.n	8006d2c <__swbuf_r+0x70>
 8006cd4:	686c      	ldr	r4, [r5, #4]
 8006cd6:	69a3      	ldr	r3, [r4, #24]
 8006cd8:	60a3      	str	r3, [r4, #8]
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	071a      	lsls	r2, r3, #28
 8006cde:	d52f      	bpl.n	8006d40 <__swbuf_r+0x84>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b36b      	cbz	r3, 8006d40 <__swbuf_r+0x84>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	b2f6      	uxtb	r6, r6
 8006cea:	1ac0      	subs	r0, r0, r3
 8006cec:	6963      	ldr	r3, [r4, #20]
 8006cee:	4637      	mov	r7, r6
 8006cf0:	4283      	cmp	r3, r0
 8006cf2:	dc04      	bgt.n	8006cfe <__swbuf_r+0x42>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 f938 	bl	8006f6c <_fflush_r>
 8006cfc:	bb30      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	3001      	adds	r0, #1
 8006d02:	3b01      	subs	r3, #1
 8006d04:	60a3      	str	r3, [r4, #8]
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	6022      	str	r2, [r4, #0]
 8006d0c:	701e      	strb	r6, [r3, #0]
 8006d0e:	6963      	ldr	r3, [r4, #20]
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d004      	beq.n	8006d1e <__swbuf_r+0x62>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	07db      	lsls	r3, r3, #31
 8006d18:	d506      	bpl.n	8006d28 <__swbuf_r+0x6c>
 8006d1a:	2e0a      	cmp	r6, #10
 8006d1c:	d104      	bne.n	8006d28 <__swbuf_r+0x6c>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f923 	bl	8006f6c <_fflush_r>
 8006d26:	b988      	cbnz	r0, 8006d4c <__swbuf_r+0x90>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <__swbuf_r+0x9c>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <__swbuf_r+0x7a>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7cf      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <__swbuf_r+0xa0>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	bf08      	it	eq
 8006d3c:	68ec      	ldreq	r4, [r5, #12]
 8006d3e:	e7ca      	b.n	8006cd6 <__swbuf_r+0x1a>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f81a 	bl	8006d7c <__swsetup_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d0cb      	beq.n	8006ce4 <__swbuf_r+0x28>
 8006d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d50:	e7ea      	b.n	8006d28 <__swbuf_r+0x6c>
 8006d52:	bf00      	nop
 8006d54:	080078e4 	.word	0x080078e4
 8006d58:	08007904 	.word	0x08007904
 8006d5c:	080078c4 	.word	0x080078c4

08006d60 <__ascii_wctomb>:
 8006d60:	4603      	mov	r3, r0
 8006d62:	4608      	mov	r0, r1
 8006d64:	b141      	cbz	r1, 8006d78 <__ascii_wctomb+0x18>
 8006d66:	2aff      	cmp	r2, #255	; 0xff
 8006d68:	d904      	bls.n	8006d74 <__ascii_wctomb+0x14>
 8006d6a:	228a      	movs	r2, #138	; 0x8a
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	4770      	bx	lr
 8006d74:	2001      	movs	r0, #1
 8006d76:	700a      	strb	r2, [r1, #0]
 8006d78:	4770      	bx	lr
	...

08006d7c <__swsetup_r>:
 8006d7c:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <__swsetup_r+0xcc>)
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	4606      	mov	r6, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	b125      	cbz	r5, 8006d92 <__swsetup_r+0x16>
 8006d88:	69ab      	ldr	r3, [r5, #24]
 8006d8a:	b913      	cbnz	r3, 8006d92 <__swsetup_r+0x16>
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f981 	bl	8007094 <__sinit>
 8006d92:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <__swsetup_r+0xd0>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	d10f      	bne.n	8006db8 <__swsetup_r+0x3c>
 8006d98:	686c      	ldr	r4, [r5, #4]
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	d42c      	bmi.n	8006dfe <__swsetup_r+0x82>
 8006da4:	06dd      	lsls	r5, r3, #27
 8006da6:	d411      	bmi.n	8006dcc <__swsetup_r+0x50>
 8006da8:	2309      	movs	r3, #9
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	e03e      	b.n	8006e36 <__swsetup_r+0xba>
 8006db8:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <__swsetup_r+0xd4>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <__swsetup_r+0x46>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7eb      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <__swsetup_r+0xd8>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf08      	it	eq
 8006dc8:	68ec      	ldreq	r4, [r5, #12]
 8006dca:	e7e6      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dcc:	0758      	lsls	r0, r3, #29
 8006dce:	d512      	bpl.n	8006df6 <__swsetup_r+0x7a>
 8006dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd2:	b141      	cbz	r1, 8006de6 <__swsetup_r+0x6a>
 8006dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d002      	beq.n	8006de2 <__swsetup_r+0x66>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff fb37 	bl	8006450 <_free_r>
 8006de2:	2300      	movs	r3, #0
 8006de4:	6363      	str	r3, [r4, #52]	; 0x34
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	2300      	movs	r3, #0
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0308 	orr.w	r3, r3, #8
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	b94b      	cbnz	r3, 8006e16 <__swsetup_r+0x9a>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d003      	beq.n	8006e16 <__swsetup_r+0x9a>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 fa05 	bl	8007220 <__smakebuf_r>
 8006e16:	89a0      	ldrh	r0, [r4, #12]
 8006e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e1c:	f010 0301 	ands.w	r3, r0, #1
 8006e20:	d00a      	beq.n	8006e38 <__swsetup_r+0xbc>
 8006e22:	2300      	movs	r3, #0
 8006e24:	60a3      	str	r3, [r4, #8]
 8006e26:	6963      	ldr	r3, [r4, #20]
 8006e28:	425b      	negs	r3, r3
 8006e2a:	61a3      	str	r3, [r4, #24]
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	b943      	cbnz	r3, 8006e42 <__swsetup_r+0xc6>
 8006e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e34:	d1ba      	bne.n	8006dac <__swsetup_r+0x30>
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	0781      	lsls	r1, r0, #30
 8006e3a:	bf58      	it	pl
 8006e3c:	6963      	ldrpl	r3, [r4, #20]
 8006e3e:	60a3      	str	r3, [r4, #8]
 8006e40:	e7f4      	b.n	8006e2c <__swsetup_r+0xb0>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7f7      	b.n	8006e36 <__swsetup_r+0xba>
 8006e46:	bf00      	nop
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	080078e4 	.word	0x080078e4
 8006e50:	08007904 	.word	0x08007904
 8006e54:	080078c4 	.word	0x080078c4

08006e58 <abort>:
 8006e58:	2006      	movs	r0, #6
 8006e5a:	b508      	push	{r3, lr}
 8006e5c:	f000 fa50 	bl	8007300 <raise>
 8006e60:	2001      	movs	r0, #1
 8006e62:	f7fb fa0b 	bl	800227c <_exit>
	...

08006e68 <__sflush_r>:
 8006e68:	898a      	ldrh	r2, [r1, #12]
 8006e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	0710      	lsls	r0, r2, #28
 8006e70:	460c      	mov	r4, r1
 8006e72:	d457      	bmi.n	8006f24 <__sflush_r+0xbc>
 8006e74:	684b      	ldr	r3, [r1, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dc04      	bgt.n	8006e84 <__sflush_r+0x1c>
 8006e7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dc01      	bgt.n	8006e84 <__sflush_r+0x1c>
 8006e80:	2000      	movs	r0, #0
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d0fa      	beq.n	8006e80 <__sflush_r+0x18>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e90:	682f      	ldr	r7, [r5, #0]
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	d032      	beq.n	8006efc <__sflush_r+0x94>
 8006e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	075a      	lsls	r2, r3, #29
 8006e9c:	d505      	bpl.n	8006eaa <__sflush_r+0x42>
 8006e9e:	6863      	ldr	r3, [r4, #4]
 8006ea0:	1ac0      	subs	r0, r0, r3
 8006ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea4:	b10b      	cbz	r3, 8006eaa <__sflush_r+0x42>
 8006ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4602      	mov	r2, r0
 8006eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	47b0      	blx	r6
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	d106      	bne.n	8006eca <__sflush_r+0x62>
 8006ebc:	6829      	ldr	r1, [r5, #0]
 8006ebe:	291d      	cmp	r1, #29
 8006ec0:	d82c      	bhi.n	8006f1c <__sflush_r+0xb4>
 8006ec2:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <__sflush_r+0x100>)
 8006ec4:	40ca      	lsrs	r2, r1
 8006ec6:	07d6      	lsls	r6, r2, #31
 8006ec8:	d528      	bpl.n	8006f1c <__sflush_r+0xb4>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6062      	str	r2, [r4, #4]
 8006ece:	6922      	ldr	r2, [r4, #16]
 8006ed0:	04d9      	lsls	r1, r3, #19
 8006ed2:	6022      	str	r2, [r4, #0]
 8006ed4:	d504      	bpl.n	8006ee0 <__sflush_r+0x78>
 8006ed6:	1c42      	adds	r2, r0, #1
 8006ed8:	d101      	bne.n	8006ede <__sflush_r+0x76>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	b903      	cbnz	r3, 8006ee0 <__sflush_r+0x78>
 8006ede:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee2:	602f      	str	r7, [r5, #0]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d0cb      	beq.n	8006e80 <__sflush_r+0x18>
 8006ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <__sflush_r+0x8e>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f7ff faad 	bl	8006450 <_free_r>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8006efa:	e7c2      	b.n	8006e82 <__sflush_r+0x1a>
 8006efc:	6a21      	ldr	r1, [r4, #32]
 8006efe:	2301      	movs	r3, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	1c41      	adds	r1, r0, #1
 8006f06:	d1c7      	bne.n	8006e98 <__sflush_r+0x30>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c4      	beq.n	8006e98 <__sflush_r+0x30>
 8006f0e:	2b1d      	cmp	r3, #29
 8006f10:	d001      	beq.n	8006f16 <__sflush_r+0xae>
 8006f12:	2b16      	cmp	r3, #22
 8006f14:	d101      	bne.n	8006f1a <__sflush_r+0xb2>
 8006f16:	602f      	str	r7, [r5, #0]
 8006f18:	e7b2      	b.n	8006e80 <__sflush_r+0x18>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7ae      	b.n	8006e82 <__sflush_r+0x1a>
 8006f24:	690f      	ldr	r7, [r1, #16]
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	d0aa      	beq.n	8006e80 <__sflush_r+0x18>
 8006f2a:	0793      	lsls	r3, r2, #30
 8006f2c:	bf18      	it	ne
 8006f2e:	2300      	movne	r3, #0
 8006f30:	680e      	ldr	r6, [r1, #0]
 8006f32:	bf08      	it	eq
 8006f34:	694b      	ldreq	r3, [r1, #20]
 8006f36:	1bf6      	subs	r6, r6, r7
 8006f38:	600f      	str	r7, [r1, #0]
 8006f3a:	608b      	str	r3, [r1, #8]
 8006f3c:	2e00      	cmp	r6, #0
 8006f3e:	dd9f      	ble.n	8006e80 <__sflush_r+0x18>
 8006f40:	4633      	mov	r3, r6
 8006f42:	463a      	mov	r2, r7
 8006f44:	4628      	mov	r0, r5
 8006f46:	6a21      	ldr	r1, [r4, #32]
 8006f48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006f4c:	47e0      	blx	ip
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	dc06      	bgt.n	8006f60 <__sflush_r+0xf8>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	e790      	b.n	8006e82 <__sflush_r+0x1a>
 8006f60:	4407      	add	r7, r0
 8006f62:	1a36      	subs	r6, r6, r0
 8006f64:	e7ea      	b.n	8006f3c <__sflush_r+0xd4>
 8006f66:	bf00      	nop
 8006f68:	20400001 	.word	0x20400001

08006f6c <_fflush_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	690b      	ldr	r3, [r1, #16]
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b913      	cbnz	r3, 8006f7c <_fflush_r+0x10>
 8006f76:	2500      	movs	r5, #0
 8006f78:	4628      	mov	r0, r5
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	b118      	cbz	r0, 8006f86 <_fflush_r+0x1a>
 8006f7e:	6983      	ldr	r3, [r0, #24]
 8006f80:	b90b      	cbnz	r3, 8006f86 <_fflush_r+0x1a>
 8006f82:	f000 f887 	bl	8007094 <__sinit>
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <_fflush_r+0x6c>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	d11b      	bne.n	8006fc4 <_fflush_r+0x58>
 8006f8c:	686c      	ldr	r4, [r5, #4]
 8006f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0ef      	beq.n	8006f76 <_fflush_r+0xa>
 8006f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f98:	07d0      	lsls	r0, r2, #31
 8006f9a:	d404      	bmi.n	8006fa6 <_fflush_r+0x3a>
 8006f9c:	0599      	lsls	r1, r3, #22
 8006f9e:	d402      	bmi.n	8006fa6 <_fflush_r+0x3a>
 8006fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa2:	f000 f915 	bl	80071d0 <__retarget_lock_acquire_recursive>
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	4621      	mov	r1, r4
 8006faa:	f7ff ff5d 	bl	8006e68 <__sflush_r>
 8006fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	07da      	lsls	r2, r3, #31
 8006fb4:	d4e0      	bmi.n	8006f78 <_fflush_r+0xc>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	059b      	lsls	r3, r3, #22
 8006fba:	d4dd      	bmi.n	8006f78 <_fflush_r+0xc>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fbe:	f000 f908 	bl	80071d2 <__retarget_lock_release_recursive>
 8006fc2:	e7d9      	b.n	8006f78 <_fflush_r+0xc>
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <_fflush_r+0x70>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d101      	bne.n	8006fce <_fflush_r+0x62>
 8006fca:	68ac      	ldr	r4, [r5, #8]
 8006fcc:	e7df      	b.n	8006f8e <_fflush_r+0x22>
 8006fce:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <_fflush_r+0x74>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	bf08      	it	eq
 8006fd4:	68ec      	ldreq	r4, [r5, #12]
 8006fd6:	e7da      	b.n	8006f8e <_fflush_r+0x22>
 8006fd8:	080078e4 	.word	0x080078e4
 8006fdc:	08007904 	.word	0x08007904
 8006fe0:	080078c4 	.word	0x080078c4

08006fe4 <std>:
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	e9c0 3300 	strd	r3, r3, [r0]
 8006fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ff2:	6083      	str	r3, [r0, #8]
 8006ff4:	8181      	strh	r1, [r0, #12]
 8006ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff8:	81c2      	strh	r2, [r0, #14]
 8006ffa:	6183      	str	r3, [r0, #24]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2208      	movs	r2, #8
 8007000:	305c      	adds	r0, #92	; 0x5c
 8007002:	f7fd fb63 	bl	80046cc <memset>
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <std+0x38>)
 8007008:	6224      	str	r4, [r4, #32]
 800700a:	6263      	str	r3, [r4, #36]	; 0x24
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <std+0x3c>)
 800700e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <std+0x40>)
 8007012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <std+0x44>)
 8007016:	6323      	str	r3, [r4, #48]	; 0x30
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	08007339 	.word	0x08007339
 8007020:	0800735b 	.word	0x0800735b
 8007024:	08007393 	.word	0x08007393
 8007028:	080073b7 	.word	0x080073b7

0800702c <_cleanup_r>:
 800702c:	4901      	ldr	r1, [pc, #4]	; (8007034 <_cleanup_r+0x8>)
 800702e:	f000 b8af 	b.w	8007190 <_fwalk_reent>
 8007032:	bf00      	nop
 8007034:	08006f6d 	.word	0x08006f6d

08007038 <__sfmoreglue>:
 8007038:	2268      	movs	r2, #104	; 0x68
 800703a:	b570      	push	{r4, r5, r6, lr}
 800703c:	1e4d      	subs	r5, r1, #1
 800703e:	4355      	muls	r5, r2
 8007040:	460e      	mov	r6, r1
 8007042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007046:	f7ff fa6b 	bl	8006520 <_malloc_r>
 800704a:	4604      	mov	r4, r0
 800704c:	b140      	cbz	r0, 8007060 <__sfmoreglue+0x28>
 800704e:	2100      	movs	r1, #0
 8007050:	e9c0 1600 	strd	r1, r6, [r0]
 8007054:	300c      	adds	r0, #12
 8007056:	60a0      	str	r0, [r4, #8]
 8007058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800705c:	f7fd fb36 	bl	80046cc <memset>
 8007060:	4620      	mov	r0, r4
 8007062:	bd70      	pop	{r4, r5, r6, pc}

08007064 <__sfp_lock_acquire>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__sfp_lock_acquire+0x8>)
 8007066:	f000 b8b3 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 800706a:	bf00      	nop
 800706c:	200006c1 	.word	0x200006c1

08007070 <__sfp_lock_release>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__sfp_lock_release+0x8>)
 8007072:	f000 b8ae 	b.w	80071d2 <__retarget_lock_release_recursive>
 8007076:	bf00      	nop
 8007078:	200006c1 	.word	0x200006c1

0800707c <__sinit_lock_acquire>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__sinit_lock_acquire+0x8>)
 800707e:	f000 b8a7 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 8007082:	bf00      	nop
 8007084:	200006c2 	.word	0x200006c2

08007088 <__sinit_lock_release>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__sinit_lock_release+0x8>)
 800708a:	f000 b8a2 	b.w	80071d2 <__retarget_lock_release_recursive>
 800708e:	bf00      	nop
 8007090:	200006c2 	.word	0x200006c2

08007094 <__sinit>:
 8007094:	b510      	push	{r4, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	f7ff fff0 	bl	800707c <__sinit_lock_acquire>
 800709c:	69a3      	ldr	r3, [r4, #24]
 800709e:	b11b      	cbz	r3, 80070a8 <__sinit+0x14>
 80070a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a4:	f7ff bff0 	b.w	8007088 <__sinit_lock_release>
 80070a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070ac:	6523      	str	r3, [r4, #80]	; 0x50
 80070ae:	4b13      	ldr	r3, [pc, #76]	; (80070fc <__sinit+0x68>)
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <__sinit+0x6c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	bf08      	it	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	4620      	mov	r0, r4
 80070be:	bf08      	it	eq
 80070c0:	61a3      	streq	r3, [r4, #24]
 80070c2:	f000 f81f 	bl	8007104 <__sfp>
 80070c6:	6060      	str	r0, [r4, #4]
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f81b 	bl	8007104 <__sfp>
 80070ce:	60a0      	str	r0, [r4, #8]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 f817 	bl	8007104 <__sfp>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2104      	movs	r1, #4
 80070da:	60e0      	str	r0, [r4, #12]
 80070dc:	6860      	ldr	r0, [r4, #4]
 80070de:	f7ff ff81 	bl	8006fe4 <std>
 80070e2:	2201      	movs	r2, #1
 80070e4:	2109      	movs	r1, #9
 80070e6:	68a0      	ldr	r0, [r4, #8]
 80070e8:	f7ff ff7c 	bl	8006fe4 <std>
 80070ec:	2202      	movs	r2, #2
 80070ee:	2112      	movs	r1, #18
 80070f0:	68e0      	ldr	r0, [r4, #12]
 80070f2:	f7ff ff77 	bl	8006fe4 <std>
 80070f6:	2301      	movs	r3, #1
 80070f8:	61a3      	str	r3, [r4, #24]
 80070fa:	e7d1      	b.n	80070a0 <__sinit+0xc>
 80070fc:	0800754c 	.word	0x0800754c
 8007100:	0800702d 	.word	0x0800702d

08007104 <__sfp>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	4607      	mov	r7, r0
 8007108:	f7ff ffac 	bl	8007064 <__sfp_lock_acquire>
 800710c:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <__sfp+0x84>)
 800710e:	681e      	ldr	r6, [r3, #0]
 8007110:	69b3      	ldr	r3, [r6, #24]
 8007112:	b913      	cbnz	r3, 800711a <__sfp+0x16>
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ffbd 	bl	8007094 <__sinit>
 800711a:	3648      	adds	r6, #72	; 0x48
 800711c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007120:	3b01      	subs	r3, #1
 8007122:	d503      	bpl.n	800712c <__sfp+0x28>
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	b30b      	cbz	r3, 800716c <__sfp+0x68>
 8007128:	6836      	ldr	r6, [r6, #0]
 800712a:	e7f7      	b.n	800711c <__sfp+0x18>
 800712c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007130:	b9d5      	cbnz	r5, 8007168 <__sfp+0x64>
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <__sfp+0x88>)
 8007134:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007138:	60e3      	str	r3, [r4, #12]
 800713a:	6665      	str	r5, [r4, #100]	; 0x64
 800713c:	f000 f847 	bl	80071ce <__retarget_lock_init_recursive>
 8007140:	f7ff ff96 	bl	8007070 <__sfp_lock_release>
 8007144:	2208      	movs	r2, #8
 8007146:	4629      	mov	r1, r5
 8007148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800714c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007150:	6025      	str	r5, [r4, #0]
 8007152:	61a5      	str	r5, [r4, #24]
 8007154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007158:	f7fd fab8 	bl	80046cc <memset>
 800715c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007164:	4620      	mov	r0, r4
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007168:	3468      	adds	r4, #104	; 0x68
 800716a:	e7d9      	b.n	8007120 <__sfp+0x1c>
 800716c:	2104      	movs	r1, #4
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff ff62 	bl	8007038 <__sfmoreglue>
 8007174:	4604      	mov	r4, r0
 8007176:	6030      	str	r0, [r6, #0]
 8007178:	2800      	cmp	r0, #0
 800717a:	d1d5      	bne.n	8007128 <__sfp+0x24>
 800717c:	f7ff ff78 	bl	8007070 <__sfp_lock_release>
 8007180:	230c      	movs	r3, #12
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	e7ee      	b.n	8007164 <__sfp+0x60>
 8007186:	bf00      	nop
 8007188:	0800754c 	.word	0x0800754c
 800718c:	ffff0001 	.word	0xffff0001

08007190 <_fwalk_reent>:
 8007190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007194:	4606      	mov	r6, r0
 8007196:	4688      	mov	r8, r1
 8007198:	2700      	movs	r7, #0
 800719a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800719e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071a2:	f1b9 0901 	subs.w	r9, r9, #1
 80071a6:	d505      	bpl.n	80071b4 <_fwalk_reent+0x24>
 80071a8:	6824      	ldr	r4, [r4, #0]
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	d1f7      	bne.n	800719e <_fwalk_reent+0xe>
 80071ae:	4638      	mov	r0, r7
 80071b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b4:	89ab      	ldrh	r3, [r5, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d907      	bls.n	80071ca <_fwalk_reent+0x3a>
 80071ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071be:	3301      	adds	r3, #1
 80071c0:	d003      	beq.n	80071ca <_fwalk_reent+0x3a>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4630      	mov	r0, r6
 80071c6:	47c0      	blx	r8
 80071c8:	4307      	orrs	r7, r0
 80071ca:	3568      	adds	r5, #104	; 0x68
 80071cc:	e7e9      	b.n	80071a2 <_fwalk_reent+0x12>

080071ce <__retarget_lock_init_recursive>:
 80071ce:	4770      	bx	lr

080071d0 <__retarget_lock_acquire_recursive>:
 80071d0:	4770      	bx	lr

080071d2 <__retarget_lock_release_recursive>:
 80071d2:	4770      	bx	lr

080071d4 <__swhatbuf_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	4614      	mov	r4, r2
 80071de:	2900      	cmp	r1, #0
 80071e0:	461d      	mov	r5, r3
 80071e2:	b096      	sub	sp, #88	; 0x58
 80071e4:	da08      	bge.n	80071f8 <__swhatbuf_r+0x24>
 80071e6:	2200      	movs	r2, #0
 80071e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	061a      	lsls	r2, r3, #24
 80071f0:	d410      	bmi.n	8007214 <__swhatbuf_r+0x40>
 80071f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f6:	e00e      	b.n	8007216 <__swhatbuf_r+0x42>
 80071f8:	466a      	mov	r2, sp
 80071fa:	f000 f903 	bl	8007404 <_fstat_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	dbf1      	blt.n	80071e6 <__swhatbuf_r+0x12>
 8007202:	9a01      	ldr	r2, [sp, #4]
 8007204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800720c:	425a      	negs	r2, r3
 800720e:	415a      	adcs	r2, r3
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	e7ee      	b.n	80071f2 <__swhatbuf_r+0x1e>
 8007214:	2340      	movs	r3, #64	; 0x40
 8007216:	2000      	movs	r0, #0
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	b016      	add	sp, #88	; 0x58
 800721c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007220 <__smakebuf_r>:
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007224:	079d      	lsls	r5, r3, #30
 8007226:	4606      	mov	r6, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d507      	bpl.n	800723c <__smakebuf_r+0x1c>
 800722c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2301      	movs	r3, #1
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	b002      	add	sp, #8
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	466a      	mov	r2, sp
 800723e:	ab01      	add	r3, sp, #4
 8007240:	f7ff ffc8 	bl	80071d4 <__swhatbuf_r>
 8007244:	9900      	ldr	r1, [sp, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	4630      	mov	r0, r6
 800724a:	f7ff f969 	bl	8006520 <_malloc_r>
 800724e:	b948      	cbnz	r0, 8007264 <__smakebuf_r+0x44>
 8007250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d4ef      	bmi.n	8007238 <__smakebuf_r+0x18>
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e7e3      	b.n	800722c <__smakebuf_r+0xc>
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <__smakebuf_r+0x7c>)
 8007266:	62b3      	str	r3, [r6, #40]	; 0x28
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	6120      	str	r0, [r4, #16]
 8007276:	6163      	str	r3, [r4, #20]
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	b15b      	cbz	r3, 8007294 <__smakebuf_r+0x74>
 800727c:	4630      	mov	r0, r6
 800727e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007282:	f000 f8d1 	bl	8007428 <_isatty_r>
 8007286:	b128      	cbz	r0, 8007294 <__smakebuf_r+0x74>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	89a0      	ldrh	r0, [r4, #12]
 8007296:	4305      	orrs	r5, r0
 8007298:	81a5      	strh	r5, [r4, #12]
 800729a:	e7cd      	b.n	8007238 <__smakebuf_r+0x18>
 800729c:	0800702d 	.word	0x0800702d

080072a0 <_malloc_usable_size_r>:
 80072a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a4:	1f18      	subs	r0, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfbc      	itt	lt
 80072aa:	580b      	ldrlt	r3, [r1, r0]
 80072ac:	18c0      	addlt	r0, r0, r3
 80072ae:	4770      	bx	lr

080072b0 <_raise_r>:
 80072b0:	291f      	cmp	r1, #31
 80072b2:	b538      	push	{r3, r4, r5, lr}
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	d904      	bls.n	80072c4 <_raise_r+0x14>
 80072ba:	2316      	movs	r3, #22
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072c6:	b112      	cbz	r2, 80072ce <_raise_r+0x1e>
 80072c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072cc:	b94b      	cbnz	r3, 80072e2 <_raise_r+0x32>
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f830 	bl	8007334 <_getpid_r>
 80072d4:	462a      	mov	r2, r5
 80072d6:	4601      	mov	r1, r0
 80072d8:	4620      	mov	r0, r4
 80072da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072de:	f000 b817 	b.w	8007310 <_kill_r>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d00a      	beq.n	80072fc <_raise_r+0x4c>
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	d103      	bne.n	80072f2 <_raise_r+0x42>
 80072ea:	2316      	movs	r3, #22
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	2001      	movs	r0, #1
 80072f0:	e7e7      	b.n	80072c2 <_raise_r+0x12>
 80072f2:	2400      	movs	r4, #0
 80072f4:	4628      	mov	r0, r5
 80072f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072fa:	4798      	blx	r3
 80072fc:	2000      	movs	r0, #0
 80072fe:	e7e0      	b.n	80072c2 <_raise_r+0x12>

08007300 <raise>:
 8007300:	4b02      	ldr	r3, [pc, #8]	; (800730c <raise+0xc>)
 8007302:	4601      	mov	r1, r0
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	f7ff bfd3 	b.w	80072b0 <_raise_r>
 800730a:	bf00      	nop
 800730c:	2000000c 	.word	0x2000000c

08007310 <_kill_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	2300      	movs	r3, #0
 8007314:	4d06      	ldr	r5, [pc, #24]	; (8007330 <_kill_r+0x20>)
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f7fa ff9d 	bl	800225c <_kill>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d102      	bne.n	800732c <_kill_r+0x1c>
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	b103      	cbz	r3, 800732c <_kill_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	200006bc 	.word	0x200006bc

08007334 <_getpid_r>:
 8007334:	f7fa bf8b 	b.w	800224e <_getpid>

08007338 <__sread>:
 8007338:	b510      	push	{r4, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007340:	f000 f894 	bl	800746c <_read_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	bfab      	itete	ge
 8007348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800734a:	89a3      	ldrhlt	r3, [r4, #12]
 800734c:	181b      	addge	r3, r3, r0
 800734e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007352:	bfac      	ite	ge
 8007354:	6563      	strge	r3, [r4, #84]	; 0x54
 8007356:	81a3      	strhlt	r3, [r4, #12]
 8007358:	bd10      	pop	{r4, pc}

0800735a <__swrite>:
 800735a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735e:	461f      	mov	r7, r3
 8007360:	898b      	ldrh	r3, [r1, #12]
 8007362:	4605      	mov	r5, r0
 8007364:	05db      	lsls	r3, r3, #23
 8007366:	460c      	mov	r4, r1
 8007368:	4616      	mov	r6, r2
 800736a:	d505      	bpl.n	8007378 <__swrite+0x1e>
 800736c:	2302      	movs	r3, #2
 800736e:	2200      	movs	r2, #0
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	f000 f868 	bl	8007448 <_lseek_r>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	4632      	mov	r2, r6
 800737c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	4628      	mov	r0, r5
 8007384:	463b      	mov	r3, r7
 8007386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	f000 b817 	b.w	80073c0 <_write_r>

08007392 <__sseek>:
 8007392:	b510      	push	{r4, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739a:	f000 f855 	bl	8007448 <_lseek_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	bf15      	itete	ne
 80073a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ae:	81a3      	strheq	r3, [r4, #12]
 80073b0:	bf18      	it	ne
 80073b2:	81a3      	strhne	r3, [r4, #12]
 80073b4:	bd10      	pop	{r4, pc}

080073b6 <__sclose>:
 80073b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ba:	f000 b813 	b.w	80073e4 <_close_r>
	...

080073c0 <_write_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	2200      	movs	r2, #0
 80073ca:	4d05      	ldr	r5, [pc, #20]	; (80073e0 <_write_r+0x20>)
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7fa ff7b 	bl	80022ca <_write>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_write_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_write_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	200006bc 	.word	0x200006bc

080073e4 <_close_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	2300      	movs	r3, #0
 80073e8:	4d05      	ldr	r5, [pc, #20]	; (8007400 <_close_r+0x1c>)
 80073ea:	4604      	mov	r4, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	f7fa ff87 	bl	8002302 <_close>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_close_r+0x1a>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_close_r+0x1a>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	200006bc 	.word	0x200006bc

08007404 <_fstat_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	2300      	movs	r3, #0
 8007408:	4d06      	ldr	r5, [pc, #24]	; (8007424 <_fstat_r+0x20>)
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	f7fa ff81 	bl	8002318 <_fstat>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d102      	bne.n	8007420 <_fstat_r+0x1c>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	b103      	cbz	r3, 8007420 <_fstat_r+0x1c>
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	bf00      	nop
 8007424:	200006bc 	.word	0x200006bc

08007428 <_isatty_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	2300      	movs	r3, #0
 800742c:	4d05      	ldr	r5, [pc, #20]	; (8007444 <_isatty_r+0x1c>)
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa ff7f 	bl	8002336 <_isatty>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_isatty_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_isatty_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	200006bc 	.word	0x200006bc

08007448 <_lseek_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	2200      	movs	r2, #0
 8007452:	4d05      	ldr	r5, [pc, #20]	; (8007468 <_lseek_r+0x20>)
 8007454:	602a      	str	r2, [r5, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f7fa ff77 	bl	800234a <_lseek>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_lseek_r+0x1e>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_lseek_r+0x1e>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	200006bc 	.word	0x200006bc

0800746c <_read_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	2200      	movs	r2, #0
 8007476:	4d05      	ldr	r5, [pc, #20]	; (800748c <_read_r+0x20>)
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7fa ff08 	bl	8002290 <_read>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_read_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_read_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	200006bc 	.word	0x200006bc

08007490 <_init>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr

0800749c <_fini>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr
